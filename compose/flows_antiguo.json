[
    {
        "id": "eb65df9c7eb63c1b",
        "type": "tab",
        "label": "Lecturas F2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "205825f9a799aa40",
        "type": "tab",
        "label": "Lecturas F1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3e8ffc98223c95e8",
        "type": "tab",
        "label": "Prueba PLC mitsubishi",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "38e65435f2163ea9",
        "type": "tab",
        "label": "Flujo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4dd79f1fdbfd6807",
        "type": "websocket-listener",
        "path": "/ws/connectionstatus",
        "wholemsg": "false"
    },
    {
        "id": "0cd0de0349e15191",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxTest2",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.1.154:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "7f30cc9a7c774cbd",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDBv2 lectura",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": false
    },
    {
        "id": "fd812ec1a0185442",
        "type": "modbus-client",
        "name": "SILO_SUR_NORTE",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.27",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 5,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d4f960f2203b21bf",
        "type": "modbus-client",
        "name": "TEST",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.210",
        "tcpPort": "8899",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "0",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "62685803db2817d6",
        "type": "modbus-client",
        "name": "SILO_COHETE",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.28",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "0bd0941b0d027eab",
        "type": "modbus-client",
        "name": "temperatura_lecho_F2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.206",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5fd4857c0abc50b3",
        "type": "Ind MC Protocol Connection",
        "name": "",
        "host": "192.168.1.216",
        "port": "1025",
        "protocol": "TCP",
        "frame": "4E",
        "plcType": "L",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "1000",
        "autoConnect": true
    },
    {
        "id": "a58ac421aa624587",
        "type": "Ind MC Protocol Connection",
        "name": "",
        "host": "192.168.1.31",
        "port": "1025",
        "protocol": "TCP",
        "frame": "4E",
        "plcType": "L",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "1000",
        "autoConnect": true
    },
    {
        "id": "e0415a0dfe56dc80",
        "type": "modbustcp-server",
        "name": "test",
        "host": "192.168.3.205",
        "port": "502",
        "unit_id": "1",
        "reconnecttimeout": ""
    },
    {
        "id": "7a46a0045114eb9d",
        "type": "modbus-client",
        "name": "Presion_aire_shakeout",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.212",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e6786a342ce86a73",
        "type": "websocket-listener",
        "path": "/ws/countershakeout",
        "wholemsg": "false"
    },
    {
        "id": "47197bdf13bce40a",
        "type": "websocket-listener",
        "path": "/ws/PLCLecho",
        "wholemsg": "false"
    },
    {
        "id": "ac518f1fa34b61a4",
        "type": "modbus-client",
        "name": "local Mosbus Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "db6f9b3e.e5f338",
        "type": "modbus-client",
        "name": "test1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "192.168.1.208",
        "tcpPort": "8899",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": false,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "48496f3b.10762",
        "type": "modbus-client",
        "name": "local",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectTimeout": 2000
    },
    {
        "id": "8273b77ad09eb963",
        "type": "websocket-listener",
        "path": "/ws/testgraficos",
        "wholemsg": "false"
    },
    {
        "id": "37830e4fc0f557c2",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "c7f4373da41634e0",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "a4890476b701e6e1"
            ]
        ]
    },
    {
        "id": "88442ee0e67ba51d",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "c7f4373da41634e0",
                "3db8081f9e71390f"
            ]
        ]
    },
    {
        "id": "a05efb5e1bba7375",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 60,
        "wires": []
    },
    {
        "id": "a4890476b701e6e1",
        "type": "tcp request",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "server": "192.168.1.201",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "a05efb5e1bba7375",
                "0e20e64185dd5ca2",
                "33ee166154a6907e"
            ]
        ]
    },
    {
        "id": "e4d38ad30ab2c30a",
        "type": "tcp request",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "server": "192.168.1.208",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "1500",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "d92cb45be1d67e49",
                "774c8d2642c33686",
                "1153deaf2408909e"
            ]
        ]
    },
    {
        "id": "aaa230a257f37bc8",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Modbus Request",
        "func": "\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x01,0x03,0x01,0x00,0x00,0x60,0x44,0x1E])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 540,
        "wires": [
            [
                "e4d38ad30ab2c30a"
            ]
        ]
    },
    {
        "id": "a1ec2971507c8dd7",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "aaa230a257f37bc8"
            ]
        ]
    },
    {
        "id": "d92cb45be1d67e49",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "789b4a1bed3803a1",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "HORNO 1 FUNDICION 2",
        "info": "",
        "x": 470,
        "y": 60,
        "wires": []
    },
    {
        "id": "ce5a9eeb46d1914a",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "Medidor de potencia [DPM-C530]",
        "info": "",
        "x": 210,
        "y": 480,
        "wires": []
    },
    {
        "id": "9c9c96010afb4707",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "HORNO 2 FUNDICION 2",
        "info": "",
        "x": 470,
        "y": 480,
        "wires": []
    },
    {
        "id": "6d8459284490ceb7",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "ADAM-6017",
        "info": "",
        "x": 470,
        "y": 880,
        "wires": []
    },
    {
        "id": "a8ffc2cf7a32861f",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "SILO SUR Y NORTE FUNDICION 2",
        "info": "",
        "x": 560,
        "y": 860,
        "wires": []
    },
    {
        "id": "75f1873778169547",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "ADAM-6017",
        "info": "",
        "x": 490,
        "y": 1400,
        "wires": []
    },
    {
        "id": "d0ed3abe3047d6bc",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "SILO COHETE FUNDICION 2",
        "info": "",
        "x": 560,
        "y": 1380,
        "wires": []
    },
    {
        "id": "1ee6f5a5e97d545f",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 16",
        "func": "msg.topic=\"InfluxData4\"\nif ((msg.payload === 1) || msg.payload === 2) {\n\n    let disconnect = 0;\n    global.set(\"siloN_S\", disconnect);  // Guarda la primera vez que se activa\n\n    msg.payload={\n    \"silo_sur\" : Number(0),\n    \"silo_norte\" : Number(0),\n    //\"Ch2\": CH2,\n   // \"Ch3\": CH3,\n    //\"Ch4\": CH4,\n    //\"Ch5\": CH5,\n    //\"Ch6\": CH6,\n    //\"Ch7\": CH7\n}\nreturn msg;\n} else if (msg.payload.data){\nvar CH0=msg.payload.data[0]\nvar CH1 = msg.payload.data[1]\nvar CH2 = msg.payload.data[2]\nvar CH3 = msg.payload.data[3]\nvar CH4 = msg.payload.data[4]\nvar CH5 = msg.payload.data[5]\nvar CH6 = msg.payload.data[6]\nvar CH7 = msg.payload.data[7]\n\n//Silo sur\nvar CH07=(0.0021628636*CH7-41.7432685666)\n//silo Norte\nvar CH06=(0.0021628636*CH6-41.7432683746)\n\nCH06 = Number(CH06.toFixed(1));\nCH07 = Number(CH07.toFixed(1));\n\nlet disconnect = 50;\nglobal.set(\"siloN_S\", disconnect);  // Guarda la primera vez que se activa\n\nmsg.payload={\n    \"silo_sur\" : CH07,\n    \"silo_norte\" : CH06,\n    //\"Ch6\": CH6,\n   // \"Ch7\": CH7,\n    //\"Ch4\": CH4,\n    //\"Ch5\": CH5,\n    //\"Ch6\": CH6,\n    //\"Ch7\": CH7\n}\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 980,
        "wires": [
            [
                "57e513f714f68e25",
                "236edf7af0f77ccf"
            ]
        ]
    },
    {
        "id": "57e513f714f68e25",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 940,
        "wires": []
    },
    {
        "id": "bc45c9944b17bdf9",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 17",
        "func": "msg.topic = \"InfluxData5\"\n\nif (msg.payload === 1 || msg.payload === 2) {\n\n    let disconnect = 0;\n    global.set(\"silo_cohete1\", disconnect);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"silo_cohete\": Number(0),\n        //\"Ch2\": CH2,\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    var CH2 = msg.payload.data[2]\n    var CH3 = msg.payload.data[3]\n    var CH4 = msg.payload.data[4]\n    var CH5 = msg.payload.data[5]\n    var CH6 = msg.payload.data[6]\n    var CH7 = msg.payload.data[7]\n\n    //silo cohete\n    var CH07 = (0.00196944732 * CH7 - 29.0694239291);\n\n    CH07 = Number(CH07.toFixed(1));\n    if (CH07 < 0) {\n        CH07 = 0.1;\n    }\n\n    let disconnect = 50;\n    global.set(\"silo_cohete1\", disconnect);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"silo_cohete\": CH07,\n        //\"Ch7\": CH7,\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1480,
        "wires": [
            [
                "40b58395ea1605df",
                "e812e11de2447a68"
            ]
        ]
    },
    {
        "id": "40b58395ea1605df",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ea751050941a80bd",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "a4890476b701e6e1"
            ]
        ]
    },
    {
        "id": "3db8081f9e71390f",
        "type": "delay",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 260,
        "wires": [
            [
                "ea751050941a80bd"
            ]
        ]
    },
    {
        "id": "ac8798941ed808ce",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 180,
        "wires": []
    },
    {
        "id": "0e20e64185dd5ca2",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n    var power1 = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n   \n    global.set(\"potHorno1F2\", power);  // Guarda la primera vez que se activa\n    // let ultimoNivelPot = global.get(\"potHorno1F2\") || power;\n    // node.status({ fill: \"blue\", shape: \"dot\", text: \"potHorno1F2: \" + ultimoNivelPot });\n    \n    // node.warn(\"Valor de potHorno1F2: \" + ultimoNivelPot);\n    \n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "e41c090ca080afca"
            ]
        ]
    },
    {
        "id": "33ee166154a6907e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n    \n    global.set(\"potHorno1F2\", power);  // Guarda la primera vez que se activa\n    let ultimoNivelPot = global.get(\"potHorno1F2\") || power;\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"potHorno1F2: \" + ultimoNivelPot });\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "e41c090ca080afca",
                "ebaa0ff2a8edee7d"
            ]
        ]
    },
    {
        "id": "e41c090ca080afca",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 260,
        "wires": [
            [
                "feb9d87b8ad347e6",
                "ac8798941ed808ce"
            ],
            [
                "fd69f6e938cb22c3",
                "feb9d87b8ad347e6"
            ]
        ]
    },
    {
        "id": "fe3752e8d052b1b7",
        "type": "catch",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "scope": [
            "e4d38ad30ab2c30a"
        ],
        "uncaught": false,
        "x": 510,
        "y": 740,
        "wires": [
            [
                "b20043337dae2b65",
                "774c8d2642c33686"
            ]
        ]
    },
    {
        "id": "7b4b64b37f7795d8",
        "type": "catch",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "scope": [
            "a4890476b701e6e1"
        ],
        "uncaught": false,
        "x": 450,
        "y": 320,
        "wires": [
            [
                "33ee166154a6907e"
            ]
        ]
    },
    {
        "id": "afdb8cd53fd9bbe5",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f0e327c1dbe1a7b8",
        "type": "exec",
        "z": "eb65df9c7eb63c1b",
        "command": "ping -c 1 192.168.1.27",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 1200,
        "wires": [
            [],
            [],
            [
                "07a29bedad90a06c"
            ]
        ]
    },
    {
        "id": "65747b6a15a5ef6c",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "f0e327c1dbe1a7b8"
            ]
        ]
    },
    {
        "id": "07a29bedad90a06c",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 1200,
        "wires": [
            [
                "d1e1ba3f8baf92f1"
            ],
            [
                "de7df7e9adc196b4"
            ],
            [
                "b64da302bdf7fb80"
            ]
        ],
        "outputLabels": [
            "Online",
            "Offline",
            ""
        ]
    },
    {
        "id": "b64da302bdf7fb80",
        "type": "change",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "afdb8cd53fd9bbe5",
                "d266739c77c548fc"
            ]
        ]
    },
    {
        "id": "d1e1ba3f8baf92f1",
        "type": "change",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1140,
        "wires": [
            [
                "18c5a482c173eac0",
                "d266739c77c548fc"
            ]
        ]
    },
    {
        "id": "18c5a482c173eac0",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1080,
        "wires": []
    },
    {
        "id": "de7df7e9adc196b4",
        "type": "change",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "2847775ddc20816e",
                "d266739c77c548fc"
            ]
        ]
    },
    {
        "id": "2847775ddc20816e",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1240,
        "wires": []
    },
    {
        "id": "cde3d95936b6c1c9",
        "type": "link in",
        "z": "eb65df9c7eb63c1b",
        "name": "Estado silo NorteSur",
        "links": [
            "d266739c77c548fc"
        ],
        "x": 445,
        "y": 1040,
        "wires": [
            [
                "1ee6f5a5e97d545f"
            ]
        ]
    },
    {
        "id": "d266739c77c548fc",
        "type": "link out",
        "z": "eb65df9c7eb63c1b",
        "name": "Estado silo NorteSur Out",
        "mode": "link",
        "links": [
            "cde3d95936b6c1c9"
        ],
        "x": 925,
        "y": 1200,
        "wires": []
    },
    {
        "id": "9228dfb0ed61729b",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1840,
        "wires": []
    },
    {
        "id": "739ecfd4f28b4131",
        "type": "exec",
        "z": "eb65df9c7eb63c1b",
        "command": "ping -c 1 192.168.1.28",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 1720,
        "wires": [
            [
                "d1da21e616d740db"
            ],
            [],
            [
                "22d5f54699aee7e9"
            ]
        ]
    },
    {
        "id": "28bb9d1fe1b802a7",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1640,
        "wires": [
            [
                "739ecfd4f28b4131"
            ]
        ]
    },
    {
        "id": "22d5f54699aee7e9",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 1720,
        "wires": [
            [
                "2f6a757bb9a396c4"
            ],
            [
                "41dbfc4ae7c57962"
            ],
            [
                "3a2791c15a962715"
            ]
        ],
        "outputLabels": [
            "Online",
            "Offline",
            ""
        ]
    },
    {
        "id": "3a2791c15a962715",
        "type": "change",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1780,
        "wires": [
            [
                "9228dfb0ed61729b",
                "60d80b2bfa20654c"
            ]
        ]
    },
    {
        "id": "2f6a757bb9a396c4",
        "type": "change",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1660,
        "wires": [
            [
                "7192db885a7b656c",
                "60d80b2bfa20654c"
            ]
        ]
    },
    {
        "id": "7192db885a7b656c",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1600,
        "wires": []
    },
    {
        "id": "41dbfc4ae7c57962",
        "type": "change",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1720,
        "wires": [
            [
                "ef0de3888c1df8df",
                "60d80b2bfa20654c"
            ]
        ]
    },
    {
        "id": "ef0de3888c1df8df",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 34",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1760,
        "wires": []
    },
    {
        "id": "60d80b2bfa20654c",
        "type": "link out",
        "z": "eb65df9c7eb63c1b",
        "name": "Estado silo cohete out",
        "mode": "link",
        "links": [
            "1e3069f0fa2e5d34"
        ],
        "x": 925,
        "y": 1720,
        "wires": []
    },
    {
        "id": "1e3069f0fa2e5d34",
        "type": "link in",
        "z": "eb65df9c7eb63c1b",
        "name": "Estado Silo Cohete",
        "links": [
            "60d80b2bfa20654c"
        ],
        "x": 455,
        "y": 1540,
        "wires": [
            [
                "bc45c9944b17bdf9"
            ]
        ]
    },
    {
        "id": "d1da21e616d740db",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1860,
        "wires": []
    },
    {
        "id": "a2f42c3043643d92",
        "type": "udp in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "iface": "",
        "port": "5168",
        "ipv": "udp4",
        "multicast": "false",
        "group": "192.168.0.215",
        "datatype": "buffer",
        "x": 180,
        "y": 2020,
        "wires": [
            [
                "55d78fbaa40a890a",
                "33ddd1a757dd3d06"
            ]
        ]
    },
    {
        "id": "55d78fbaa40a890a",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 19",
        "func": "msg.topic = \"InfluxData7\";\n\n// Crear un mensaje con el último dato y enviarlo\nvar D0 = msg.payload[22];\nvar D1 = msg.payload[23];\nvar D2 = msg.payload[24];\nvar D3 = msg.payload[25];\n\nvar Dato1 = /*'0x'+*/ (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2);\nvar Dato2 = /*'0x'+*/ (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n\nvar DECtemp1 = (parseInt(Dato1, 16));\nvar DECtemp2 = (parseInt(Dato2, 16));\n\nvar Temp1 = (0.0209048406 * DECtemp1 + 0.0058329264);\nvar Temp2 = (0.0209048406 * DECtemp2 + 0.0058329264);\n\nif (Number(Temp1.toFixed(2)) > 70) {\n    let disconnect1 = 50;\n    global.set(\"hornoTT1F2\", disconnect1);  // Guarda la primera vez que se activa\n}else {\n    let disconnect1 = 0;\n    global.set(\"hornoTT1F2\", disconnect1);  // Guarda la primera vez que se activa\n}\n\nif (Number(Temp2.toFixed(2)) > 70) {\n    let disconnect2 = 50;\n    global.set(\"hornoTT2F2\", disconnect2);  // Guarda la primera vez que se activa\n} else {\n    let disconnect2 = 0;\n    global.set(\"hornoTT2F2\", disconnect2);  // Guarda la primera vez que se activa\n}\n\nmsg.payload = {\n    \"TT_horno1_F2\": Number(Temp1.toFixed(2)),\n    \"TT_horno2_F2\": Number(Temp2.toFixed(2)),\n    //\"Ch4\": CH4,\n    //\"Ch5\": CH5,\n    //\"Ch6\": CH6,\n    //\"Ch7\": CH7\n};\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2020,
        "wires": [
            [
                "d719d840ac073013"
            ]
        ]
    },
    {
        "id": "d719d840ac073013",
        "type": "trigger",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 2020,
        "wires": [
            [
                "b6139da684d7bb16",
                "3448ca375aa7aec7"
            ]
        ]
    },
    {
        "id": "b6139da684d7bb16",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1980,
        "wires": []
    },
    {
        "id": "fd69f6e938cb22c3",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 360,
        "wires": []
    },
    {
        "id": "0dc83ddac1230bd2",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "TRATAMIENTOS TERMICOS FUNDICION 2",
        "info": "",
        "x": 410,
        "y": 1960,
        "wires": []
    },
    {
        "id": "b20043337dae2b65",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 760,
        "wires": []
    },
    {
        "id": "774c8d2642c33686",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Data selection and formatting",
        "func": "msg.topic = \"InfluxData2\"\n\nif ((msg.payload[7] === 0x1e) && (msg.payload[6] === 0x44) && (msg.payload[5] === 0x60) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x0) && (msg.payload[2] === 0x1) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x1)) {\n\n    var voltage = 0;\n    var voltageB = 0;\n    var voltageC = 0;\n    var current = 0;\n    var currentB = 0;\n    var currentC = 0;\n    var power = 0;\n    var energy = 0;\n\n    global.set(\"potHorno2F2\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy,\n        \"error\": msg.error\n    }\n    return msg;\n} else {\n\n    //----Seleccion de datos-----\n    //Voltage phase A\n    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n    //AVGvoltage\n    var D4 = msg.payload[17];\n    var D5 = msg.payload[18];\n    var D6 = msg.payload[15];\n    var D7 = msg.payload[16];\n    //Current phase A\n    var D8 = msg.payload[69]\n    var D9 = msg.payload[70]\n    var D10 = msg.payload[67]\n    var D11 = msg.payload[68]\n    //Potencia\n    var D12 = msg.payload[141]\n    var D13 = msg.payload[142]\n    var D14 = msg.payload[139]\n    var D15 = msg.payload[140]\n    //Energia\n    var D16 = msg.payload[189]\n    var D17 = msg.payload[190]\n    var D18 = msg.payload[187]\n    var D19 = msg.payload[188]\n    //Voltage phase B\n    var D20 = msg.payload[25];\n    var D21 = msg.payload[26];\n    var D22 = msg.payload[23];\n    var D23 = msg.payload[24];\n    //Voltage phase C\n    var D24 = msg.payload[29];\n    var D25 = msg.payload[30];\n    var D26 = msg.payload[27];\n    var D27 = msg.payload[28];\n    //Current phase B\n    var D28 = msg.payload[73]\n    var D29 = msg.payload[74]\n    var D30 = msg.payload[71]\n    var D31 = msg.payload[72]\n    //Current phase C\n    var D32 = msg.payload[77]\n    var D33 = msg.payload[78]\n    var D34 = msg.payload[75]\n    var D35 = msg.payload[76]\n    //Error\n    var D100 = msg.payload[7]\n\n    //------ Concatenacion para dejar un HEX por solicitud------------\n    var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n    var VoltB = '0x' + (\"00\" + D20.toString(16)).slice(-2) + (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2);\n    var VoltC = '0x' + (\"00\" + D24.toString(16)).slice(-2) + (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2);\n    var AVGv = '0x' + (\"00\" + D4.toString(16)).slice(-2) + (\"00\" + D5.toString(16)).slice(-2) + (\"00\" + D6.toString(16)).slice(-2) + (\"00\" + D7.toString(16)).slice(-2);\n    var CurrA = '0x' + (\"00\" + D8.toString(16)).slice(-2) + (\"00\" + D9.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2);\n    var CurrB = '0x' + (\"00\" + D28.toString(16)).slice(-2) + (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2);\n    var CurrC = '0x' + (\"00\" + D32.toString(16)).slice(-2) + (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2);\n    var Pow = '0x' + (\"00\" + D12.toString(16)).slice(-2) + (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2);\n    var En = '0x' + (\"00\" + D16.toString(16)).slice(-2) + (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2);\n\n    var Errorr = '0x' + (\"00\" + D100.toString(16)).slice(-2);\n\n    //------- Funcion para transformar HEX a float ----------\n    function parseFloat(str) {\n        var float = 0, sign, order, mantissa, exp, int = 0, multi = 1;\n        if (/^0x/.exec(str)) {\n            int = parseInt(str, 16);\n        } else {\n            for (var i = str.length - 1; i >= 0; i -= 1) {\n                if (str.charCodeAt(i) > 255) {\n                    return false;\n                }\n                int += str.charCodeAt(i) * multi;\n                multi *= 256;\n            }\n        }\n        sign = (int >>> 31) ? -1 : 1;\n        exp = (int >>> 23 & 0xff) - 127;\n        mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n        for (i = 0; i < mantissa.length; i += 1) {\n            float += parseInt(mantissa[i]) ? Math.pow(2, exp) : 0;\n            exp--;\n        }\n        return float * sign;\n    }\n    var voltage = Number(parseFloat(VoltA).toFixed(2));\n    var voltageB = Number(parseFloat(VoltB).toFixed(2));\n    var voltageC = Number(parseFloat(VoltC).toFixed(2));\n    var current = Number(parseFloat(CurrA).toFixed(2));\n    var currentB = Number(parseFloat(CurrB).toFixed(2));\n    var currentC = Number(parseFloat(CurrC).toFixed(2));\n    var power = Number(parseFloat(Pow).toFixed(2));\n    var energy = Number(parseFloat(En).toFixed(0) / 1000);\n\n\n    global.set(\"potHorno2F2\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 660,
        "wires": [
            [
                "33523861c21369d2",
                "3e19ffd967df8921"
            ]
        ]
    },
    {
        "id": "33523861c21369d2",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 620,
        "wires": []
    },
    {
        "id": "0223d2cc3f18a083",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 20",
        "func": "msg.topic = \"InfluxData5\"\n\nif (msg.payload === 1 || msg.payload === 2) {\n    msg.payload = {\n        \"Tin_arena\": 0,\n        \"Tout_arena\": 0,\n        \"Tin_agua\": 0,\n        \"Tout_agua\": 0,\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    var CH2 = msg.payload.data[2]\n    var CH3 = msg.payload.data[3]\n    var CH4 = msg.payload.data[4]\n    var CH5 = msg.payload.data[5]\n    var CH6 = msg.payload.data[6]\n    var CH7 = msg.payload.data[7]\n\n    //silo cohete\n    var CH00 = (0.0061 * CH0 + 0.0031);\n    var CH01 = (0.0061 * CH1 + 0.0031);\n    var CH02 = (0.0061 * CH2 + 0.0031);\n    var CH03 = (0.0061 * CH3 + 0.0031);\n\n    CH00 = Number(CH00.toFixed(1));\n    CH01 = Number(CH01.toFixed(1));\n    CH02 = Number(CH02.toFixed(1));\n    CH03 = Number(CH03.toFixed(1));\n\n    msg.payload = {\n        \"Tin_arena\": CH00,\n        \"Tout_arena\": CH01,\n        \"Tout_agua\": CH02,\n        \"Tin_agua\": CH03,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2740,
        "wires": [
            [
                "73e4b0f79b9d7587"
            ]
        ]
    },
    {
        "id": "3e19ffd967df8921",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Horno2_F2",
        "measurement": "F2-Horno2-[DPM-C530]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "236edf7af0f77ccf",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_SiloNyS_F2",
        "measurement": "F2-silo-NyS-[ADAM6017]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 780,
        "y": 980,
        "wires": []
    },
    {
        "id": "e812e11de2447a68",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_SiloCohete_F2",
        "measurement": "F2-silo-cohete-[ADAM6017]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 790,
        "y": 1480,
        "wires": []
    },
    {
        "id": "feb9d87b8ad347e6",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Horno1_F2",
        "measurement": "F2-Horno1-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 980,
        "y": 260,
        "wires": []
    },
    {
        "id": "3448ca375aa7aec7",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_TratamientosTermicosF2",
        "measurement": "F2-TT-[ADAM-6018]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 760,
        "y": 2040,
        "wires": []
    },
    {
        "id": "73e4b0f79b9d7587",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Temperatura _lecho_F2",
        "measurement": "F2-Temp-Lecho",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "Temperaturas",
        "x": 560,
        "y": 2740,
        "wires": []
    },
    {
        "id": "2b2a7f9c1e7e59be",
        "type": "modbus-read",
        "z": "eb65df9c7eb63c1b",
        "name": "Leer silo norte y sur",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "fd812ec1a0185442",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 350,
        "y": 980,
        "wires": [
            [],
            [
                "1ee6f5a5e97d545f"
            ]
        ]
    },
    {
        "id": "1a7e9f6e6008621e",
        "type": "modbus-read",
        "z": "eb65df9c7eb63c1b",
        "name": "Leer silo cohete",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "62685803db2817d6",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 340,
        "y": 1480,
        "wires": [
            [],
            [
                "bc45c9944b17bdf9"
            ]
        ]
    },
    {
        "id": "6997e55e49184216",
        "type": "modbus-read",
        "z": "eb65df9c7eb63c1b",
        "name": "Leer silo cohete",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "62685803db2817d6",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 340,
        "y": 1480,
        "wires": [
            [],
            [
                "40b58395ea1605df"
            ]
        ]
    },
    {
        "id": "63b252378166f2f1",
        "type": "modbus-read",
        "z": "eb65df9c7eb63c1b",
        "name": "Leer silo cohete",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "62685803db2817d6",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 120,
        "y": 2740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c21443683beb99d3",
        "type": "modbus-read",
        "z": "eb65df9c7eb63c1b",
        "name": "Temperatura Lecho F2",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "0bd0941b0d027eab",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 2740,
        "wires": [
            [],
            [
                "0223d2cc3f18a083"
            ]
        ]
    },
    {
        "id": "d71f165483bc090f",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1290,
        "y": 60,
        "wires": [
            [
                "27e2b91cb5dfe358"
            ]
        ]
    },
    {
        "id": "27e2b91cb5dfe358",
        "type": "link out",
        "z": "eb65df9c7eb63c1b",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "235198d27b198ba5"
        ],
        "x": 1415,
        "y": 60,
        "wires": []
    },
    {
        "id": "235198d27b198ba5",
        "type": "link in",
        "z": "eb65df9c7eb63c1b",
        "name": "connection-status-link",
        "links": [
            "27e2b91cb5dfe358",
            "f24236a2c8245076"
        ],
        "x": 1285,
        "y": 400,
        "wires": [
            [
                "c8a92ce6aea9838e"
            ]
        ]
    },
    {
        "id": "aa764271f8c9e5b6",
        "type": "join",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1750,
        "y": 60,
        "wires": [
            [
                "435dc88e6eb5e515"
            ]
        ]
    },
    {
        "id": "60fa6e60842f0f20",
        "type": "link in",
        "z": "eb65df9c7eb63c1b",
        "name": "link in 1",
        "links": [
            "27b3821873b68636"
        ],
        "x": 1665,
        "y": 60,
        "wires": [
            [
                "aa764271f8c9e5b6"
            ]
        ]
    },
    {
        "id": "27b3821873b68636",
        "type": "link out",
        "z": "eb65df9c7eb63c1b",
        "name": "conection-status-output-link",
        "mode": "link",
        "links": [
            "60fa6e60842f0f20",
            "68274bb454716431"
        ],
        "x": 1915,
        "y": 400,
        "wires": []
    },
    {
        "id": "435dc88e6eb5e515",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Array",
        "func": "var data = msg.payload;\n\nvar transformedData = {\n    horno2: data.horno2F2.horno2,\n    horno1: data.horno1F2.horno1,\n    silo_cohete: data.SiloCohete.silo_cohete,\n    silo_norte: data.SiloNyS.silo_norte,\n    silo_sur: data.SiloNyS.silo_sur,\n    hornoTT1F2: data.hornoTT1F2.hornoTT1F2,\n    hornoTT2F2: data.hornoTT2F2.hornoTT2F2,\n    horno2F1: data.horno2F1.horno2F1,\n    horno4F1: data.horno4F1.horno4F1,\n    horno1F1: data.horno1F1.horno1F1,\n    horno3F1: data.horno3F1.horno3F1,\n}\n\nmsg.payload = transformedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 60,
        "wires": [
            [
                "a1930cd4c5fc5d06",
                "cba97e098201a91d"
            ]
        ]
    },
    {
        "id": "a1930cd4c5fc5d06",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 60,
        "wires": []
    },
    {
        "id": "cba97e098201a91d",
        "type": "websocket out",
        "z": "eb65df9c7eb63c1b",
        "name": "CStatus-WebSocket",
        "server": "4dd79f1fdbfd6807",
        "client": "",
        "x": 2080,
        "y": 120,
        "wires": []
    },
    {
        "id": "668727115b582609",
        "type": "websocket in",
        "z": "eb65df9c7eb63c1b",
        "name": "reload-WebSocket",
        "server": "4dd79f1fdbfd6807",
        "client": "",
        "x": 1290,
        "y": 180,
        "wires": [
            [
                "865b38f43ff7b67f"
            ]
        ]
    },
    {
        "id": "865b38f43ff7b67f",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "scrpit",
        "func": "if (msg.payload === \"true\") {\n    var msg1 = {payload: 1 };\n}\nnode.send([msg1]);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 120,
        "wires": [
            [
                "27e2b91cb5dfe358"
            ]
        ]
    },
    {
        "id": "ebaa0ff2a8edee7d",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 420,
        "wires": []
    },
    {
        "id": "625e1b53801aaf53",
        "type": "modbus-read",
        "z": "eb65df9c7eb63c1b",
        "name": "Presion_shakout",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7a46a0045114eb9d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 160,
        "y": 2360,
        "wires": [
            [],
            [
                "0e685fbb3aea4690",
                "aa57568353e90b68"
            ]
        ]
    },
    {
        "id": "926773a7fbbda097",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 2620,
        "wires": []
    },
    {
        "id": "0e685fbb3aea4690",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Data formatting",
        "func": "msg.topic = \"InfluxData5\"\n\nif (msg.payload === 1 || msg.payload === 2) {\n    msg.payload = {\n        \"Presion_bombona\": Number(0),\n        \"Presion_entrada\": Number(0),\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    // var CH2 = msg.payload.data[2]\n    // var CH3 = msg.payload.data[3]\n    // var CH4 = msg.payload.data[4]\n    // var CH5 = msg.payload.data[5]\n    // var CH6 = msg.payload.data[6]\n    // var CH7 = msg.payload.data[7]\n\n   \n    var CH00 = (15.2590218967 * CH0)/100000;\n    var CH01 = (15.2590218967 * CH1)/100000;\n\n    CH00 = Number(CH00.toFixed(2));\n    if (CH00 < 0) {\n        CH00 = 0.1;\n    }\n    CH01 = Number(CH01.toFixed(2));\n    if (CH01 < 0) {\n        CH01 = 0.1;\n    }\n\n    msg.payload = {\n        \"Presion_bombona\": CH00,\n        \"Presion_entrada\": CH01,\n        //\"Ch7\": CH7,\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2320,
        "wires": [
            [
                "8bffd818480e1f19"
            ]
        ]
    },
    {
        "id": "8bffd818480e1f19",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Presion_shakeout_F2",
        "measurement": "F2-Bombona-Shakeout",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "Temperaturas",
        "x": 550,
        "y": 2300,
        "wires": []
    },
    {
        "id": "2e7d42201ceb8b72",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Modbus Request",
        "func": "\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x01,0x03,0x01,0x00,0x00,0x60,0x44,0x1E])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2120,
        "wires": [
            [
                "18c95e4ffc05cad9"
            ]
        ]
    },
    {
        "id": "7e1e5c1d05165076",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2120,
        "wires": [
            [
                "2e7d42201ceb8b72"
            ]
        ]
    },
    {
        "id": "18c95e4ffc05cad9",
        "type": "tcp request",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "server": "192.168.1.204",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "1500",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 570,
        "y": 2120,
        "wires": [
            [
                "bd076a5dee8cee41"
            ]
        ]
    },
    {
        "id": "bd076a5dee8cee41",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Data selection and formatting",
        "func": "msg.topic = \"InfluxData2\"\n\nif ((msg.payload[7] === 0x1e) && (msg.payload[6] === 0x44) && (msg.payload[5] === 0x60) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x0) && (msg.payload[2] === 0x1) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x1)) {\n\n    msg.payload = {\n        \"Voltage\": Number(0),\n        \"VoltageB\": Number(0),\n        \"VoltageC\": Number(0),\n        \"Current\": Number(0),\n        \"CurrentB\": Number(0),\n        \"CurrentC\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0),\n        \"error\": msg.error\n    }\n    return msg;\n} else {\n\n    //----Seleccion de datos-----\n    //Voltage phase A\n    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n    //AVGvoltage\n    var D4 = msg.payload[17];\n    var D5 = msg.payload[18];\n    var D6 = msg.payload[15];\n    var D7 = msg.payload[16];\n    //Current phase A\n    var D8 = msg.payload[69]\n    var D9 = msg.payload[70]\n    var D10 = msg.payload[67]\n    var D11 = msg.payload[68]\n    //Potencia\n    var D12 = msg.payload[141]\n    var D13 = msg.payload[142]\n    var D14 = msg.payload[139]\n    var D15 = msg.payload[140]\n    //Energia\n    var D16 = msg.payload[189]\n    var D17 = msg.payload[190]\n    var D18 = msg.payload[187]\n    var D19 = msg.payload[188]\n    //Voltage phase B\n    var D20 = msg.payload[25];\n    var D21 = msg.payload[26];\n    var D22 = msg.payload[23];\n    var D23 = msg.payload[24];\n    //Voltage phase C\n    var D24 = msg.payload[29];\n    var D25 = msg.payload[30];\n    var D26 = msg.payload[27];\n    var D27 = msg.payload[28];\n    //Current phase B\n    var D28 = msg.payload[73]\n    var D29 = msg.payload[74]\n    var D30 = msg.payload[71]\n    var D31 = msg.payload[72]\n    //Current phase C\n    var D32 = msg.payload[77]\n    var D33 = msg.payload[78]\n    var D34 = msg.payload[75]\n    var D35 = msg.payload[76]\n    //Error\n    var D100 = msg.payload[7]\n\n    //------ Concatenacion para dejar un HEX por solicitud------------\n    var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n    var VoltB = '0x' + (\"00\" + D20.toString(16)).slice(-2) + (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2);\n    var VoltC = '0x' + (\"00\" + D24.toString(16)).slice(-2) + (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2);\n    var AVGv = '0x' + (\"00\" + D4.toString(16)).slice(-2) + (\"00\" + D5.toString(16)).slice(-2) + (\"00\" + D6.toString(16)).slice(-2) + (\"00\" + D7.toString(16)).slice(-2);\n    var CurrA = '0x' + (\"00\" + D8.toString(16)).slice(-2) + (\"00\" + D9.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2);\n    var CurrB = '0x' + (\"00\" + D28.toString(16)).slice(-2) + (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2);\n    var CurrC = '0x' + (\"00\" + D32.toString(16)).slice(-2) + (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2);\n    var Pow = '0x' + (\"00\" + D12.toString(16)).slice(-2) + (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2);\n    var En = '0x' + (\"00\" + D16.toString(16)).slice(-2) + (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2);\n\n    var Errorr = '0x' + (\"00\" + D100.toString(16)).slice(-2);\n\n    //------- Funcion para transformar HEX a float ----------\n    function parseFloat(str) {\n        var float = 0, sign, order, mantissa, exp, int = 0, multi = 1;\n        if (/^0x/.exec(str)) {\n            int = parseInt(str, 16);\n        } else {\n            for (var i = str.length - 1; i >= 0; i -= 1) {\n                if (str.charCodeAt(i) > 255) {\n                    return false;\n                }\n                int += str.charCodeAt(i) * multi;\n                multi *= 256;\n            }\n        }\n        sign = (int >>> 31) ? -1 : 1;\n        exp = (int >>> 23 & 0xff) - 127;\n        mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n        for (i = 0; i < mantissa.length; i += 1) {\n            float += parseInt(mantissa[i]) ? Math.pow(2, exp) : 0;\n            exp--;\n        }\n        return float * sign;\n    }\n    msg.payload = {\n        \"Voltage\": Number(parseFloat(VoltA).toFixed(2)),\n        \"VoltageB\": Number(parseFloat(VoltB).toFixed(2)),\n        \"VoltageC\": Number(parseFloat(VoltC).toFixed(2)),\n        \"Current\": Number(parseFloat(CurrA).toFixed(2)),\n        \"CurrentB\": Number(parseFloat(CurrB).toFixed(2)),\n        \"CurrentC\": Number(parseFloat(CurrC).toFixed(2)),\n        \"Power\": Number(parseFloat(Pow).toFixed(2)),\n        \"Energy\": Number(parseFloat(En).toFixed(0)/1000)\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "aa57568353e90b68",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Counter_bombona_function",
        "func": "var previousCounter = global.get('previousCounter') || 0;\nvar count = global.get('count') || 0;\n\nif (msg.payload === 1 || msg.payload === 2) {\n    msg.payload = {\n        \"Presion_bombona\": Number(0),\n        \"Presion_entrada\": Number(0),\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    // var CH2 = msg.payload.data[2]\n    // var CH3 = msg.payload.data[3]\n    // var CH4 = msg.payload.data[4]\n    // var CH5 = msg.payload.data[5]\n    // var CH6 = msg.payload.data[6]\n    // var CH7 = msg.payload.data[7]\n\n   \n    var CH00 = (15.2590218967 * CH0)/100000;\n    var CH01 = (15.2590218967 * CH1)/100000;\n    var counter;\n      \n\n    CH00 = Number(CH00.toFixed(2));\n    if (CH00 < 0) {\n        CH00 = 0.1;\n    }\n    else if(CH00 >= 0.3) {\n        counter = 1;\n \n    }\n    else if (CH00 <= 0.2 && CH00 >= 0) {\n        counter = 0\n    }\n\n    CH01 = Number(CH01.toFixed(2));\n    if (CH01 < 0) {\n        CH01 = 0.1;\n    }\n\n    if (previousCounter === 1 && counter === 0) {\n        count += 1;\n    }\n\n    global.set('previousCounter', counter);\n    global.set('count', count);\n    \n    msg.payload = {\n        \"Presion_bombona\": CH00,\n        \"Presion_entrada\": CH01,\n        \"counter\": count,\n        \"counterup\": counter,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2420,
        "wires": [
            [
                "80f892e143c41e21",
                "4a3a36819d57bb33"
            ]
        ]
    },
    {
        "id": "7f5431aac8d6bb55",
        "type": "comment",
        "z": "eb65df9c7eb63c1b",
        "name": "LECHO FLUIDIZADO Y SHAKEOUT FUNDICION 2",
        "info": "",
        "x": 430,
        "y": 2240,
        "wires": []
    },
    {
        "id": "80f892e143c41e21",
        "type": "influxdb out",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Counter_bombona_F2",
        "measurement": "F2-Bombona-Shakeout",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "counter-data",
        "x": 660,
        "y": 2420,
        "wires": []
    },
    {
        "id": "2df0686479665eaa",
        "type": "websocket out",
        "z": "eb65df9c7eb63c1b",
        "name": "CStatus-WebSocket",
        "server": "e6786a342ce86a73",
        "client": "",
        "x": 580,
        "y": 2560,
        "wires": []
    },
    {
        "id": "e5996a6b84cfbb28",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "",
        "query": "from(bucket: \"counter-data\")\n|> range(start: -24h)\n|> filter(fn: (r) => r[\"_measurement\"] == \"F2-Bombona-Shakeout\")\n|> filter(fn: (r) => r[\"_field\"] == \"counter\")\n|> max()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 350,
        "y": 2560,
        "wires": [
            [
                "2df0686479665eaa",
                "d8e622f20b01f1c3"
            ]
        ]
    },
    {
        "id": "e909f7f38dffec03",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 2560,
        "wires": [
            [
                "e5996a6b84cfbb28"
            ]
        ]
    },
    {
        "id": "4a3a36819d57bb33",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 56",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 2460,
        "wires": []
    },
    {
        "id": "d8e622f20b01f1c3",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Reset counter bombona",
        "func": "var lastCounter = msg.payload[0]._value || 0;\n\nif (global.get('count') <= 0){\nglobal.set('count', lastCounter);\nglobal.set('previousCounter', 0); // Reinicia el previousCounter o ajústalo según sea necesario\n\nmsg.payload = {\n    \"lastcounter\": lastCounter,\n    \"count\": global.get('count') || 0\n}\nreturn msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2620,
        "wires": [
            [
                "926773a7fbbda097"
            ]
        ]
    },
    {
        "id": "9407eb9c825a0b39",
        "type": "catch",
        "z": "eb65df9c7eb63c1b",
        "name": "Errors_reset_counter_bombona",
        "scope": [
            "d8e622f20b01f1c3"
        ],
        "uncaught": false,
        "x": 570,
        "y": 2660,
        "wires": [
            [
                "926773a7fbbda097"
            ]
        ]
    },
    {
        "id": "119c34a21a29395e",
        "type": "catch",
        "z": "eb65df9c7eb63c1b",
        "name": "Errors_DB_Presion_shakeout_F2",
        "scope": [
            "8bffd818480e1f19"
        ],
        "uncaught": false,
        "x": 570,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "4e464ef0ce26e8cc",
        "type": "catch",
        "z": "eb65df9c7eb63c1b",
        "name": "Errors_DB_Temperatura_lecho_F2",
        "scope": null,
        "uncaught": false,
        "x": 580,
        "y": 2780,
        "wires": [
            []
        ]
    },
    {
        "id": "c8a92ce6aea9838e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 21",
        "func": "// Obtiene la última marca de tiempo en que se recibió una respuesta o se inició el temporizador\n\nlet potHorno1F2 = global.get(\"potHorno1F2\") || 0;\nlet potHorno2F2 = global.get(\"potHorno2F2\") || 0;\nlet potHorno1F1 = global.get(\"potHorno1F1\") || 0;\nlet potHorno2F1 = global.get(\"potHorno2F1\") || 0;\nlet potHorno3F1 = global.get(\"potHorno3F1\") || 0;\nlet potHorno4F1 = global.get(\"potHorno4F1\") || 0;\nlet siloN_S = global.get(\"siloN_S\") || 0;\nlet silo_cohete1 = global.get(\"silo_cohete1\") || 0;\nlet hornoTT1F2 = global.get(\"hornoTT1F2\") || 0;\nlet hornoTT2F2 = global.get(\"hornoTT2F2\") || 0;\n\n// node.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + hornoTT1F2 });\n //node.warn(\"Valor de potHorno2F2: \" + potHorno2F2);  // Depuración\n\n//Estado horno 1 FUNDICION 2\nif (potHorno1F2 > 20) {\n    var msg1 = { payload: { 'response': true } };\n} else {\n    var msg1 = { payload: { 'response': false } };\n}\n\n//Estado horno 2 FUNDICION 2\nif (potHorno2F2 > 20) {\n    var msg2 = { payload: { 'response': true } };\n} else {\n    var msg2 = { payload: { 'response': false } };\n}\n\n//Estado horno 1 FUNDICION 1\nif (potHorno1F1 > 20) {\n    var msg3 = { payload: { 'response': true } };\n} else {\n    var msg3 = { payload: { 'response': false } };\n}\n\n//Estado horno 2 FUNDICION 1\nif (potHorno2F1 > 20) {\n    var msg4 = { payload: { 'response': true } };\n} else {\n    var msg4 = { payload: { 'response': false } };\n}\n\n//Estado horno 3 FUNDICION 1\nif (potHorno3F1 > 20) {\n    var msg5 = { payload: { 'response': true } };\n} else {\n    var msg5 = { payload: { 'response': false } };\n}\n//Estado horno 4 FUNDICION 1\nif (potHorno4F1 > 20) {\n    var msg6 = { payload: { 'response': true } };\n} else {\n    var msg6 = { payload: { 'response': false } };\n}\n\n//Estado Silo Norte y Sur FUNDICION 2\nif (siloN_S > 20) {\n    var msg7 = {payload: {'response': true}} ;\n} else {\n    var msg7 = {payload: {'response': false}};\n}\n\n//Estado silo cohete FUNDICION 2\nif (silo_cohete1 > 20) {\n    var msg8 = { payload: { 'response': true } };\n} else {\n    var msg8 = { payload: { 'response': false } };\n}\n\n//Estado horno TT 1 FUNDICION 2\nif (hornoTT1F2 > 20) {\n    var msg9 = { payload: { 'response': true } };\n} else {\n    var msg9 = { payload: { 'response': false } };\n}\n\n//Estado horno TT 2 FUNDICION 2\nif (hornoTT2F2 > 20) {\n    var msg10 = { payload: { 'response': true } };\n} else {\n    var msg10 = { payload: { 'response': false } };\n}\n\n\n\nreturn [msg1,msg2,msg3,msg4,msg5,msg6,msg7,msg8,msg9,msg10];",
        "outputs": 10,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "707a96f7ccaebfdd"
            ],
            [
                "a663bf672d0de6b4"
            ],
            [
                "3818de66f339173d"
            ],
            [
                "cace8abe6e19ce25"
            ],
            [
                "0ea1652626854abe"
            ],
            [
                "74c3f55afcb59c19"
            ],
            [
                "11c78f7e49f96634"
            ],
            [
                "1db778e9bee49b62"
            ],
            [
                "18ea35646d231968"
            ],
            [
                "76c8944c9cdbedec"
            ]
        ]
    },
    {
        "id": "11c78f7e49f96634",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-silosN&S",
        "func": "msg.topic = \"SiloNyS\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif ((msg.payload.response === false)) {\n    msg.payload = {\n        \"silo_sur\": false,\n        \"silo_norte\": false,\n    }\n} else {\n    msg.payload = {\n        \"silo_sur\": true,\n        \"silo_norte\": true,\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 440,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "1db778e9bee49b62",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-silosCohete",
        "func": "msg.topic = \"SiloCohete\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"silo_cohete\": false\n    }\n} else {\n    msg.payload = {\n        \"silo_cohete\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 500,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "707a96f7ccaebfdd",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoInd1F2",
        "func": "msg.topic = \"horno1F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno1\": false\n    }\n} else{\n    msg.payload = {\n        \"horno1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 140,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "a663bf672d0de6b4",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoInd2F2",
        "func": "msg.topic = \"horno2F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno2\": false\n    }\n} else {\n    msg.payload = {\n        \"horno2\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 200,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "3818de66f339173d",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoInd1F1",
        "func": "msg.topic = \"horno1F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno1F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno1F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "cace8abe6e19ce25",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoInd2F1",
        "func": "msg.topic = \"horno2F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno2F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno2F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 260,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "0ea1652626854abe",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoInd3F1",
        "func": "msg.topic = \"horno3F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno3F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno3F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 380,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "74c3f55afcb59c19",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoInd4F1",
        "func": "msg.topic = \"horno4F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno4F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno4F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 560,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "18ea35646d231968",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoTT1F2",
        "func": "msg.topic = \"hornoTT1F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"hornoTT1F2\": false\n    }\n} else  {\n    msg.payload = {\n        \"hornoTT1F2\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 620,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "76c8944c9cdbedec",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "data-format-HornoTT2F2",
        "func": "msg.topic = \"hornoTT2F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"hornoTT2F2\": false\n    }\n} else  {\n    msg.payload = {\n        \"hornoTT2F2\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 680,
        "wires": [
            [
                "27b3821873b68636"
            ]
        ]
    },
    {
        "id": "33ddd1a757dd3d06",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 54",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 2060,
        "wires": []
    },
    {
        "id": "829325a9d5bc2bed",
        "type": "udp in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "iface": "",
        "port": "18899",
        "ipv": "udp4",
        "multicast": "false",
        "group": "192.168.0.215",
        "datatype": "buffer",
        "x": 1300,
        "y": 1980,
        "wires": [
            [
                "728f7b891ecd4049"
            ]
        ]
    },
    {
        "id": "728f7b891ecd4049",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 2040,
        "wires": []
    },
    {
        "id": "1153deaf2408909e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 22",
        "func": "    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n\n var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n\n    msg.payload = {\n        \"D0\": D0,\n\"D1\": D1,\n\"D2\": D2,\n\"D3\": D3,\n\"voltaA\": VoltA\n    }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 820,
        "wires": [
            [
                "fd51384c620c05ad"
            ]
        ]
    },
    {
        "id": "fd51384c620c05ad",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 820,
        "wires": []
    },
    {
        "id": "7a6cbde90d36f061",
        "type": "websocket in",
        "z": "eb65df9c7eb63c1b",
        "name": "test-data-in",
        "server": "8273b77ad09eb963",
        "client": "",
        "x": 2100,
        "y": 460,
        "wires": [
            [
                "dd01bd60ea97eb98",
                "02202c0a55a62496"
            ]
        ]
    },
    {
        "id": "02202c0a55a62496",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 83",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2350,
        "y": 520,
        "wires": []
    },
    {
        "id": "dd01bd60ea97eb98",
        "type": "json",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2290,
        "y": 380,
        "wires": [
            [
                "6f557c3b33b6364e"
            ]
        ]
    },
    {
        "id": "6f557c3b33b6364e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "query",
        "func": "//Recopilar data entrante\nconst bucket = \"DATA\";\nconst measurement = \"F2-TT-[ADAM-6018]\";\nconst field1 = \"TT_horno1_F2\";\nconst field2 = \"TT_horno2_F2\";\nconst sampling = msg.payload[0];\nconst start = msg.payload[1];\nconst stop = msg.payload[2];\n\n//consulta flux:\nmsg.query = `\nfrom(bucket: \"${bucket}\")\n  |> range(start: ${start}, stop: ${stop})\n  |> filter(fn: (r) => r[\"_measurement\"] == \"${measurement}\")\n  |> filter(fn: (r) => r[\"_field\"] == \"${field1}\" or r[\"_field\"] == \"${field2}\")\n  |> aggregateWindow(every: ${sampling}, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 460,
        "wires": [
            [
                "82d0b1413253e5ca"
            ]
        ]
    },
    {
        "id": "82d0b1413253e5ca",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 2570,
        "y": 380,
        "wires": [
            [
                "5cf6c58f6730abfb",
                "3b0bd51607f96f7d"
            ]
        ]
    },
    {
        "id": "5cf6c58f6730abfb",
        "type": "websocket out",
        "z": "eb65df9c7eb63c1b",
        "name": "test-data-out",
        "server": "8273b77ad09eb963",
        "client": "",
        "x": 2830,
        "y": 440,
        "wires": []
    },
    {
        "id": "3b0bd51607f96f7d",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2770,
        "y": 600,
        "wires": []
    },
    {
        "id": "cdb2e0be6d89edf3",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "0cd0de0349e15191",
        "name": "",
        "query": "from(bucket: \"DATA\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-TT-[ADAM-6018]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"TT_horno1_F2\" or r[\"_field\"] == \"TT_horno2_F2\")\n  |> aggregateWindow(every: 2m, fn: last, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 2370,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "b108777c64745911",
        "type": "inject",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2080,
        "y": 640,
        "wires": [
            [
                "cdb2e0be6d89edf3"
            ]
        ]
    },
    {
        "id": "eec23b7906526a73",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "6a4beb38b621e49f",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "c5e70bd0f7731575"
            ]
        ]
    },
    {
        "id": "3f9b9933cb7042b5",
        "type": "inject",
        "z": "205825f9a799aa40",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "6a4beb38b621e49f",
                "ec9d9b70ddab46e3"
            ]
        ]
    },
    {
        "id": "8a8ebb03e1850e87",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 140,
        "wires": []
    },
    {
        "id": "c5e70bd0f7731575",
        "type": "tcp request",
        "z": "205825f9a799aa40",
        "name": "",
        "server": "192.168.1.29",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 620,
        "y": 180,
        "wires": [
            [
                "3a90eb7f589ce9be",
                "4e3c1ce4f51b930a",
                "8a8ebb03e1850e87"
            ]
        ]
    },
    {
        "id": "c24f3560966a740a",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "HORNO 2 FUNDICION 1",
        "info": "",
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "a330b26a1b125c87",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "c5e70bd0f7731575"
            ]
        ]
    },
    {
        "id": "ec9d9b70ddab46e3",
        "type": "delay",
        "z": "205825f9a799aa40",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "a330b26a1b125c87"
            ]
        ]
    },
    {
        "id": "3a90eb7f589ce9be",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    global.set(\"potHorno2F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "a56acffdf4dfac0f"
            ]
        ]
    },
    {
        "id": "4e3c1ce4f51b930a",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno2F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else if ((msg.payload[7] === 0x10) && (msg.payload[6] === 0x59) && (msg.payload[5] === 0x0a) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x52) && (msg.payload[2] === 0xc6) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno2F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n}\n\nelse {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 10000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "a56acffdf4dfac0f"
            ]
        ]
    },
    {
        "id": "a56acffdf4dfac0f",
        "type": "switch",
        "z": "205825f9a799aa40",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 300,
        "wires": [
            [
                "746c0684cae6c7d6"
            ],
            [
                "746c0684cae6c7d6"
            ]
        ]
    },
    {
        "id": "845a6b33eb140c11",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "c5e70bd0f7731575"
        ],
        "uncaught": false,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "4e3c1ce4f51b930a"
            ]
        ]
    },
    {
        "id": "746c0684cae6c7d6",
        "type": "influxdb out",
        "z": "205825f9a799aa40",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Horno2_F1",
        "measurement": "F1-Horno2-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 960,
        "y": 280,
        "wires": []
    },
    {
        "id": "6b5bb4e1f7cf0f96",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 240,
        "y": 620,
        "wires": []
    },
    {
        "id": "2c18e844bb5d4ef4",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "HORNO 4 FUNDICION 1",
        "info": "",
        "x": 510,
        "y": 620,
        "wires": []
    },
    {
        "id": "ba6e87ea73f0a40d",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "e6d3ef6247778d8f"
            ]
        ]
    },
    {
        "id": "033f83f4e3c57192",
        "type": "inject",
        "z": "205825f9a799aa40",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "ba6e87ea73f0a40d",
                "c80551f196b07588",
                "1da06a391f4323d5"
            ]
        ]
    },
    {
        "id": "e6d3ef6247778d8f",
        "type": "tcp request",
        "z": "205825f9a799aa40",
        "name": "",
        "server": "192.168.1.30",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 660,
        "y": 760,
        "wires": [
            [
                "15d1fd940a293be5",
                "9ee0fa53d69a78be",
                "2f3e3a0f5ec50c5d",
                "0b6779b68ac31970"
            ]
        ]
    },
    {
        "id": "265c8f7bb27bc7f5",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 800,
        "wires": [
            [
                "e6d3ef6247778d8f"
            ]
        ]
    },
    {
        "id": "c80551f196b07588",
        "type": "delay",
        "z": "205825f9a799aa40",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 880,
        "wires": [
            [
                "265c8f7bb27bc7f5"
            ]
        ]
    },
    {
        "id": "37e0f526d54cb034",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 62",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 820,
        "wires": []
    },
    {
        "id": "9ee0fa53d69a78be",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    global.set(\"potHorno4F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 860,
        "wires": [
            [
                "0c45bab2bbecbdf9"
            ]
        ]
    },
    {
        "id": "2f3e3a0f5ec50c5d",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno4F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else if ((msg.payload[7] === 0x10) && (msg.payload[6] === 0x59) && (msg.payload[5] === 0x0a) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x52) && (msg.payload[2] === 0xc6) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n    var power = Number(0);\n\n    global.set(\"potHorno4F1\", power);  // Guarda la primera vez que se activa\n\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n}\n else {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 10000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 900,
        "wires": [
            [
                "0c45bab2bbecbdf9",
                "9e1be1f255866f61"
            ]
        ]
    },
    {
        "id": "0c45bab2bbecbdf9",
        "type": "switch",
        "z": "205825f9a799aa40",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 880,
        "wires": [
            [
                "37e0f526d54cb034",
                "797c49d9faf35809"
            ],
            [
                "241a962eeb801b77",
                "797c49d9faf35809"
            ]
        ]
    },
    {
        "id": "1323cd1e1c0bef71",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "e6d3ef6247778d8f"
        ],
        "uncaught": false,
        "x": 490,
        "y": 940,
        "wires": [
            [
                "2f3e3a0f5ec50c5d",
                "ccda6400069bd06c"
            ]
        ]
    },
    {
        "id": "241a962eeb801b77",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 63",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 940,
        "wires": []
    },
    {
        "id": "797c49d9faf35809",
        "type": "influxdb out",
        "z": "205825f9a799aa40",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Horno4_F1",
        "measurement": "F1-Horno4-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 1060,
        "y": 880,
        "wires": []
    },
    {
        "id": "ccda6400069bd06c",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 64",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9e1be1f255866f61",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 65",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1040,
        "wires": []
    },
    {
        "id": "15d1fd940a293be5",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 680,
        "wires": []
    },
    {
        "id": "ee74199cb2211353",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 1280,
        "y": 100,
        "wires": []
    },
    {
        "id": "e97e5cf56992ccc1",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "HORNO 3 FUNDICION 1",
        "info": "",
        "x": 1550,
        "y": 100,
        "wires": []
    },
    {
        "id": "5fa3d6eb3ed8a2f5",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 220,
        "wires": [
            [
                "79a62ba130807a26"
            ]
        ]
    },
    {
        "id": "94927bf4a173350e",
        "type": "inject",
        "z": "205825f9a799aa40",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "5fa3d6eb3ed8a2f5",
                "6450e731cd9b340f",
                "371df03247491e53"
            ]
        ]
    },
    {
        "id": "79a62ba130807a26",
        "type": "tcp request",
        "z": "205825f9a799aa40",
        "name": "",
        "server": "192.168.1.34",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1700,
        "y": 240,
        "wires": [
            [
                "c61143bc1a594450",
                "c281ad5b3c6e838b",
                "030e8879a8a96e33",
                "5c4f150b60eb9cea"
            ]
        ]
    },
    {
        "id": "1acc72c1c016bf9e",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 280,
        "wires": [
            [
                "79a62ba130807a26"
            ]
        ]
    },
    {
        "id": "6450e731cd9b340f",
        "type": "delay",
        "z": "205825f9a799aa40",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 360,
        "wires": [
            [
                "1acc72c1c016bf9e"
            ]
        ]
    },
    {
        "id": "6582fdb613c0f7b0",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 67",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 300,
        "wires": []
    },
    {
        "id": "c281ad5b3c6e838b",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    global.set(\"potHorno3F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 340,
        "wires": [
            [
                "81a9df7f16c3a2a3"
            ]
        ]
    },
    {
        "id": "030e8879a8a96e33",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno3F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else if ((msg.payload[7] === 0x10) && (msg.payload[6] === 0x59) && (msg.payload[5] === 0x0a) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x52) && (msg.payload[2] === 0xc6) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n   \n    var power = Number(0);\n\n    global.set(\"potHorno3F1\", power);  // Guarda la primera vez que se activa\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n}\n else {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 10000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 380,
        "wires": [
            [
                "81a9df7f16c3a2a3",
                "5ba4a0abbeeb0c24"
            ]
        ]
    },
    {
        "id": "81a9df7f16c3a2a3",
        "type": "switch",
        "z": "205825f9a799aa40",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 360,
        "wires": [
            [
                "6582fdb613c0f7b0",
                "aa731bb20b464d43"
            ],
            [
                "b776bdc1bd75ee61",
                "aa731bb20b464d43"
            ]
        ]
    },
    {
        "id": "5a5df059f59364d0",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "79a62ba130807a26"
        ],
        "uncaught": false,
        "x": 1530,
        "y": 420,
        "wires": [
            [
                "030e8879a8a96e33",
                "c92cdab38eb1022a"
            ]
        ]
    },
    {
        "id": "b776bdc1bd75ee61",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 68",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 420,
        "wires": []
    },
    {
        "id": "aa731bb20b464d43",
        "type": "influxdb out",
        "z": "205825f9a799aa40",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Horno3_F1",
        "measurement": "F1-Horno3-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 2100,
        "y": 360,
        "wires": []
    },
    {
        "id": "c92cdab38eb1022a",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 480,
        "wires": []
    },
    {
        "id": "5ba4a0abbeeb0c24",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 520,
        "wires": []
    },
    {
        "id": "c61143bc1a594450",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 160,
        "wires": []
    },
    {
        "id": "004326bc3d3c1b3d",
        "type": "tcp request",
        "z": "205825f9a799aa40",
        "name": "",
        "server": "192.168.1.39",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "1500",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1780,
        "y": 840,
        "wires": [
            [
                "f101e7bded4ecc6f",
                "28779caba4c2afb5"
            ]
        ]
    },
    {
        "id": "f7b9133fe26e3c20",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Modbus Request",
        "func": "\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x01,0x03,0x01,0x00,0x00,0x60,0x44,0x1E])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 840,
        "wires": [
            [
                "004326bc3d3c1b3d"
            ]
        ]
    },
    {
        "id": "eaa7f6bd5f553b8d",
        "type": "inject",
        "z": "205825f9a799aa40",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1350,
        "y": 880,
        "wires": [
            [
                "f7b9133fe26e3c20",
                "174c5263acb64146"
            ]
        ]
    },
    {
        "id": "376925d5b89b026f",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "Medidor de potencia [DPM-C530]",
        "info": "",
        "x": 1410,
        "y": 660,
        "wires": []
    },
    {
        "id": "74a9a873666125b7",
        "type": "comment",
        "z": "205825f9a799aa40",
        "name": "HORNO 1 FUNDICION 1",
        "info": "",
        "x": 1670,
        "y": 660,
        "wires": []
    },
    {
        "id": "8f7c3bc6574252fd",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "004326bc3d3c1b3d"
        ],
        "uncaught": false,
        "x": 1830,
        "y": 720,
        "wires": [
            [
                "b8ebfb70b6014a59",
                "f101e7bded4ecc6f"
            ]
        ]
    },
    {
        "id": "b8ebfb70b6014a59",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 780,
        "wires": []
    },
    {
        "id": "f101e7bded4ecc6f",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Data selection and formatting",
        "func": "msg.topic = \"InfluxData2\"\n\nif ((msg.payload[7] === 0x1e) && (msg.payload[6] === 0x44) && (msg.payload[5] === 0x60) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x0) && (msg.payload[2] === 0x1) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x1)) {\n\n    var voltage = 0;\n    var voltageB = 0;\n    var voltageC = 0;\n    var current = 0;\n    var currentB = 0;\n    var currentC = 0;\n    var power = 0;\n    var energy = 0;\n\n    global.set(\"potHorno1F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy,\n        \"error\": msg.error\n    }\n    return msg;\n} else {\n\n    //----Seleccion de datos-----\n    //Voltage phase A\n    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n    //AVGvoltage\n    var D4 = msg.payload[17];\n    var D5 = msg.payload[18];\n    var D6 = msg.payload[15];\n    var D7 = msg.payload[16];\n    //Current phase A\n    var D8 = msg.payload[69]\n    var D9 = msg.payload[70]\n    var D10 = msg.payload[67]\n    var D11 = msg.payload[68]\n    //Potencia\n    var D12 = msg.payload[141]\n    var D13 = msg.payload[142]\n    var D14 = msg.payload[139]\n    var D15 = msg.payload[140]\n    //Energia\n    var D16 = msg.payload[189]\n    var D17 = msg.payload[190]\n    var D18 = msg.payload[187]\n    var D19 = msg.payload[188]\n    //Voltage phase B\n    var D20 = msg.payload[25];\n    var D21 = msg.payload[26];\n    var D22 = msg.payload[23];\n    var D23 = msg.payload[24];\n    //Voltage phase C\n    var D24 = msg.payload[29];\n    var D25 = msg.payload[30];\n    var D26 = msg.payload[27];\n    var D27 = msg.payload[28];\n    //Current phase B\n    var D28 = msg.payload[73]\n    var D29 = msg.payload[74]\n    var D30 = msg.payload[71]\n    var D31 = msg.payload[72]\n    //Current phase C\n    var D32 = msg.payload[77]\n    var D33 = msg.payload[78]\n    var D34 = msg.payload[75]\n    var D35 = msg.payload[76]\n    //Error\n    var D100 = msg.payload[7]\n\n    //------ Concatenacion para dejar un HEX por solicitud------------\n    var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n    var VoltB = '0x' + (\"00\" + D20.toString(16)).slice(-2) + (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2);\n    var VoltC = '0x' + (\"00\" + D24.toString(16)).slice(-2) + (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2);\n    var AVGv = '0x' + (\"00\" + D4.toString(16)).slice(-2) + (\"00\" + D5.toString(16)).slice(-2) + (\"00\" + D6.toString(16)).slice(-2) + (\"00\" + D7.toString(16)).slice(-2);\n    var CurrA = '0x' + (\"00\" + D8.toString(16)).slice(-2) + (\"00\" + D9.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2);\n    var CurrB = '0x' + (\"00\" + D28.toString(16)).slice(-2) + (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2);\n    var CurrC = '0x' + (\"00\" + D32.toString(16)).slice(-2) + (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2);\n    var Pow = '0x' + (\"00\" + D12.toString(16)).slice(-2) + (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2);\n    var En = '0x' + (\"00\" + D16.toString(16)).slice(-2) + (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2);\n\n    var Errorr = '0x' + (\"00\" + D100.toString(16)).slice(-2);\n\n    //------- Funcion para transformar HEX a float ----------\n    function parseFloat(str) {\n        var float = 0, sign, order, mantissa, exp, int = 0, multi = 1;\n        if (/^0x/.exec(str)) {\n            int = parseInt(str, 16);\n        } else {\n            for (var i = str.length - 1; i >= 0; i -= 1) {\n                if (str.charCodeAt(i) > 255) {\n                    return false;\n                }\n                int += str.charCodeAt(i) * multi;\n                multi *= 256;\n            }\n        }\n        sign = (int >>> 31) ? -1 : 1;\n        exp = (int >>> 23 & 0xff) - 127;\n        mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n        for (i = 0; i < mantissa.length; i += 1) {\n            float += parseInt(mantissa[i]) ? Math.pow(2, exp) : 0;\n            exp--;\n        }\n        return float * sign;\n    }\n    var voltage = Number(parseFloat(VoltA).toFixed(2));\n    var voltageB = Number(parseFloat(VoltB).toFixed(2));\n    var voltageC = Number(parseFloat(VoltC).toFixed(2));\n    var current = Number(parseFloat(CurrA).toFixed(2));\n    var currentB = Number(parseFloat(CurrB).toFixed(2));\n    var currentC = Number(parseFloat(CurrC).toFixed(2));\n    var power = Number(parseFloat(Pow).toFixed(2));\n    var energy = Number(parseFloat(En).toFixed(0) / 1000);\n\n\n    global.set(\"potHorno1F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 840,
        "wires": [
            [
                "17f2e6b50742e2d1",
                "cb377a8c31d2b0e1"
            ]
        ]
    },
    {
        "id": "17f2e6b50742e2d1",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 74",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 740,
        "wires": []
    },
    {
        "id": "cb377a8c31d2b0e1",
        "type": "influxdb out",
        "z": "205825f9a799aa40",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Horno1_F1",
        "measurement": "F1-Horno1-[DPM-C530]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "DATA",
        "x": 2340,
        "y": 880,
        "wires": []
    },
    {
        "id": "5956d8b03ca4aaae",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "c281ad5b3c6e838b"
        ],
        "uncaught": false,
        "x": 1690,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "2c81aac5ccb27e17",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "746c0684cae6c7d6"
        ],
        "uncaught": false,
        "x": 930,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "caeff3988f12232e",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "797c49d9faf35809"
        ],
        "uncaught": false,
        "x": 1030,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "7cf46147dec6ea96",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "aa731bb20b464d43"
        ],
        "uncaught": false,
        "x": 2070,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "38b976fcbeb9453f",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "cb377a8c31d2b0e1"
        ],
        "uncaught": false,
        "x": 2330,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "28779caba4c2afb5",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "reset de temporizador",
        "func": "// Obtiene el tiempo transcurrido desde la variable global\n// const elapsedTime = global.get(\"elapsedTime\") || 0;\n\n// if ( elapsedTime > 10 ) {\n\n//     var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n//     msg.payload = buf\n//     return msg;\n\n// } else {\n    \n    // Al recibir respuesta, actualiza el tiempo de última respuesta en el contexto global\n    \n    \n    \n    \n    const currentTime = new Date().getTime();\nglobal.set(\"lastResponseTimeHorno1F1\", currentTime);  // Reinicia el temporizador\n\n    msg.payload = `Se reseteo el temporizador`\n    return msg;\n\n    // return msg;\n// }\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 780,
        "wires": []
    },
    {
        "id": "174c5263acb64146",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Temporizador medidor apagado",
        "func": "// Obtiene el tiempo actual en milisegundos\nconst currentTime = new Date().getTime();\n\n// Obtiene la última marca de tiempo en que se recibió una respuesta o se inició el temporizador\nlet lastResponseTime = global.get(\"lastResponseTimeHorno1F1\") || currentTime;\nglobal.set(\"lastResponseTimeHorno1F1\", lastResponseTime);  // Guarda la primera vez que se activa\n\n// Calcula el tiempo transcurrido desde la última respuesta\nconst elapsedTime = currentTime - lastResponseTime;\n\n// Verifica si han pasado más de 10 segundos (10000 ms) sin respuesta\nif (elapsedTime > 10000) {\n    var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n    msg.payload = buf\n    return msg;\n} else {\n    return null;  // No hace nada si el tiempo no ha pasado los 10 segundos\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 980,
        "wires": [
            [
                "1ccc490c08819601",
                "f101e7bded4ecc6f"
            ]
        ]
    },
    {
        "id": "1ccc490c08819601",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 940,
        "wires": []
    },
    {
        "id": "371df03247491e53",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Temporizador medidor apagado",
        "func": "// Obtiene el tiempo actual en milisegundos\nconst currentTime = new Date().getTime();\n\n// Obtiene la última marca de tiempo en que se recibió una respuesta o se inició el temporizador\nlet lastResponseTime = global.get(\"lastResponseTimeHorno3F1\") || currentTime;\nglobal.set(\"lastResponseTimeHorno3F1\", lastResponseTime);  // Guarda la primera vez que se activa\n\n// Calcula el tiempo transcurrido desde la última respuesta\nconst elapsedTime = currentTime - lastResponseTime;\n\n// Verifica si han pasado más de 10 segundos (10000 ms) sin respuesta\nif (elapsedTime > 10000) {\n    var buf = Buffer.from([0x5, 0x3, 0xc5, 0x50, 0x0, 0x36, 0xf8, 0x85])\n    msg.payload = buf\n    return msg;\n}\nelse {\n    return null;  // No hace nada si el tiempo no ha pasado los 10 segundos\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 500,
        "wires": [
            [
                "8b75696e1273e704",
                "030e8879a8a96e33"
            ]
        ]
    },
    {
        "id": "8b75696e1273e704",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 560,
        "wires": []
    },
    {
        "id": "5c4f150b60eb9cea",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "reset de temporizador",
        "func": "// Obtiene el tiempo transcurrido desde la variable global\n// const elapsedTime = global.get(\"elapsedTime\") || 0;\n\n// if ( elapsedTime > 10 ) {\n\n//     var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n//     msg.payload = buf\n//     return msg;\n\n// } else {\n    \n    // Al recibir respuesta, actualiza el tiempo de última respuesta en el contexto global\n    \n    \n    \n    \n    const currentTime = new Date().getTime();\nglobal.set(\"lastResponseTimeHorno3F1\", currentTime);  // Reinicia el temporizador\n\n    msg.payload = `Se reseteo el temporizador`\n    return msg;\n\n    // return msg;\n// }\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 160,
        "wires": []
    },
    {
        "id": "1da06a391f4323d5",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "Temporizador medidor apagado",
        "func": "// Obtiene el tiempo actual en milisegundos\nconst currentTime = new Date().getTime();\n\n// Obtiene la última marca de tiempo en que se recibió una respuesta o se inició el temporizador\nlet lastResponseTime = global.get(\"lastResponseTimeHorno4F1\") || currentTime;\nglobal.set(\"lastResponseTimeHorno4F1\", lastResponseTime);  // Guarda la primera vez que se activa\n\n// Calcula el tiempo transcurrido desde la última respuesta\nconst elapsedTime = currentTime - lastResponseTime;\n\n// Verifica si han pasado más de 10 segundos (10000 ms) sin respuesta\nif (elapsedTime > 10000) {\n    var buf = Buffer.from([0x5, 0x3, 0xc5, 0x50, 0x0, 0x36, 0xf8, 0x85])\n    msg.payload = buf\n    return msg;\n}\nelse {\n    return null;  // No hace nada si el tiempo no ha pasado los 10 segundos\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1040,
        "wires": [
            [
                "bbde2d6ab821f96f",
                "2f3e3a0f5ec50c5d"
            ]
        ]
    },
    {
        "id": "bbde2d6ab821f96f",
        "type": "debug",
        "z": "205825f9a799aa40",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0b6779b68ac31970",
        "type": "function",
        "z": "205825f9a799aa40",
        "name": "reset de temporizador",
        "func": "// Obtiene el tiempo transcurrido desde la variable global\n// const elapsedTime = global.get(\"elapsedTime\") || 0;\n\n// if ( elapsedTime > 10 ) {\n\n//     var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n//     msg.payload = buf\n//     return msg;\n\n// } else {\n    \n    // Al recibir respuesta, actualiza el tiempo de última respuesta en el contexto global\n    \n    \n    \n    \n    const currentTime = new Date().getTime();\nglobal.set(\"lastResponseTimeHorno4F1\", currentTime);  // Reinicia el temporizador\n\n    msg.payload = `Se reseteo el temporizador`\n    return msg;\n\n    // return msg;\n// }\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 680,
        "wires": []
    },
    {
        "id": "d69f336f6008ba6d",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "3a90eb7f589ce9be"
        ],
        "uncaught": false,
        "x": 800,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "58ed8f3e7cb374da",
        "type": "catch",
        "z": "205825f9a799aa40",
        "name": "",
        "scope": [
            "9ee0fa53d69a78be"
        ],
        "uncaught": false,
        "x": 630,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "49a8de3d2b2165eb",
        "type": "debug",
        "z": "3e8ffc98223c95e8",
        "name": "status M1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 120,
        "wires": []
    },
    {
        "id": "c9bb3f34b4bb7f95",
        "type": "debug",
        "z": "3e8ffc98223c95e8",
        "name": "Status salida Y1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 200,
        "wires": []
    },
    {
        "id": "17bf1214b4383f12",
        "type": "websocket out",
        "z": "3e8ffc98223c95e8",
        "name": "PLC Lecho Info",
        "server": "47197bdf13bce40a",
        "client": "",
        "x": 1360,
        "y": 60,
        "wires": []
    },
    {
        "id": "9bb885e47568cdf4",
        "type": "websocket in",
        "z": "3e8ffc98223c95e8",
        "name": "PLC Lecho Reload",
        "server": "47197bdf13bce40a",
        "client": "",
        "x": 1570,
        "y": 200,
        "wires": [
            [
                "2c0eccebe7db4f5d"
            ]
        ]
    },
    {
        "id": "2cebfccd4d68c697",
        "type": "join",
        "z": "3e8ffc98223c95e8",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "30",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 950,
        "y": 120,
        "wires": [
            [
                "c9bb3f34b4bb7f95",
                "b50f4f4f7391e524"
            ]
        ]
    },
    {
        "id": "c3ee4d2fdcb02d52",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d0",
        "func": "msg.topic = \"d0\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "ba43a11f4a41daea"
            ]
        ]
    },
    {
        "id": "46de35fbb4a78e60",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d1",
        "func": "msg.topic = \"d1\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "ba43a11f4a41daea"
            ]
        ]
    },
    {
        "id": "442473e97e8bc32a",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d2",
        "func": "msg.topic = \"d2\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "ba43a11f4a41daea"
            ]
        ]
    },
    {
        "id": "de0ad297fb1262eb",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d3",
        "func": "msg.topic = \"d3\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "ba43a11f4a41daea"
            ]
        ]
    },
    {
        "id": "41f586537ffc5932",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d4",
        "func": "msg.topic = \"d4\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "ba43a11f4a41daea"
            ]
        ]
    },
    {
        "id": "e0cb2393b9ac9d34",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d5",
        "func": "msg.topic = \"d5\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 620,
        "wires": [
            [
                "b12c015760209cb0"
            ]
        ]
    },
    {
        "id": "5f1050bf7c3d91ec",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d6",
        "func": "msg.topic = \"d6\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "b12c015760209cb0"
            ]
        ]
    },
    {
        "id": "3094b97448e62c3e",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d7",
        "func": "msg.topic = \"d7\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 740,
        "wires": [
            [
                "b12c015760209cb0"
            ]
        ]
    },
    {
        "id": "68991798267b82fe",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d8",
        "func": "msg.topic = \"d8\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "b12c015760209cb0"
            ]
        ]
    },
    {
        "id": "b50f4f4f7391e524",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "Array",
        "func": "var data = msg.payload;\n\nvar transformedData = {\n    E_stop: data.d0.M999,\n    Bombona_llena: data.d1.X1,\n    Bombona_bajo: data.d2.X3,\n    Lecho_lleno: data.d3.X5,\n    Lecho_bajo: data.d4.X4,\n    Bombona_presurizada: data.d5.M98,\n    Bombona_despresurizada: data.d6.M97, \n    Cajon_bombona_shakeout_llena: data.d7.X9,\n    Vibrador_shakeout_motor1: data.d8.Y11,\n    Vibrador_shakeout_falla1: data.d9.XA,\n    Vibrador_shakeout_motor2: data.d10.Y12,\n    Vibrador_shakeout_falla2: data.d11.X2,\n    Vibrador_lecho_motor1: data.d12.Y13,\n    Vibrador_lecho_falla1: data.d13.X6,\n    Vibrador_lecho_motor2: data.d14.Y14,\n    Vibrador_lecho_falla2: data.d29.XE,\n    Soplador_rojo: data.d15.X15,\n    Soplador_rojo_falla: data.d16.XF,\n    Soplador_azul: data.d17.Y20,\n    Soplador_azul_falla: data.d18.XC,\n    Valvula_torpedo: data.d19.Y1A,\n    Valvula_despiche_bombona: data.d20.Y18,\n    Entrada_aire_bombona: data.d21.Y17,\n    Valvula_salida_lecho_bombona: data.d22.Y16,\n    Temp_arena_lecho_in: (data.d23.D3585)/10,\n    Temp_arena_lecho_out: (data.d24.D3587)/10,\n    Temp_agua_lecho_out: (data.d25.D3589)/10,\n    Temp_agua_lecho_in: (data.d26.D3591)/10,\n    Presion_bombona: data.d27.D64,\n    Nivel_arena_bombona: data.d28.D0,    \n}\n\nmsg.payload = transformedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "49a8de3d2b2165eb",
                "17bf1214b4383f12"
            ]
        ]
    },
    {
        "id": "607874fa202b2d43",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d9",
        "func": "msg.topic = \"d9\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 860,
        "wires": [
            [
                "b12c015760209cb0"
            ]
        ]
    },
    {
        "id": "ab142ef5e4d39b84",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d10",
        "func": "msg.topic = \"d10\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "911d24f4afc399cd"
            ]
        ]
    },
    {
        "id": "e44209d00af89c37",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d11",
        "func": "msg.topic = \"d11\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "911d24f4afc399cd"
            ]
        ]
    },
    {
        "id": "93723d855e7b01c5",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d12",
        "func": "msg.topic = \"d12\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "911d24f4afc399cd"
            ]
        ]
    },
    {
        "id": "2f4ae138f09e5e9a",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d13",
        "func": "msg.topic = \"d13\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 480,
        "wires": [
            [
                "911d24f4afc399cd"
            ]
        ]
    },
    {
        "id": "c7f8918d54f4ffca",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d14",
        "func": "msg.topic = \"d14\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 540,
        "wires": [
            [
                "911d24f4afc399cd"
            ]
        ]
    },
    {
        "id": "220df880bc5f29ad",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d15",
        "func": "msg.topic = \"d15\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "7dc397b2a2d9c9f1"
            ]
        ]
    },
    {
        "id": "ba43a11f4a41daea",
        "type": "link out",
        "z": "3e8ffc98223c95e8",
        "name": "OutputRequest1",
        "mode": "link",
        "links": [
            "93987ed652c373d1"
        ],
        "x": 625,
        "y": 420,
        "wires": []
    },
    {
        "id": "b12c015760209cb0",
        "type": "link out",
        "z": "3e8ffc98223c95e8",
        "name": "OutputRequest2",
        "mode": "link",
        "links": [
            "93987ed652c373d1"
        ],
        "x": 625,
        "y": 740,
        "wires": []
    },
    {
        "id": "911d24f4afc399cd",
        "type": "link out",
        "z": "3e8ffc98223c95e8",
        "name": "OutputRequest3",
        "mode": "link",
        "links": [
            "93987ed652c373d1"
        ],
        "x": 1365,
        "y": 420,
        "wires": []
    },
    {
        "id": "e1e40bac637930fc",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d16",
        "func": "msg.topic = \"d16\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "7dc397b2a2d9c9f1"
            ]
        ]
    },
    {
        "id": "04d83e332f02242e",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d17",
        "func": "msg.topic = \"d17\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 740,
        "wires": [
            [
                "7dc397b2a2d9c9f1"
            ]
        ]
    },
    {
        "id": "986b88073ebb0f7f",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d18",
        "func": "msg.topic = \"d18\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 800,
        "wires": [
            [
                "7dc397b2a2d9c9f1"
            ]
        ]
    },
    {
        "id": "7dc397b2a2d9c9f1",
        "type": "link out",
        "z": "3e8ffc98223c95e8",
        "name": "OutputRequest4",
        "mode": "link",
        "links": [
            "93987ed652c373d1"
        ],
        "x": 1365,
        "y": 740,
        "wires": []
    },
    {
        "id": "127de90f84c07361",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "InputRequest1",
        "links": [
            "1752231d4dfbb4e3"
        ],
        "x": 35,
        "y": 420,
        "wires": [
            [
                "f6c996b7aa779694",
                "77ced01cfc4410ef",
                "3f504d2987b57393",
                "54bf801a4328fdb0",
                "dbf44635d96bdfc0"
            ]
        ]
    },
    {
        "id": "27c3d2eec02fc42d",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "InputRequest2",
        "links": [
            "1752231d4dfbb4e3"
        ],
        "x": 35,
        "y": 740,
        "wires": [
            [
                "575d9c6a0bf9d1aa",
                "ca30f0545ebb4fca",
                "4ae3c38fb28fcc9e",
                "2f0f54f3c6efff94",
                "1c81cfd8272d756b"
            ]
        ]
    },
    {
        "id": "5603aafb43f12296",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "InputRequest3",
        "links": [
            "1752231d4dfbb4e3"
        ],
        "x": 775,
        "y": 420,
        "wires": [
            [
                "92e76b799d2573ab",
                "c1be431159504d72",
                "b9a0db109880b376",
                "05269af05dfdbd24",
                "0af6fb856467a9e3"
            ]
        ]
    },
    {
        "id": "1abdd46e08f42156",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "InputRequest4",
        "links": [
            "1752231d4dfbb4e3"
        ],
        "x": 785,
        "y": 740,
        "wires": [
            [
                "83425204d2aad814",
                "3041bc8bdd3074bf",
                "cfdec3f696c4a21a",
                "40e2cbfbf71cb297",
                "d1b1151b36a0a135"
            ]
        ]
    },
    {
        "id": "93987ed652c373d1",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "OutRequest",
        "links": [
            "7dc397b2a2d9c9f1",
            "911d24f4afc399cd",
            "b12c015760209cb0",
            "ba43a11f4a41daea",
            "7602b150b3859c5a",
            "0a25ab98e3745586"
        ],
        "x": 825,
        "y": 120,
        "wires": [
            [
                "2cebfccd4d68c697"
            ]
        ]
    },
    {
        "id": "478868428ebe93d4",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d19",
        "func": "msg.topic = \"d19\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 860,
        "wires": [
            [
                "7dc397b2a2d9c9f1"
            ]
        ]
    },
    {
        "id": "0276bd8ca3c761cb",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d20",
        "func": "msg.topic = \"d20\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 300,
        "wires": [
            [
                "7602b150b3859c5a"
            ]
        ]
    },
    {
        "id": "1f4151786ddf97f6",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d21",
        "func": "msg.topic = \"d21\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 360,
        "wires": [
            [
                "7602b150b3859c5a"
            ]
        ]
    },
    {
        "id": "5a0d10d9d3f39473",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d22",
        "func": "msg.topic = \"d22\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 420,
        "wires": [
            [
                "7602b150b3859c5a"
            ]
        ]
    },
    {
        "id": "5561965d678041e3",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d23",
        "func": "msg.topic = \"d23\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 480,
        "wires": [
            [
                "7602b150b3859c5a"
            ]
        ]
    },
    {
        "id": "7602b150b3859c5a",
        "type": "link out",
        "z": "3e8ffc98223c95e8",
        "name": "OutputRequest4",
        "mode": "link",
        "links": [
            "93987ed652c373d1"
        ],
        "x": 2065,
        "y": 420,
        "wires": []
    },
    {
        "id": "44403f6da6a4e844",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "InputRequest4",
        "links": [
            "1752231d4dfbb4e3"
        ],
        "x": 1485,
        "y": 420,
        "wires": [
            [
                "6e02086f681e1118",
                "d39b2f5d7de9e272",
                "7865817cc593d03d",
                "2f678678ae926c12",
                "5616a090d21e2e3a"
            ]
        ]
    },
    {
        "id": "46b14aeb748c943b",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d24",
        "func": "msg.topic = \"d24\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 540,
        "wires": [
            [
                "7602b150b3859c5a"
            ]
        ]
    },
    {
        "id": "32848c62e476f2fe",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d25",
        "func": "msg.topic = \"d25\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 620,
        "wires": [
            [
                "0a25ab98e3745586"
            ]
        ]
    },
    {
        "id": "5da324839ebb82f9",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d26",
        "func": "msg.topic = \"d26\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 680,
        "wires": [
            [
                "0a25ab98e3745586"
            ]
        ]
    },
    {
        "id": "5ca4135b61718b10",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d27",
        "func": "msg.topic = \"d27\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 740,
        "wires": [
            [
                "0a25ab98e3745586"
            ]
        ]
    },
    {
        "id": "d7a6795b87bed38b",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d28",
        "func": "msg.topic = \"d28\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 800,
        "wires": [
            [
                "0a25ab98e3745586"
            ]
        ]
    },
    {
        "id": "0a25ab98e3745586",
        "type": "link out",
        "z": "3e8ffc98223c95e8",
        "name": "OutputRequest4",
        "mode": "link",
        "links": [
            "93987ed652c373d1"
        ],
        "x": 2065,
        "y": 740,
        "wires": []
    },
    {
        "id": "0247050d8ada2a75",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "InputRequest4",
        "links": [
            "1752231d4dfbb4e3"
        ],
        "x": 1485,
        "y": 740,
        "wires": [
            [
                "a6fbec08f2018c73",
                "4188c664dcd2c2ee",
                "3743b94a810bcaf4",
                "44b4620bee6a3cd3",
                "5ea2712464997df1"
            ]
        ]
    },
    {
        "id": "22ab90ed682a3d82",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "d29",
        "func": "msg.topic = \"d29\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 860,
        "wires": [
            [
                "0a25ab98e3745586"
            ]
        ]
    },
    {
        "id": "2878cdee8f2a3509",
        "type": "link in",
        "z": "3e8ffc98223c95e8",
        "name": "InputRequest4",
        "links": [
            "1752231d4dfbb4e3"
        ],
        "x": 2445,
        "y": 40,
        "wires": [
            [
                "4d88f39afe96c3d8",
                "261de41d3d72e415"
            ]
        ]
    },
    {
        "id": "f1e0a2660c169297",
        "type": "debug",
        "z": "3e8ffc98223c95e8",
        "name": "M55_read_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 40,
        "wires": []
    },
    {
        "id": "4aec7b53343a5f03",
        "type": "inject",
        "z": "3e8ffc98223c95e8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1790,
        "y": 100,
        "wires": [
            [
                "1752231d4dfbb4e3"
            ]
        ]
    },
    {
        "id": "1752231d4dfbb4e3",
        "type": "link out",
        "z": "3e8ffc98223c95e8",
        "name": "preguntar estado",
        "mode": "link",
        "links": [
            "127de90f84c07361",
            "1abdd46e08f42156",
            "27c3d2eec02fc42d",
            "5603aafb43f12296",
            "44403f6da6a4e844",
            "0247050d8ada2a75",
            "2878cdee8f2a3509"
        ],
        "x": 1915,
        "y": 100,
        "wires": []
    },
    {
        "id": "bbf30ec810a4722c",
        "type": "debug",
        "z": "3e8ffc98223c95e8",
        "name": "M55_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 320,
        "wires": []
    },
    {
        "id": "24cf16821d949815",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "WebService to plc",
        "func": "var mensajeObjeto = JSON.parse(msg.payload);\n\nvar valorCanal = mensajeObjeto.canal;\nvar valorDato = mensajeObjeto.dato;\n\n//Aire empuje tubo alimentacio bombona\nif (valorCanal === \"M55\") {\n    if (valorDato === \"1\") {\n        var msg1 = {payload: 1 };\n    }\n    else if (valorDato === \"0\") {\n        var msg1 = {payload: 0 };\n    }\n}\nif (valorCanal === \"M56\") {\n    if (valorDato === \"1\") {   \n        var msg2 = {payload: 1 };     \n    }\n    else if (valorDato === \"0\") {\n        var msg2 = {payload: 0 };\n    }\n}\nnode.send([msg1, msg2]);",
        "outputs": 11,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 560,
        "wires": [
            [
                "0861580bd0f31192"
            ],
            [
                "eeccef59ea572ef2"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "0cddcce4a3572c35",
        "type": "debug",
        "z": "3e8ffc98223c95e8",
        "name": "M56_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2940,
        "y": 520,
        "wires": []
    },
    {
        "id": "f52eeced374733cb",
        "type": "debug",
        "z": "3e8ffc98223c95e8",
        "name": "M56_read_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 100,
        "wires": []
    },
    {
        "id": "f6c996b7aa779694",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "E.Stop",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M999",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 350,
        "y": 300,
        "wires": [
            [
                "c3ee4d2fdcb02d52"
            ]
        ]
    },
    {
        "id": "77ced01cfc4410ef",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Bombona llena",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X1",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "46de35fbb4a78e60"
            ]
        ]
    },
    {
        "id": "3f504d2987b57393",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Bombona bajo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X3",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 320,
        "y": 420,
        "wires": [
            [
                "442473e97e8bc32a"
            ]
        ]
    },
    {
        "id": "54bf801a4328fdb0",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Lecho lleno",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X5",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 330,
        "y": 480,
        "wires": [
            [
                "de0ad297fb1262eb"
            ]
        ]
    },
    {
        "id": "dbf44635d96bdfc0",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Lecho bajo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X4",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 330,
        "y": 540,
        "wires": [
            [
                "41f586537ffc5932"
            ]
        ]
    },
    {
        "id": "575d9c6a0bf9d1aa",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Bombona presurizada",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M98",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 300,
        "y": 620,
        "wires": [
            [
                "e0cb2393b9ac9d34"
            ]
        ]
    },
    {
        "id": "ca30f0545ebb4fca",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Bombona despresurizada",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M97",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "5f1050bf7c3d91ec"
            ]
        ]
    },
    {
        "id": "4ae3c38fb28fcc9e",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "cajon bombona Shakeout llena",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X9",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 270,
        "y": 740,
        "wires": [
            [
                "3094b97448e62c3e"
            ]
        ]
    },
    {
        "id": "1c81cfd8272d756b",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador shakeout (motor1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y11",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 280,
        "y": 800,
        "wires": [
            [
                "68991798267b82fe"
            ]
        ]
    },
    {
        "id": "92e76b799d2573ab",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador shakeout (motor2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y12",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "ab142ef5e4d39b84"
            ]
        ]
    },
    {
        "id": "2f0f54f3c6efff94",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador shakeout (falla1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XA",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 290,
        "y": 860,
        "wires": [
            [
                "607874fa202b2d43"
            ]
        ]
    },
    {
        "id": "b9a0db109880b376",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador shakeout (falla2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X2",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "e44209d00af89c37"
            ]
        ]
    },
    {
        "id": "c1be431159504d72",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador lecho (motor1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y13",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "93723d855e7b01c5"
            ]
        ]
    },
    {
        "id": "05269af05dfdbd24",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador lecho (falla1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X6",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1040,
        "y": 480,
        "wires": [
            [
                "2f4ae138f09e5e9a"
            ]
        ]
    },
    {
        "id": "0af6fb856467a9e3",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador lecho (motor2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y14",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "c7f8918d54f4ffca"
            ]
        ]
    },
    {
        "id": "83425204d2aad814",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "soplador rojo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X15",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "220df880bc5f29ad"
            ]
        ]
    },
    {
        "id": "3041bc8bdd3074bf",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Soplador rojo (falla)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XF",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "e1e40bac637930fc"
            ]
        ]
    },
    {
        "id": "cfdec3f696c4a21a",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "soplador azul",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y20",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1070,
        "y": 740,
        "wires": [
            [
                "04d83e332f02242e"
            ]
        ]
    },
    {
        "id": "40e2cbfbf71cb297",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "soplador azul (falla)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XC",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1050,
        "y": 800,
        "wires": [
            [
                "986b88073ebb0f7f"
            ]
        ]
    },
    {
        "id": "d1b1151b36a0a135",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Valvula torpedo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y1A",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1060,
        "y": 860,
        "wires": [
            [
                "478868428ebe93d4"
            ]
        ]
    },
    {
        "id": "6e02086f681e1118",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Valvula despiche bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y18",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1720,
        "y": 300,
        "wires": [
            [
                "0276bd8ca3c761cb"
            ]
        ]
    },
    {
        "id": "d39b2f5d7de9e272",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Entrada aire bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y17",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 360,
        "wires": [
            [
                "1f4151786ddf97f6"
            ]
        ]
    },
    {
        "id": "7865817cc593d03d",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Valvula salida lecho bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y16",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1710,
        "y": 420,
        "wires": [
            [
                "5a0d10d9d3f39473"
            ]
        ]
    },
    {
        "id": "2f678678ae926c12",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Temp Arena lecho IN",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3585",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 480,
        "wires": [
            [
                "5561965d678041e3"
            ]
        ]
    },
    {
        "id": "5616a090d21e2e3a",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Temp arena lecho Out",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3587",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 540,
        "wires": [
            [
                "46b14aeb748c943b"
            ]
        ]
    },
    {
        "id": "a6fbec08f2018c73",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Temp agua lecho Out",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3589",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1760,
        "y": 620,
        "wires": [
            [
                "32848c62e476f2fe"
            ]
        ]
    },
    {
        "id": "4188c664dcd2c2ee",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Temp agua lecho in",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3591",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1730,
        "y": 680,
        "wires": [
            [
                "5da324839ebb82f9"
            ]
        ]
    },
    {
        "id": "3743b94a810bcaf4",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Presion bombona [BAR]",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D64",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1730,
        "y": 740,
        "wires": [
            [
                "5ca4135b61718b10"
            ]
        ]
    },
    {
        "id": "44b4620bee6a3cd3",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Nivel arena bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D0",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 800,
        "wires": [
            [
                "d7a6795b87bed38b"
            ]
        ]
    },
    {
        "id": "5ea2712464997df1",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "Vibrador lecho (falla2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XE",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 860,
        "wires": [
            [
                "22ab90ed682a3d82"
            ]
        ]
    },
    {
        "id": "4d88f39afe96c3d8",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "M55 Read SetPoint BBAS agua",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M55",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2630,
        "y": 40,
        "wires": [
            [
                "f1e0a2660c169297"
            ]
        ]
    },
    {
        "id": "261de41d3d72e415",
        "type": "Ind MC Read",
        "z": "3e8ffc98223c95e8",
        "name": "M56 Read SetPoint Enfirador agua",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M56",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2640,
        "y": 100,
        "wires": [
            [
                "f52eeced374733cb"
            ]
        ]
    },
    {
        "id": "0861580bd0f31192",
        "type": "Ind MC Write",
        "z": "3e8ffc98223c95e8",
        "name": "M55",
        "topic": "",
        "connection": "a58ac421aa624587",
        "data": "payload",
        "address": "M55",
        "addressType": "str",
        "dataType": "msg",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2690,
        "y": 340,
        "wires": [
            [
                "bbf30ec810a4722c"
            ]
        ]
    },
    {
        "id": "eeccef59ea572ef2",
        "type": "Ind MC Write",
        "z": "3e8ffc98223c95e8",
        "name": "M56",
        "topic": "",
        "connection": "a58ac421aa624587",
        "data": "payload",
        "address": "M56",
        "addressType": "str",
        "dataType": "msg",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2730,
        "y": 460,
        "wires": [
            [
                "0cddcce4a3572c35"
            ]
        ]
    },
    {
        "id": "2c0eccebe7db4f5d",
        "type": "function",
        "z": "3e8ffc98223c95e8",
        "name": "scrpit",
        "func": "if (msg.payload === \"true\") {\n    var msg1 = {payload: 1 };\n}\nnode.send([msg1]);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 160,
        "wires": [
            [
                "1752231d4dfbb4e3"
            ]
        ]
    },
    {
        "id": "65ee75638ec432dc",
        "type": "inject",
        "z": "38e65435f2163ea9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 480,
        "wires": [
            [
                "14465f1a03bbc683"
            ]
        ]
    },
    {
        "id": "9e6354e26d280e12",
        "type": "debug",
        "z": "38e65435f2163ea9",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 420,
        "wires": []
    },
    {
        "id": "14465f1a03bbc683",
        "type": "exec",
        "z": "38e65435f2163ea9",
        "command": "python3 /home/MED_TTermicosF2_Funciona.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 960,
        "y": 480,
        "wires": [
            [
                "9e6354e26d280e12"
            ],
            [
                "2fce0aa838edaa1d"
            ],
            [
                "0c36b663a91347b7"
            ]
        ]
    },
    {
        "id": "2fce0aa838edaa1d",
        "type": "debug",
        "z": "38e65435f2163ea9",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 480,
        "wires": []
    },
    {
        "id": "0c36b663a91347b7",
        "type": "debug",
        "z": "38e65435f2163ea9",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 540,
        "wires": []
    }
]