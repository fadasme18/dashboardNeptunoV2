[
    {
        "id": "eb65df9c7eb63c1b",
        "type": "tab",
        "label": "querys",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e780f688e5979083",
        "type": "tab",
        "label": "Lecturas F2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9eca4a74afa40c8b",
        "type": "tab",
        "label": "Lecturas F1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dd1840493362654a",
        "type": "tab",
        "label": "Prueba PLC mitsubishi",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec5a549616ef2efd",
        "type": "tab",
        "label": "Flujo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "901545a3e9d96401",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": 8086,
        "protocol": "http",
        "database": "database",
        "name": "test1",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": "30",
        "rejectUnauthorized": true
    },
    {
        "id": "4dd79f1fdbfd6807",
        "type": "websocket-listener",
        "path": "/ws/connectionstatus",
        "wholemsg": "false"
    },
    {
        "id": "0cd0de0349e15191",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxTest2",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://192.168.1.154:8086",
        "timeout": "",
        "rejectUnauthorized": false
    },
    {
        "id": "fd812ec1a0185442",
        "type": "modbus-client",
        "name": "SILO_SUR_NORTE",
        "clienttype": "tcp",
        "bufferCommands": false,
        "stateLogEnabled": true,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.27",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 5,
        "parallelUnitIdsAllowed": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "62685803db2817d6",
        "type": "modbus-client",
        "name": "SILO_COHETE",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.28",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "0bd0941b0d027eab",
        "type": "modbus-client",
        "name": "temperatura_lecho_F2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.206",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a58ac421aa624587",
        "type": "Ind MC Protocol Connection",
        "name": "",
        "host": "192.168.1.31",
        "port": "1025",
        "protocol": "TCP",
        "frame": "4E",
        "plcType": "L",
        "ascii": false,
        "PLCStation": "",
        "PCStation": "",
        "PLCModuleNo": "",
        "network": "",
        "octalInputOutput": false,
        "timeout": "1000",
        "autoConnect": true
    },
    {
        "id": "7a46a0045114eb9d",
        "type": "modbus-client",
        "name": "Presion_aire_shakeout",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.212",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "e6786a342ce86a73",
        "type": "websocket-listener",
        "path": "/ws/countershakeout",
        "wholemsg": "false"
    },
    {
        "id": "47197bdf13bce40a",
        "type": "websocket-listener",
        "path": "/ws/PLCLecho",
        "wholemsg": "false"
    },
    {
        "id": "8273b77ad09eb963",
        "type": "websocket-listener",
        "path": "/ws/testgraficos",
        "wholemsg": "false"
    },
    {
        "id": "aaea9d9aa0ae8e18",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f2horno1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1430,
        "y": 260,
        "wires": [
            [
                "b9d633d9799004c5"
            ]
        ]
    },
    {
        "id": "b97206651b3e1003",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F2H1",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-Horno1-[COUNTIS-E53]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Current1\" or r[\"_field\"] == \"Current2\" or r[\"_field\"] == \"Current3\" or r[\"_field\"] == \"Energy\" or r[\"_field\"] == \"Power\" or r[\"_field\"] == \"Voltage1\" or r[\"_field\"] == \"Voltage2\" or r[\"_field\"] == \"Voltage3\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 1990,
        "y": 300,
        "wires": [
            [
                "056ac75c659bbec2",
                "a30f2c7f91e77843",
                "83d8578f0c47834a"
            ]
        ]
    },
    {
        "id": "b2934bedae51f73e",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 2100,
        "y": 240,
        "wires": []
    },
    {
        "id": "056ac75c659bbec2",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F2H1 = 'datosGraficoF2H1Cache';\nconst TIMESTAMP_KEY_F2H1 = 'datosGraficoF2H1Timestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F2H1, msg.payload);\nflow.set(TIMESTAMP_KEY_F2H1, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 300,
        "wires": [
            [
                "b2934bedae51f73e",
                "6b7fcb3fdf6f4d66"
            ]
        ]
    },
    {
        "id": "6b7fcb3fdf6f4d66",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2280,
        "y": 360,
        "wires": []
    },
    {
        "id": "b9d633d9799004c5",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F2H1 = 'datosGraficoF2H1Cache';\nconst TIMESTAMP_KEY_F2H1 = 'datosGraficoF2H1Timestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_F2H1);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_F2H1);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 320,
        "wires": [
            [
                "a9820f09220ab0c8",
                "879983b01ffd81f7"
            ]
        ]
    },
    {
        "id": "879983b01ffd81f7",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 260,
        "wires": [
            [
                "b2934bedae51f73e",
                "bf1544c4f3dc0978"
            ],
            [
                "c2b3bd2eebf3cf97",
                "b97206651b3e1003"
            ]
        ]
    },
    {
        "id": "bf1544c4f3dc0978",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1760,
        "y": 200,
        "wires": []
    },
    {
        "id": "c2b3bd2eebf3cf97",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1770,
        "y": 320,
        "wires": []
    },
    {
        "id": "a9820f09220ab0c8",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1570,
        "y": 380,
        "wires": []
    },
    {
        "id": "937d489a0d2d11ca",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f1horno1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "763c085152049aca"
            ]
        ]
    },
    {
        "id": "fe64f238199fa6bc",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F1H1",
        "query": "from(bucket: \"fundicion1\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F1-Horno1-[DPM-C530]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Current\" or r[\"_field\"] == \"CurrentB\" or r[\"_field\"] == \"CurrentC\" or r[\"_field\"] == \"Energy\" or r[\"_field\"] == \"Power\" or r[\"_field\"] == \"Voltage\" or r[\"_field\"] == \"VoltageB\" or r[\"_field\"] == \"VoltageC\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 730,
        "y": 320,
        "wires": [
            [
                "64a958dfb9b1f4f0",
                "f7e558a973c37062",
                "272f2f8c446b3583"
            ]
        ]
    },
    {
        "id": "c684ffafce3db21d",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 840,
        "y": 260,
        "wires": []
    },
    {
        "id": "64a958dfb9b1f4f0",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F1H1 = 'datosGraficoF1H1Cache';\nconst TIMESTAMP_KEY_F1H1 = 'datosGraficoF1H1Timestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F1H1, msg.payload);\nflow.set(TIMESTAMP_KEY_F1H1, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 320,
        "wires": [
            [
                "c684ffafce3db21d",
                "2d85dac43691fe93"
            ]
        ]
    },
    {
        "id": "2d85dac43691fe93",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1020,
        "y": 380,
        "wires": []
    },
    {
        "id": "763c085152049aca",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F1H1 = 'datosGraficoF1H1Cache';\nconst TIMESTAMP_KEY_F1H1 = 'datosGraficoF1H1Timestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheDataF1H1 = flow.get(CACHE_KEY_F1H1);\nlet cacheTimestampF1H1 = flow.get(TIMESTAMP_KEY_F1H1);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheDataF1H1 && cacheTimestampF1H1 && (now - cacheTimestampF1H1 < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheDataF1H1;\n    msg.useCacheF1H1 = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCacheF1H1 = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "3a238e7b70d49b33",
                "902effccaf70ad45"
            ]
        ]
    },
    {
        "id": "902effccaf70ad45",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCacheF1H1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 280,
        "wires": [
            [
                "c684ffafce3db21d",
                "4da479733b26ed52"
            ],
            [
                "bec60fdd476cd0f7",
                "fe64f238199fa6bc"
            ]
        ]
    },
    {
        "id": "4da479733b26ed52",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "bec60fdd476cd0f7",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 530,
        "y": 340,
        "wires": []
    },
    {
        "id": "3a238e7b70d49b33",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCacheF1H1",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 310,
        "y": 400,
        "wires": []
    },
    {
        "id": "427c5767e13747a1",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f1horno2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 640,
        "wires": [
            [
                "937adb9a9dc0695e"
            ]
        ]
    },
    {
        "id": "eadafd51ec7ec898",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F1H2",
        "query": "from(bucket: \"fundicion1\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F1-Horno2-[COUNTIS-E53]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Current1\" or r[\"_field\"] == \"Current2\" or r[\"_field\"] == \"Current3\" or r[\"_field\"] == \"Energy\" or r[\"_field\"] == \"Power\" or r[\"_field\"] == \"Voltage1\" or r[\"_field\"] == \"Voltage2\" or r[\"_field\"] == \"Voltage3\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 730,
        "y": 680,
        "wires": [
            [
                "8759cf17ffc5c9a4",
                "ef2c7c362eff7ecd",
                "6e8624b8c454d8ef"
            ]
        ]
    },
    {
        "id": "a88fef8a699b6d9b",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "8759cf17ffc5c9a4",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F1H2 = 'datosGraficoF1H2Cache';\nconst TIMESTAMP_KEY_F1H2 = 'datosGraficoF1H2Timestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F1H2, msg.payload);\nflow.set(TIMESTAMP_KEY_F1H2, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 680,
        "wires": [
            [
                "a88fef8a699b6d9b",
                "fc0f513fcc66ef3b"
            ]
        ]
    },
    {
        "id": "fc0f513fcc66ef3b",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1020,
        "y": 740,
        "wires": []
    },
    {
        "id": "937adb9a9dc0695e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F1H2 = 'datosGraficoF1H2Cache';\nconst TIMESTAMP_KEY_F1H2 = 'datosGraficoF1H2Timestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheDataF1H2 = flow.get(CACHE_KEY_F1H2);\nlet cacheTimestampF1H2 = flow.get(TIMESTAMP_KEY_F1H2);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheDataF1H2 && cacheTimestampF1H2 && (now - cacheTimestampF1H2 < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheDataF1H2;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 700,
        "wires": [
            [
                "f38c320f6ac4781f",
                "0745ed7cd8d4a5db"
            ]
        ]
    },
    {
        "id": "0745ed7cd8d4a5db",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 640,
        "wires": [
            [
                "a88fef8a699b6d9b",
                "d065f12154b1c092"
            ],
            [
                "290013afb6d4de15",
                "eadafd51ec7ec898"
            ]
        ]
    },
    {
        "id": "d065f12154b1c092",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 580,
        "wires": []
    },
    {
        "id": "290013afb6d4de15",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 530,
        "y": 700,
        "wires": []
    },
    {
        "id": "f38c320f6ac4781f",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 310,
        "y": 760,
        "wires": []
    },
    {
        "id": "1e06decd978089d3",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f1horno3",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1000,
        "wires": [
            [
                "1648e786e99d883e"
            ]
        ]
    },
    {
        "id": "a28bb8d3351c0749",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F1H3",
        "query": "from(bucket: \"fundicion1\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F1-Horno3-[COUNTIS-E53]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Current1\" or r[\"_field\"] == \"Current2\" or r[\"_field\"] == \"Current3\" or r[\"_field\"] == \"Energy\" or r[\"_field\"] == \"Power\" or r[\"_field\"] == \"Voltage1\" or r[\"_field\"] == \"Voltage2\" or r[\"_field\"] == \"Voltage3\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "15a60f604697083d",
                "63a552b94d1f44c7",
                "e5321fadbd48578e"
            ]
        ]
    },
    {
        "id": "a1abab677f895a19",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 840,
        "y": 980,
        "wires": []
    },
    {
        "id": "15a60f604697083d",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F1H3 = 'datosGraficoF1H3Cache';\nconst TIMESTAMP_KEY_F1H3 = 'datosGraficoF1H3Timestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F1H3, msg.payload);\nflow.set(TIMESTAMP_KEY_F1H3, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1040,
        "wires": [
            [
                "a1abab677f895a19",
                "52dddd698bdb2b0d"
            ]
        ]
    },
    {
        "id": "52dddd698bdb2b0d",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1020,
        "y": 1100,
        "wires": []
    },
    {
        "id": "1648e786e99d883e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F1H3 = 'datosGraficoF1H3Cache';\nconst TIMESTAMP_KEY_F1H3 = 'datosGraficoF1H3Timestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_F1H3);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_F1H3);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1060,
        "wires": [
            [
                "75b6dbdd247fc917",
                "0068e0dcc3173005"
            ]
        ]
    },
    {
        "id": "0068e0dcc3173005",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 1000,
        "wires": [
            [
                "a1abab677f895a19",
                "b56182d73545d5a7"
            ],
            [
                "8351d1615e730877",
                "a28bb8d3351c0749"
            ]
        ]
    },
    {
        "id": "b56182d73545d5a7",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 940,
        "wires": []
    },
    {
        "id": "8351d1615e730877",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 530,
        "y": 1060,
        "wires": []
    },
    {
        "id": "75b6dbdd247fc917",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 310,
        "y": 1120,
        "wires": []
    },
    {
        "id": "76e4cc5f5f680f4d",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f1horno4",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "dd1c1a15dccdc626"
            ]
        ]
    },
    {
        "id": "47d16027816abe20",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F1H4",
        "query": "from(bucket: \"fundicion1\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F1-Horno4-[COUNTIS-E53]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Current1\" or r[\"_field\"] == \"Current2\" or r[\"_field\"] == \"Current3\" or r[\"_field\"] == \"Energy\" or r[\"_field\"] == \"Power\" or r[\"_field\"] == \"Voltage1\" or r[\"_field\"] == \"Voltage2\" or r[\"_field\"] == \"Voltage3\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 730,
        "y": 1400,
        "wires": [
            [
                "c29770c53a89b5c4",
                "c08326ce9176160d",
                "f055401be76a8e62"
            ]
        ]
    },
    {
        "id": "24680208f5905de8",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 840,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c29770c53a89b5c4",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F1H4 = 'datosGraficoF1H4Cache';\nconst TIMESTAMP_KEY_F1H4 = 'datosGraficoF1H4Timestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F1H4, msg.payload);\nflow.set(TIMESTAMP_KEY_F1H4, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1400,
        "wires": [
            [
                "24680208f5905de8",
                "d92b6b6003f40f42"
            ]
        ]
    },
    {
        "id": "d92b6b6003f40f42",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1020,
        "y": 1460,
        "wires": []
    },
    {
        "id": "dd1c1a15dccdc626",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F1H4 = 'datosGraficoF1H4Cache';\nconst TIMESTAMP_KEY_F1H4 = 'datosGraficoF1H4Timestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_F1H4);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_F1H4);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1420,
        "wires": [
            [
                "522398865e3e00b3",
                "cad3e452c0e7c919"
            ]
        ]
    },
    {
        "id": "cad3e452c0e7c919",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 1360,
        "wires": [
            [
                "24680208f5905de8",
                "1b0bbdf85ec4654f"
            ],
            [
                "d378bdae4d6d983c",
                "47d16027816abe20"
            ]
        ]
    },
    {
        "id": "1b0bbdf85ec4654f",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d378bdae4d6d983c",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 530,
        "y": 1420,
        "wires": []
    },
    {
        "id": "522398865e3e00b3",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 310,
        "y": 1480,
        "wires": []
    },
    {
        "id": "88f352aec8c70e13",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f2horno2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1430,
        "y": 640,
        "wires": [
            [
                "2c4b2284e8024d30"
            ]
        ]
    },
    {
        "id": "b7d9aef79e4bab42",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F2H2",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-Horno2-[DPM-C530]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Current\" or r[\"_field\"] == \"CurrentB\" or r[\"_field\"] == \"CurrentC\" or r[\"_field\"] == \"Energy\" or r[\"_field\"] == \"Power\" or r[\"_field\"] == \"Voltage\" or r[\"_field\"] == \"VoltageB\" or r[\"_field\"] == \"VoltageC\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 1990,
        "y": 680,
        "wires": [
            [
                "9c6306dcb593d9a3",
                "1ef5c685e9ba3186",
                "982ab4342811a370"
            ]
        ]
    },
    {
        "id": "a163a9e3b4dd6a23",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 2100,
        "y": 620,
        "wires": []
    },
    {
        "id": "9c6306dcb593d9a3",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F2H2 = 'datosGraficoF2H2Cache';\nconst TIMESTAMP_KEY_F2H2 = 'datosGraficoF2H2Timestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F2H2, msg.payload);\nflow.set(TIMESTAMP_KEY_F2H2, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 680,
        "wires": [
            [
                "a163a9e3b4dd6a23",
                "e3c3ad04c5a355f0"
            ]
        ]
    },
    {
        "id": "e3c3ad04c5a355f0",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2280,
        "y": 740,
        "wires": []
    },
    {
        "id": "2c4b2284e8024d30",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F2H2 = 'datosGraficoF2H2Cache';\nconst TIMESTAMP_KEY_F2H2 = 'datosGraficoF2H2Timestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_F2H2);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_F2H2);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 700,
        "wires": [
            [
                "96ba393aaf165ead",
                "a704e7b29deed505"
            ]
        ]
    },
    {
        "id": "a704e7b29deed505",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 640,
        "wires": [
            [
                "a163a9e3b4dd6a23",
                "867cc9dcd0466648"
            ],
            [
                "405ad748c90913d0",
                "b7d9aef79e4bab42"
            ]
        ]
    },
    {
        "id": "867cc9dcd0466648",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1760,
        "y": 580,
        "wires": []
    },
    {
        "id": "405ad748c90913d0",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1770,
        "y": 700,
        "wires": []
    },
    {
        "id": "96ba393aaf165ead",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1570,
        "y": 760,
        "wires": []
    },
    {
        "id": "5ae328815bf432d2",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f2silos",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1420,
        "y": 1000,
        "wires": [
            [
                "b95e1ebda75735a6"
            ]
        ]
    },
    {
        "id": "ae5190e19518a9ed",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F2Silos",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-silo-NyS-[ADAM6017]\" or r[\"_measurement\"] == \"F2-silo-cohete-[ADAM6017]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"silo_cohete\" or r[\"_field\"] == \"silo_norte\" or r[\"_field\"] == \"silo_sur\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 2000,
        "y": 1040,
        "wires": [
            [
                "a5554466b85b84ea"
            ]
        ]
    },
    {
        "id": "41ab22b118cc1e2b",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 2100,
        "y": 980,
        "wires": []
    },
    {
        "id": "a5554466b85b84ea",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F2SiloNyS = 'datosGraficoF2SiloNySCache';\nconst TIMESTAMP_KEY_F2SiloNyS = 'datosGraficoF2SiloNySTimestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F2SiloNyS, msg.payload);\nflow.set(TIMESTAMP_KEY_F2SiloNyS, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1040,
        "wires": [
            [
                "41ab22b118cc1e2b",
                "787fc644b96dcb78"
            ]
        ]
    },
    {
        "id": "787fc644b96dcb78",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2280,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b95e1ebda75735a6",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F2SiloNyS = 'datosGraficoF2SiloNySCache';\nconst TIMESTAMP_KEY_F2SiloNyS = 'datosGraficoF2SiloNySTimestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_F2SiloNyS);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_F2SiloNyS);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1060,
        "wires": [
            [
                "5f3255addbb80895",
                "21b3b25fd0be369c"
            ]
        ]
    },
    {
        "id": "21b3b25fd0be369c",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 1000,
        "wires": [
            [
                "41ab22b118cc1e2b",
                "9236a09747cc7e9c"
            ],
            [
                "0a457d2f8c9ad0a3",
                "ae5190e19518a9ed"
            ]
        ]
    },
    {
        "id": "9236a09747cc7e9c",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1760,
        "y": 940,
        "wires": []
    },
    {
        "id": "0a457d2f8c9ad0a3",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1770,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5f3255addbb80895",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1570,
        "y": 1120,
        "wires": []
    },
    {
        "id": "cb3e75d090659492",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f2lechofluidizado",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1450,
        "y": 1340,
        "wires": [
            [
                "31337f8f332e3b71"
            ]
        ]
    },
    {
        "id": "efac8a4d6759b19b",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F2Silos",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-Temp-Lecho\" or r[\"_measurement\"] == \"F2-Bombona-Shakeout\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Presion_bombona\" or r[\"_field\"] == \"Presion_entrada\" or r[\"_field\"] == \"Tin_agua\" or r[\"_field\"] == \"Tin_arena\" or r[\"_field\"] == \"Tout_agua\" or r[\"_field\"] == \"Tout_arena\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 2000,
        "y": 1380,
        "wires": [
            [
                "a490788d8ddf49a1"
            ]
        ]
    },
    {
        "id": "7f83117379a0c1ad",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 2100,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a490788d8ddf49a1",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F2lechoFluidizado = 'datosGraficoF2lechoFluidizadoCache';\nconst TIMESTAMP_KEY_F2lechoFluidizado = 'datosGraficoF2lechoFluidizadoTimestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F2lechoFluidizado, msg.payload);\nflow.set(TIMESTAMP_KEY_F2lechoFluidizado, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1380,
        "wires": [
            [
                "7f83117379a0c1ad",
                "6b98fc6706c61751"
            ]
        ]
    },
    {
        "id": "6b98fc6706c61751",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2280,
        "y": 1440,
        "wires": []
    },
    {
        "id": "31337f8f332e3b71",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F2lechoFluidizado = 'datosGraficoF2lechoFluidizadoCache';\nconst TIMESTAMP_KEY_F2lechoFluidizado = 'datosGraficoF2lechoFluidizadoTimestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_F2lechoFluidizado);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_F2lechoFluidizado);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1400,
        "wires": [
            [
                "d6ef77e73482a32a",
                "f6e6f5869777cf95"
            ]
        ]
    },
    {
        "id": "f6e6f5869777cf95",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 1340,
        "wires": [
            [
                "7f83117379a0c1ad",
                "605e37915aefb416"
            ],
            [
                "af585a68aa0c35ac",
                "efac8a4d6759b19b"
            ]
        ]
    },
    {
        "id": "605e37915aefb416",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1760,
        "y": 1280,
        "wires": []
    },
    {
        "id": "af585a68aa0c35ac",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1770,
        "y": 1400,
        "wires": []
    },
    {
        "id": "d6ef77e73482a32a",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1570,
        "y": 1460,
        "wires": []
    },
    {
        "id": "75f73e9968cb7738",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/f2ttermicos",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1430,
        "y": 1660,
        "wires": [
            [
                "1e1670b61f85a393"
            ]
        ]
    },
    {
        "id": "113aad57609121ed",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F2ttermicos",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-TT-[ADAM-6018]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"TT_horno1_F2\" or r[\"_field\"] == \"TT_horno2_F2\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 2010,
        "y": 1700,
        "wires": [
            [
                "641a8f9ffeaf1234"
            ]
        ]
    },
    {
        "id": "1fac83aba544ce3f",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 2100,
        "y": 1640,
        "wires": []
    },
    {
        "id": "641a8f9ffeaf1234",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F2ttermicos = 'datosGraficoF2ttermicosCache';\nconst TIMESTAMP_KEY_F2ttermicos = 'datosGraficoF2ttermicosTimestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F2ttermicos, msg.payload);\nflow.set(TIMESTAMP_KEY_F2ttermicos, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1700,
        "wires": [
            [
                "1fac83aba544ce3f",
                "24cd4997a14f5eab"
            ]
        ]
    },
    {
        "id": "24cd4997a14f5eab",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2280,
        "y": 1760,
        "wires": []
    },
    {
        "id": "1e1670b61f85a393",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_F2ttermicos = 'datosGraficoF2ttermicosCache';\nconst TIMESTAMP_KEY_F2ttermicos = 'datosGraficoF2ttermicosTimestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_F2ttermicos);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_F2ttermicos);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1720,
        "wires": [
            [
                "8a5151b2c69b4ca5",
                "17d3410e876508f5"
            ]
        ]
    },
    {
        "id": "17d3410e876508f5",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 1660,
        "wires": [
            [
                "1fac83aba544ce3f",
                "04e2494f18f483e4"
            ],
            [
                "56d7cd70719a41dc",
                "113aad57609121ed"
            ]
        ]
    },
    {
        "id": "04e2494f18f483e4",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1760,
        "y": 1600,
        "wires": []
    },
    {
        "id": "56d7cd70719a41dc",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1770,
        "y": 1720,
        "wires": []
    },
    {
        "id": "8a5151b2c69b4ca5",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1570,
        "y": 1780,
        "wires": []
    },
    {
        "id": "8cc38f86717ec6da",
        "type": "http in",
        "z": "eb65df9c7eb63c1b",
        "name": "",
        "url": "api/kpi",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2770,
        "y": 280,
        "wires": [
            [
                "e7556d9b380299fc"
            ]
        ]
    },
    {
        "id": "71b2c937ea80456c",
        "type": "influxdb in",
        "z": "eb65df9c7eb63c1b",
        "influxdb": "901545a3e9d96401",
        "name": "F2H1",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: -10h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-Horno1-[COUNTIS-E53]\")\n  |> filter(fn: (r) => r[\"_field\"] == \"Power\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 3350,
        "y": 320,
        "wires": [
            [
                "76dc6885b43c507e"
            ]
        ]
    },
    {
        "id": "f1f4f9eb1b61e03b",
        "type": "http response",
        "z": "eb65df9c7eb63c1b",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 3460,
        "y": 260,
        "wires": []
    },
    {
        "id": "76dc6885b43c507e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_KPI = 'datosKPICache';\nconst TIMESTAMP_KEY_KPI = 'datosKPITimestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_KPI, msg.payload);\nflow.set(TIMESTAMP_KEY_KPI, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 320,
        "wires": [
            [
                "f1f4f9eb1b61e03b",
                "cb4284cdd0dbca86"
            ]
        ]
    },
    {
        "id": "cb4284cdd0dbca86",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Datos guardados en cache",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3640,
        "y": 380,
        "wires": []
    },
    {
        "id": "e7556d9b380299fc",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "Verificar cach√©",
        "func": "const CACHE_KEY_KPI = 'datosKPICache';\nconst TIMESTAMP_KEY_KPI = 'datosKPITimestamp';\nconst CACHE_DURATION_MS = 1 * 60 * 1000; //Tiempo en minutos\n//----------------------------------------------------------------\n\n//Obtener datos y timestamp del flow context\nlet cacheData = flow.get(CACHE_KEY_KPI);\nlet cacheTimestamp = flow.get(TIMESTAMP_KEY_KPI);\nlet now = Date.now();\n\n//verificar si el cach√© existe y si es valido\nif (cacheData && cacheTimestamp && (now - cacheTimestamp < CACHE_DURATION_MS))\n{\n    //si es True, el cache es valido, y se usa\n    msg.payload = cacheData;\n    msg.useCache = 1; //Se a√±ade un flag para saber si usamos cache\n} else {\n    \n    //si el cache no existe o ha expirado, se necesita consultar datos nuevos\n    msg.useCache = 0;\n    node.log(\"Cache invalido o no existe. Consultando datos nuevos...\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 340,
        "wires": [
            [
                "5a9be5db2ceafd2f",
                "7c0d65fcd7bdfd02"
            ]
        ]
    },
    {
        "id": "7c0d65fcd7bdfd02",
        "type": "switch",
        "z": "eb65df9c7eb63c1b",
        "name": "Usar cache?",
        "property": "useCache",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3110,
        "y": 280,
        "wires": [
            [
                "f1f4f9eb1b61e03b",
                "4558a47e2ac8814e"
            ],
            [
                "b298cdb10a1d6b8b",
                "71b2c937ea80456c"
            ]
        ]
    },
    {
        "id": "4558a47e2ac8814e",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "Si usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3120,
        "y": 220,
        "wires": []
    },
    {
        "id": "b298cdb10a1d6b8b",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "No usar cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3130,
        "y": 340,
        "wires": []
    },
    {
        "id": "5a9be5db2ceafd2f",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "useCache",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2930,
        "y": 400,
        "wires": []
    },
    {
        "id": "2217a19bbd841106",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H1",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "f7e558a973c37062",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 6",
        "func": "// --- Constantes de Configuraci√≥n ---\nconst HORA_INICIO_LABORAL_CHILE = 6;\nconst MINUTOS_INICIO_LABORAL_CHILE = 0;\nconst HORA_FIN_LABORAL_CHILE = 18;\nconst MINUTOS_FIN_LABORAL_CHILE = 0;\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Determinar Fecha y Hora Actual en Chile ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\nconst horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\nconst minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// --- Contadores y Sets ---\nlet minutosDeUsoHoyHorarioLaboral = new Set();\nlet todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n// Variables para KPIs de energ√≠a con ACUMULADOR, enfocadas en valores > 0\nlet primerValorEnergyActivo = { timestampOriginal: null, value: null };\nlet ultimoValorEnergyActivo = { timestampOriginal: null, value: null };\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const timestampMinutoUtcIso = fechaRecordUtcOriginal.toISOString();\n\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                if (record._field === \"Energy\") {\n                    todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                    if (record._value > 350) { // Solo considerar para tiempo de uso y para KPIs de consumo si > 0\n                        minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                        // --- CORRECCI√ìN: Capturar primer y √∫ltimo valor del acumulador \"Energy\" SI ES > 0 ---\n                        if (primerValorEnergyActivo.timestampOriginal === null) {\n                            primerValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                            primerValorEnergyActivo.value = record._value;\n                        }\n                        // Siempre actualizar el √∫ltimo valor activo, ya que los datos vienen ordenados por tiempo\n                        ultimoValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                        ultimoValorEnergyActivo.value = record._value;\n                        // --- FIN CORRECCI√ìN ---\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- C√°lculos de Tiempo de Uso/No Uso y Porcentajes ---\nconst numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\nconst inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\nconst finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\nconst actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\nlet minutosReferenciaParaNoUsoHoy = 0;\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n} else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n}\nminutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\nconst tiempoDeUsoMinutos = numMinutosDeUsoHoy;\nlet tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\ntiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\nlet porcentajeUso = 0;\nlet porcentajeNoUso = 0;\nif (minutosReferenciaParaNoUsoHoy > 0) {\n    porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n    porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n}\n\n// --- Calcular KPIs de Consumo Energ√©tico para ACUMULADOR (simplificado) ---\nlet consumoTotalKWh = 0;\nlet valorInicialParaConsumo = (primerValorEnergyActivo.value !== null) ? primerValorEnergyActivo.value : null;\nlet valorFinalParaConsumo = (ultimoValorEnergyActivo.value !== null) ? ultimoValorEnergyActivo.value : null;\n\nif (valorInicialParaConsumo !== null && valorFinalParaConsumo !== null) {\n    consumoTotalKWh = valorFinalParaConsumo - valorInicialParaConsumo;\n    if (consumoTotalKWh < 0) { \n        // Esto puede ocurrir si el contador se resetea o hay datos an√≥malos.\n        // node.warn(`Consumo calculado negativo (${consumoTotalKWh} kWh). Valor inicial: ${valorInicialParaConsumo}, Valor final: ${valorFinalParaConsumo}. Se establecer√° a 0.`);\n        consumoTotalKWh = 0; \n    }\n}\n\n// --- Definir Hora de Inicio y Fin del Periodo ---\nconst inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\nlet finHorarioLaboralConsideradoHoyStr = \"\";\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n} else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n} else {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n}\n\n// --- Formatear Resultados ---\nmsg.topic = \"kpiParaHornoPrincipal\";\nmsg.payload = {\n    tiempoDeUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeUsoMinutos,\n        horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeUso.toFixed(2))\n    },\n    tiempoDeNoUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeNoUsoMinutos,\n        horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeNoUso.toFixed(2))\n    },\n    // --- SECCI√ìN DE KPIs ENERG√âTICOS SIMPLIFICADA ---\n    kpisConsumoEnergeticoDiaActual: {\n        valorInicialAcumuladorKWh: (valorInicialParaConsumo !== null) ? parseFloat(valorInicialParaConsumo.toFixed(3)) : null,\n        timestampValorInicialUTC: primerValorEnergyActivo.timestampOriginal,\n        valorFinalAcumuladorKWh: (valorFinalParaConsumo !== null) ? parseFloat(valorFinalParaConsumo.toFixed(3)) : null,\n        timestampValorFinalUTC: ultimoValorEnergyActivo.timestampOriginal,\n        consumoTotalEstimadoKWh: parseFloat(consumoTotalKWh.toFixed(3)),\n        // Los tiempos de inicio y fin del horario ya est√°n en contextoCalculo.periodoAnalizadoDiaActual\n        notaImportante: \"Consumo = (Valor Final Activo - Valor Inicial Activo) del acumulador 'Energy' (kWh). Valores Activos: primer/√∫ltimo registro del d√≠a/horario laboral con _value > 0. El _value es el promedio del contador acumulado en su respectivo minuto.\"\n    },\n    contextoCalculo: {\n        fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n        horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n        periodoAnalizadoDiaActual: { // Estos son el tiempo de inicio y t√©rmino horario Chile que solicitaste\n          inicio: inicioHorarioLaboralHoyStr,\n          fin: finHorarioLaboralConsideradoHoyStr\n        },\n        minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n        offsetUtcUtilizado: OFFSET_CHILE_UTC,\n        definicionHorarioLaboral: \n            `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n            `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n    },\n    diagnosticoDatosDiaActual: {\n        minutosUnicosConAlgunRegistroDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n        minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy \n    }\n};\n\nreturn msg;\n\n\n// // --- Constantes de Configuraci√≥n ---\n// const HORA_INICIO_LABORAL_CHILE = 7;\n// const MINUTOS_INICIO_LABORAL_CHILE = 30;\n// const HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0;\n// const OFFSET_CHILE_UTC = -4;\n\n// // --- Determinar Fecha y Hora Actual en Chile ---\n// const ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\n// const anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\n// const mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\n// const diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n// const horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\n// const minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// // --- Contadores y Sets ---\n// let minutosDeUsoHoyHorarioLaboral = new Set();\n// let minutosConEnergyCeroHoyHorarioLaboral = new Set();\n// let todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n\n// // --- Procesamiento de Datos ---\n// if (msg.payload && Array.isArray(msg.payload)) {\n//     msg.payload.forEach(record => {\n//         if (record === null || typeof record !== 'object' ||\n//             !record._time || record._field === undefined || record._value === undefined) {\n//             return;\n//         }\n\n//         const fechaRecordUtc = new Date(record._time);\n//         const timestampMinutoUtcIso = fechaRecordUtc.toISOString();\n\n//         const recordEnChile_DateObj = new Date(fechaRecordUtc.getTime() + OFFSET_CHILE_UTC * 3600000);\n//         const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n//         const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n//         const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n//         const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n//         const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n\n//         if (anioRecordChile === anioActualChile &&\n//             mesRecordChile === mesActualChile &&\n//             diaRecordChile === diaActualChile) {\n\n//             const esDespuesOIgualAlInicioLaboral =\n//                 (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n//                 (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n//             const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n//             const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n//             if (enHorarioLaboral) {\n//                 if (record._field === \"Energy\") {\n//                     todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                     if (record._value > 0) {\n//                         minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         if (minutosConEnergyCeroHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.delete(timestampMinutoUtcIso);\n//                         }\n//                     } else {\n//                         if (!minutosDeUsoHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     });\n// }\n\n// // --- C√°lculos Finales ---\n// const numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\n\n// const inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\n// const finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\n// const actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\n\n// let minutosReferenciaParaNoUsoHoy = 0;\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else {\n//     minutosReferenciaParaNoUsoHoy = 0;\n// }\n// minutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\n\n// const tiempoDeUsoMinutos = numMinutosDeUsoHoy;\n// let tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\n// tiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\n\n// // --- Calcular Porcentajes de Uso y No Uso ---\n// let porcentajeUso = 0;\n// let porcentajeNoUso = 0;\n\n// if (minutosReferenciaParaNoUsoHoy > 0) {\n//     porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n//     porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n// } else {\n//     // Si minutosReferenciaParaNoUsoHoy es 0 (ej. antes del inicio del horario laboral),\n//     // tiempoDeUsoMinutos y tiempoDeNoUsoMinutos tambi√©n ser√°n 0.\n//     // Por lo tanto, los porcentajes son 0%.\n//     porcentajeUso = 0;\n//     porcentajeNoUso = 0;\n// }\n\n// // --- Definir Hora de Inicio y Fin del Periodo ---\n// const inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\n// let finHorarioLaboralConsideradoHoyStr = \"\";\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n// } else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// } else {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// }\n\n// // --- Formatear Resultados ---\n// msg.payload = {\n//     tiempoDeUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeUsoMinutos,\n//         horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeUso.toFixed(2)) // NUEVO\n//     },\n//     tiempoDeNoUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeNoUsoMinutos,\n//         horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeNoUso.toFixed(2)) // NUEVO\n//     },\n//     contextoCalculo: {\n//         fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n//         horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n//         periodoAnalizadoDiaActual: {\n//             inicio: inicioHorarioLaboralHoyStr,\n//             fin: finHorarioLaboralConsideradoHoyStr\n//         },\n//         minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n//         offsetUtcUtilizado: OFFSET_CHILE_UTC,\n//         definicionHorarioLaboral:\n//             `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n//             `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n//     },\n//     diagnosticoDatosDiaActual: {\n//         minutosUnicosConDatosDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n//         minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy,\n//         minutosUnicosConEnergyCeroDetectadosHoyEnHorarioLaboral: minutosConEnergyCeroHoyHorarioLaboral.size\n//     }\n// };\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 440,
        "wires": [
            [
                "2217a19bbd841106",
                "054daedda561c57a"
            ]
        ]
    },
    {
        "id": "272f2f8c446b3583",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 7",
        "func": "// --- Constantes de Configuraci√≥n para Detecci√≥n de Coladas ---\nconst UMBRAL_POTENCIA_ALTA = 75; // kW - Umbral para considerar que la fusi√≥n ha comenzado/continuado\nconst UMBRAL_POTENCIA_BAJA = 25; // kW - Umbral por debajo del cual se considera baja potencia/posible fin\nconst TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS = 10 * 60 * 1000; // 10 minutos en milisegundos\nconst TIEMPO_MINIMO_FUSION_MS = 10 * 60 * 1000; // Opcional: 5 minutos de fusi√≥n para ser colada v√°lida\n\n// --- Constantes de Horario Laboral y Offset (copiadas del nodo anterior) ---\nconst HORA_INICIO_LABORAL_CHILE = 7;\nconst MINUTOS_INICIO_LABORAL_CHILE = 30;\nconst HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0; // No se usa directamente si el fin es HORA_FIN < VALOR\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Variables de Estado y Contadores ---\nlet contadorColadasDiaActual = 0;\nlet estadoHorno = \"APAGADO\"; // Estados: APAGADO, FUSIONANDO, POSIBLE_FIN_COLADA\nlet timestampInicioFusion = null;\nlet timestampInicioBajaPotencia = null;\n\n// --- Determinar Fecha Actual en Chile (para filtrar datos) ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    // Filtrar y ordenar por tiempo primero (si no viene ordenado, crucial)\n    // Se asume que msg.payload ya est√° ordenado por InfluxDB\n    \n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        // Considerar solo registros de Potencia para este KPI\n        if (record._field !== \"Power\") {\n            return;\n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        // Filtro por d√≠a actual y horario laboral\n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                const potenciaActual = record._value;\n                const tiempoActualMs = fechaRecordUtcOriginal.getTime();\n\n                if (estadoHorno === \"APAGADO\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) {\n                        estadoHorno = \"FUSIONANDO\";\n                        timestampInicioFusion = tiempoActualMs;\n                        timestampInicioBajaPotencia = null; \n                    }\n                } else if (estadoHorno === \"FUSIONANDO\") {\n                    if (potenciaActual < UMBRAL_POTENCIA_BAJA) {\n                        estadoHorno = \"POSIBLE_FIN_COLADA\";\n                        timestampInicioBajaPotencia = tiempoActualMs;\n                    }\n                } else if (estadoHorno === \"POSIBLE_FIN_COLADA\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) { // Subi√≥ la potencia de nuevo\n                        estadoHorno = \"FUSIONANDO\"; // Volver a fusionando, fue bajada temporal\n                        timestampInicioBajaPotencia = null;\n                    } else { // Sigue en baja potencia\n                        if (timestampInicioBajaPotencia !== null) {\n                            const duracionBajaPotenciaMs = tiempoActualMs - timestampInicioBajaPotencia;\n                            if (duracionBajaPotenciaMs >= TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS) {\n                                // Condici√≥n de tiempo de baja potencia cumplida\n                                // Verificar tambi√©n el tiempo m√≠nimo de fusi√≥n (opcional pero recomendado)\n                                if (timestampInicioFusion !== null) {\n                                    const duracionFusionMs = timestampInicioBajaPotencia - timestampInicioFusion; // Tiempo desde inicio fusi√≥n hasta inicio de esta baja larga\n                                    if (duracionFusionMs >= TIEMPO_MINIMO_FUSION_MS) {\n                                        contadorColadasDiaActual++;\n                                    }\n                                } else {\n                                    // Si no hay timestampInicioFusion pero llegamos aqu√≠, es un estado raro.\n                                    // Podr√≠a ser que empez√≥ en POSIBLE_FIN_COLADA. Lo seguro es contar si hay fusi√≥n previa.\n                                }\n                                estadoHorno = \"APAGADO\"; // Resetear para la pr√≥xima colada\n                                timestampInicioFusion = null; // Importante resetear\n                                timestampInicioBajaPotencia = null;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- Preparar Salida ---\n// Puedes a√±adir este KPI al payload del mensaje original si este nodo sigue a otro,\n// o crear un nuevo mensaje. Aqu√≠ creo un nuevo objeto en msg.kpiColadas.\nif (!msg.kpiColadas) {\n    msg.kpiColadas = {};\n}\nmsg.kpiColadas.cantidadColadasDiaActual = contadorColadasDiaActual;\nmsg.kpiColadas.diaAnalizado = `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`;\nmsg.kpiColadas.nota = \"Estimaci√≥n basada en patrones de potencia. Ajustar umbrales seg√∫n operaci√≥n real.\";\n// Puedes tambi√©n pasar los umbrales usados para referencia\nmsg.kpiColadas.umbralesConfigurados = {\n    UMBRAL_POTENCIA_ALTA_kW: UMBRAL_POTENCIA_ALTA,\n    UMBRAL_POTENCIA_BAJA_kW: UMBRAL_POTENCIA_BAJA,\n    TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_min: TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS / (60 * 1000),\n    TIEMPO_MINIMO_FUSION_min: TIEMPO_MINIMO_FUSION_MS / (60 * 1000)\n};\n\n// Si quieres que este nodo env√≠e su propio mensaje independiente:\n// return { payload: { kpiColadas: msg.kpiColadas } };\n// Si quieres a√±adirlo al mensaje existente y pasarlo:\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 480,
        "wires": [
            [
                "3b2ef16d5f161a59"
            ]
        ]
    },
    {
        "id": "3b2ef16d5f161a59",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H1coladas",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "kpiColadas",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 940,
        "y": 520,
        "wires": []
    },
    {
        "id": "a30f2c7f91e77843",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 2",
        "func": "// --- Constantes de Configuraci√≥n para Detecci√≥n de Coladas ---\nconst UMBRAL_POTENCIA_ALTA = 75; // kW - Umbral para considerar que la fusi√≥n ha comenzado/continuado\nconst UMBRAL_POTENCIA_BAJA = 25; // kW - Umbral por debajo del cual se considera baja potencia/posible fin\nconst TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS = 1 * 60 * 1000; // 10 minutos en milisegundos\nconst TIEMPO_MINIMO_FUSION_MS = 10 * 60 * 1000; // Opcional: 5 minutos de fusi√≥n para ser colada v√°lida\n\n// --- Constantes de Horario Laboral y Offset (copiadas del nodo anterior) ---\nconst HORA_INICIO_LABORAL_CHILE = 7;\nconst MINUTOS_INICIO_LABORAL_CHILE = 30;\nconst HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0; // No se usa directamente si el fin es HORA_FIN < VALOR\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Variables de Estado y Contadores ---\nlet contadorColadasDiaActual = 0;\nlet estadoHorno = \"APAGADO\"; // Estados: APAGADO, FUSIONANDO, POSIBLE_FIN_COLADA\nlet timestampInicioFusion = null;\nlet timestampInicioBajaPotencia = null;\n\n// --- Determinar Fecha Actual en Chile (para filtrar datos) ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    // Filtrar y ordenar por tiempo primero (si no viene ordenado, crucial)\n    // Se asume que msg.payload ya est√° ordenado por InfluxDB\n    \n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        // Considerar solo registros de Potencia para este KPI\n        if (record._field !== \"Power\") {\n            return;\n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        // Filtro por d√≠a actual y horario laboral\n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                const potenciaActual = record._value;\n                const tiempoActualMs = fechaRecordUtcOriginal.getTime();\n\n                if (estadoHorno === \"APAGADO\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) {\n                        estadoHorno = \"FUSIONANDO\";\n                        timestampInicioFusion = tiempoActualMs;\n                        timestampInicioBajaPotencia = null; \n                    }\n                } else if (estadoHorno === \"FUSIONANDO\") {\n                    if (potenciaActual < UMBRAL_POTENCIA_BAJA) {\n                        estadoHorno = \"POSIBLE_FIN_COLADA\";\n                        timestampInicioBajaPotencia = tiempoActualMs;\n                    }\n                } else if (estadoHorno === \"POSIBLE_FIN_COLADA\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) { // Subi√≥ la potencia de nuevo\n                        estadoHorno = \"FUSIONANDO\"; // Volver a fusionando, fue bajada temporal\n                        timestampInicioBajaPotencia = null;\n                    } else { // Sigue en baja potencia\n                        if (timestampInicioBajaPotencia !== null) {\n                            const duracionBajaPotenciaMs = tiempoActualMs - timestampInicioBajaPotencia;\n                            if (duracionBajaPotenciaMs >= TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS) {\n                                // Condici√≥n de tiempo de baja potencia cumplida\n                                // Verificar tambi√©n el tiempo m√≠nimo de fusi√≥n (opcional pero recomendado)\n                                if (timestampInicioFusion !== null) {\n                                    const duracionFusionMs = timestampInicioBajaPotencia - timestampInicioFusion; // Tiempo desde inicio fusi√≥n hasta inicio de esta baja larga\n                                    if (duracionFusionMs >= TIEMPO_MINIMO_FUSION_MS) {\n                                        contadorColadasDiaActual++;\n                                    }\n                                } else {\n                                    // Si no hay timestampInicioFusion pero llegamos aqu√≠, es un estado raro.\n                                    // Podr√≠a ser que empez√≥ en POSIBLE_FIN_COLADA. Lo seguro es contar si hay fusi√≥n previa.\n                                }\n                                estadoHorno = \"APAGADO\"; // Resetear para la pr√≥xima colada\n                                timestampInicioFusion = null; // Importante resetear\n                                timestampInicioBajaPotencia = null;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- Preparar Salida ---\n// Puedes a√±adir este KPI al payload del mensaje original si este nodo sigue a otro,\n// o crear un nuevo mensaje. Aqu√≠ creo un nuevo objeto en msg.kpiColadas.\nif (!msg.kpiColadas) {\n    msg.kpiColadas = {};\n}\nmsg.kpiColadas.cantidadColadasDiaActual = contadorColadasDiaActual;\nmsg.kpiColadas.diaAnalizado = `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`;\nmsg.kpiColadas.nota = \"Estimaci√≥n basada en patrones de potencia. Ajustar umbrales seg√∫n operaci√≥n real.\";\n// Puedes tambi√©n pasar los umbrales usados para referencia\nmsg.kpiColadas.umbralesConfigurados = {\n    UMBRAL_POTENCIA_ALTA_kW: UMBRAL_POTENCIA_ALTA,\n    UMBRAL_POTENCIA_BAJA_kW: UMBRAL_POTENCIA_BAJA,\n    TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_min: TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS / (60 * 1000),\n    TIEMPO_MINIMO_FUSION_min: TIEMPO_MINIMO_FUSION_MS / (60 * 1000)\n};\n\n// Si quieres que este nodo env√≠e su propio mensaje independiente:\n// return { payload: { kpiColadas: msg.kpiColadas } };\n// Si quieres a√±adirlo al mensaje existente y pasarlo:\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 460,
        "wires": [
            [
                "e401794aa029eddc"
            ]
        ]
    },
    {
        "id": "e401794aa029eddc",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "coladasF2H1",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "kpiColadas",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2180,
        "y": 460,
        "wires": []
    },
    {
        "id": "1ef5c685e9ba3186",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 3",
        "func": "// --- Constantes de Configuraci√≥n para Detecci√≥n de Coladas ---\nconst UMBRAL_POTENCIA_ALTA = 75; // kW - Umbral para considerar que la fusi√≥n ha comenzado/continuado\nconst UMBRAL_POTENCIA_BAJA = 25; // kW - Umbral por debajo del cual se considera baja potencia/posible fin\nconst TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS = 1 * 60 * 1000; // 10 minutos en milisegundos\nconst TIEMPO_MINIMO_FUSION_MS = 10 * 60 * 1000; // Opcional: 5 minutos de fusi√≥n para ser colada v√°lida\n\n// --- Constantes de Horario Laboral y Offset (copiadas del nodo anterior) ---\nconst HORA_INICIO_LABORAL_CHILE = 7;\nconst MINUTOS_INICIO_LABORAL_CHILE = 30;\nconst HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0; // No se usa directamente si el fin es HORA_FIN < VALOR\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Variables de Estado y Contadores ---\nlet contadorColadasDiaActual = 0;\nlet estadoHorno = \"APAGADO\"; // Estados: APAGADO, FUSIONANDO, POSIBLE_FIN_COLADA\nlet timestampInicioFusion = null;\nlet timestampInicioBajaPotencia = null;\n\n// --- Determinar Fecha Actual en Chile (para filtrar datos) ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    // Filtrar y ordenar por tiempo primero (si no viene ordenado, crucial)\n    // Se asume que msg.payload ya est√° ordenado por InfluxDB\n    \n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        // Considerar solo registros de Potencia para este KPI\n        if (record._field !== \"Power\") {\n            return;\n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        // Filtro por d√≠a actual y horario laboral\n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                const potenciaActual = record._value;\n                const tiempoActualMs = fechaRecordUtcOriginal.getTime();\n\n                if (estadoHorno === \"APAGADO\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) {\n                        estadoHorno = \"FUSIONANDO\";\n                        timestampInicioFusion = tiempoActualMs;\n                        timestampInicioBajaPotencia = null; \n                    }\n                } else if (estadoHorno === \"FUSIONANDO\") {\n                    if (potenciaActual < UMBRAL_POTENCIA_BAJA) {\n                        estadoHorno = \"POSIBLE_FIN_COLADA\";\n                        timestampInicioBajaPotencia = tiempoActualMs;\n                    }\n                } else if (estadoHorno === \"POSIBLE_FIN_COLADA\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) { // Subi√≥ la potencia de nuevo\n                        estadoHorno = \"FUSIONANDO\"; // Volver a fusionando, fue bajada temporal\n                        timestampInicioBajaPotencia = null;\n                    } else { // Sigue en baja potencia\n                        if (timestampInicioBajaPotencia !== null) {\n                            const duracionBajaPotenciaMs = tiempoActualMs - timestampInicioBajaPotencia;\n                            if (duracionBajaPotenciaMs >= TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS) {\n                                // Condici√≥n de tiempo de baja potencia cumplida\n                                // Verificar tambi√©n el tiempo m√≠nimo de fusi√≥n (opcional pero recomendado)\n                                if (timestampInicioFusion !== null) {\n                                    const duracionFusionMs = timestampInicioBajaPotencia - timestampInicioFusion; // Tiempo desde inicio fusi√≥n hasta inicio de esta baja larga\n                                    if (duracionFusionMs >= TIEMPO_MINIMO_FUSION_MS) {\n                                        contadorColadasDiaActual++;\n                                    }\n                                } else {\n                                    // Si no hay timestampInicioFusion pero llegamos aqu√≠, es un estado raro.\n                                    // Podr√≠a ser que empez√≥ en POSIBLE_FIN_COLADA. Lo seguro es contar si hay fusi√≥n previa.\n                                }\n                                estadoHorno = \"APAGADO\"; // Resetear para la pr√≥xima colada\n                                timestampInicioFusion = null; // Importante resetear\n                                timestampInicioBajaPotencia = null;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- Preparar Salida ---\n// Puedes a√±adir este KPI al payload del mensaje original si este nodo sigue a otro,\n// o crear un nuevo mensaje. Aqu√≠ creo un nuevo objeto en msg.kpiColadas.\nif (!msg.kpiColadas) {\n    msg.kpiColadas = {};\n}\nmsg.kpiColadas.cantidadColadasDiaActual = contadorColadasDiaActual;\nmsg.kpiColadas.diaAnalizado = `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`;\nmsg.kpiColadas.nota = \"Estimaci√≥n basada en patrones de potencia. Ajustar umbrales seg√∫n operaci√≥n real.\";\n// Puedes tambi√©n pasar los umbrales usados para referencia\nmsg.kpiColadas.umbralesConfigurados = {\n    UMBRAL_POTENCIA_ALTA_kW: UMBRAL_POTENCIA_ALTA,\n    UMBRAL_POTENCIA_BAJA_kW: UMBRAL_POTENCIA_BAJA,\n    TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_min: TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS / (60 * 1000),\n    TIEMPO_MINIMO_FUSION_min: TIEMPO_MINIMO_FUSION_MS / (60 * 1000)\n};\n\n// Si quieres que este nodo env√≠e su propio mensaje independiente:\n// return { payload: { kpiColadas: msg.kpiColadas } };\n// Si quieres a√±adirlo al mensaje existente y pasarlo:\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 840,
        "wires": [
            [
                "60096e659a56d528"
            ]
        ]
    },
    {
        "id": "60096e659a56d528",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "coladasF2H2",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "kpiColadas",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2140,
        "y": 840,
        "wires": []
    },
    {
        "id": "81652c633c2a794d",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "tiempoUsoF2H1",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2190,
        "y": 420,
        "wires": []
    },
    {
        "id": "83d8578f0c47834a",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 4",
        "func": "// --- Constantes de Configuraci√≥n ---\nconst HORA_INICIO_LABORAL_CHILE = 6;\nconst MINUTOS_INICIO_LABORAL_CHILE = 0;\nconst HORA_FIN_LABORAL_CHILE = 18;\nconst MINUTOS_FIN_LABORAL_CHILE = 0;\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Determinar Fecha y Hora Actual en Chile ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\nconst horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\nconst minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// --- Contadores y Sets ---\nlet minutosDeUsoHoyHorarioLaboral = new Set();\nlet todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n// Variables para KPIs de energ√≠a con ACUMULADOR, enfocadas en valores > 0\nlet primerValorEnergyActivo = { timestampOriginal: null, value: null };\nlet ultimoValorEnergyActivo = { timestampOriginal: null, value: null };\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const timestampMinutoUtcIso = fechaRecordUtcOriginal.toISOString();\n\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                if (record._field === \"Energy\") {\n                    todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                    if (record._value > 350) { // Solo considerar para tiempo de uso y para KPIs de consumo si > 0\n                        minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                        // --- CORRECCI√ìN: Capturar primer y √∫ltimo valor del acumulador \"Energy\" SI ES > 0 ---\n                        if (primerValorEnergyActivo.timestampOriginal === null) {\n                            primerValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                            primerValorEnergyActivo.value = record._value;\n                        }\n                        // Siempre actualizar el √∫ltimo valor activo, ya que los datos vienen ordenados por tiempo\n                        ultimoValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                        ultimoValorEnergyActivo.value = record._value;\n                        // --- FIN CORRECCI√ìN ---\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- C√°lculos de Tiempo de Uso/No Uso y Porcentajes ---\nconst numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\nconst inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\nconst finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\nconst actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\nlet minutosReferenciaParaNoUsoHoy = 0;\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n} else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n}\nminutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\nconst tiempoDeUsoMinutos = numMinutosDeUsoHoy;\nlet tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\ntiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\nlet porcentajeUso = 0;\nlet porcentajeNoUso = 0;\nif (minutosReferenciaParaNoUsoHoy > 0) {\n    porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n    porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n}\n\n// --- Calcular KPIs de Consumo Energ√©tico para ACUMULADOR (simplificado) ---\nlet consumoTotalKWh = 0;\nlet valorInicialParaConsumo = (primerValorEnergyActivo.value !== null) ? primerValorEnergyActivo.value : null;\nlet valorFinalParaConsumo = (ultimoValorEnergyActivo.value !== null) ? ultimoValorEnergyActivo.value : null;\n\nif (valorInicialParaConsumo !== null && valorFinalParaConsumo !== null) {\n    consumoTotalKWh = valorFinalParaConsumo - valorInicialParaConsumo;\n    if (consumoTotalKWh < 0) { \n        // Esto puede ocurrir si el contador se resetea o hay datos an√≥malos.\n        // node.warn(`Consumo calculado negativo (${consumoTotalKWh} kWh). Valor inicial: ${valorInicialParaConsumo}, Valor final: ${valorFinalParaConsumo}. Se establecer√° a 0.`);\n        consumoTotalKWh = 0; \n    }\n}\n\n// --- Definir Hora de Inicio y Fin del Periodo ---\nconst inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\nlet finHorarioLaboralConsideradoHoyStr = \"\";\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n} else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n} else {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n}\n\n// --- Formatear Resultados ---\nmsg.payload = {\n    tiempoDeUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeUsoMinutos,\n        horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeUso.toFixed(2))\n    },\n    tiempoDeNoUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeNoUsoMinutos,\n        horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeNoUso.toFixed(2))\n    },\n    // --- SECCI√ìN DE KPIs ENERG√âTICOS SIMPLIFICADA ---\n    kpisConsumoEnergeticoDiaActual: {\n        valorInicialAcumuladorKWh: (valorInicialParaConsumo !== null) ? parseFloat(valorInicialParaConsumo.toFixed(3)) : null,\n        timestampValorInicialUTC: primerValorEnergyActivo.timestampOriginal,\n        valorFinalAcumuladorKWh: (valorFinalParaConsumo !== null) ? parseFloat(valorFinalParaConsumo.toFixed(3)) : null,\n        timestampValorFinalUTC: ultimoValorEnergyActivo.timestampOriginal,\n        consumoTotalEstimadoKWh: parseFloat(consumoTotalKWh.toFixed(3)),\n        // Los tiempos de inicio y fin del horario ya est√°n en contextoCalculo.periodoAnalizadoDiaActual\n        notaImportante: \"Consumo = (Valor Final Activo - Valor Inicial Activo) del acumulador 'Energy' (kWh). Valores Activos: primer/√∫ltimo registro del d√≠a/horario laboral con _value > 0. El _value es el promedio del contador acumulado en su respectivo minuto.\"\n    },\n    contextoCalculo: {\n        fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n        horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n        periodoAnalizadoDiaActual: { // Estos son el tiempo de inicio y t√©rmino horario Chile que solicitaste\n          inicio: inicioHorarioLaboralHoyStr,\n          fin: finHorarioLaboralConsideradoHoyStr\n        },\n        minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n        offsetUtcUtilizado: OFFSET_CHILE_UTC,\n        definicionHorarioLaboral: \n            `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n            `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n    },\n    diagnosticoDatosDiaActual: {\n        minutosUnicosConAlgunRegistroDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n        minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy \n    }\n};\n\nreturn msg;\n\n\n// // --- Constantes de Configuraci√≥n ---\n// const HORA_INICIO_LABORAL_CHILE = 7;\n// const MINUTOS_INICIO_LABORAL_CHILE = 30;\n// const HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0;\n// const OFFSET_CHILE_UTC = -4;\n\n// // --- Determinar Fecha y Hora Actual en Chile ---\n// const ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\n// const anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\n// const mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\n// const diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n// const horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\n// const minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// // --- Contadores y Sets ---\n// let minutosDeUsoHoyHorarioLaboral = new Set();\n// let minutosConEnergyCeroHoyHorarioLaboral = new Set();\n// let todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n\n// // --- Procesamiento de Datos ---\n// if (msg.payload && Array.isArray(msg.payload)) {\n//     msg.payload.forEach(record => {\n//         if (record === null || typeof record !== 'object' ||\n//             !record._time || record._field === undefined || record._value === undefined) {\n//             return;\n//         }\n\n//         const fechaRecordUtc = new Date(record._time);\n//         const timestampMinutoUtcIso = fechaRecordUtc.toISOString();\n\n//         const recordEnChile_DateObj = new Date(fechaRecordUtc.getTime() + OFFSET_CHILE_UTC * 3600000);\n//         const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n//         const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n//         const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n//         const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n//         const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n\n//         if (anioRecordChile === anioActualChile &&\n//             mesRecordChile === mesActualChile &&\n//             diaRecordChile === diaActualChile) {\n\n//             const esDespuesOIgualAlInicioLaboral =\n//                 (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n//                 (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n//             const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n//             const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n//             if (enHorarioLaboral) {\n//                 if (record._field === \"Energy\") {\n//                     todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                     if (record._value > 0) {\n//                         minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         if (minutosConEnergyCeroHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.delete(timestampMinutoUtcIso);\n//                         }\n//                     } else {\n//                         if (!minutosDeUsoHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     });\n// }\n\n// // --- C√°lculos Finales ---\n// const numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\n\n// const inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\n// const finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\n// const actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\n\n// let minutosReferenciaParaNoUsoHoy = 0;\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else {\n//     minutosReferenciaParaNoUsoHoy = 0;\n// }\n// minutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\n\n// const tiempoDeUsoMinutos = numMinutosDeUsoHoy;\n// let tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\n// tiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\n\n// // --- Calcular Porcentajes de Uso y No Uso ---\n// let porcentajeUso = 0;\n// let porcentajeNoUso = 0;\n\n// if (minutosReferenciaParaNoUsoHoy > 0) {\n//     porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n//     porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n// } else {\n//     // Si minutosReferenciaParaNoUsoHoy es 0 (ej. antes del inicio del horario laboral),\n//     // tiempoDeUsoMinutos y tiempoDeNoUsoMinutos tambi√©n ser√°n 0.\n//     // Por lo tanto, los porcentajes son 0%.\n//     porcentajeUso = 0;\n//     porcentajeNoUso = 0;\n// }\n\n// // --- Definir Hora de Inicio y Fin del Periodo ---\n// const inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\n// let finHorarioLaboralConsideradoHoyStr = \"\";\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n// } else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// } else {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// }\n\n// // --- Formatear Resultados ---\n// msg.payload = {\n//     tiempoDeUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeUsoMinutos,\n//         horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeUso.toFixed(2)) // NUEVO\n//     },\n//     tiempoDeNoUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeNoUsoMinutos,\n//         horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeNoUso.toFixed(2)) // NUEVO\n//     },\n//     contextoCalculo: {\n//         fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n//         horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n//         periodoAnalizadoDiaActual: {\n//             inicio: inicioHorarioLaboralHoyStr,\n//             fin: finHorarioLaboralConsideradoHoyStr\n//         },\n//         minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n//         offsetUtcUtilizado: OFFSET_CHILE_UTC,\n//         definicionHorarioLaboral:\n//             `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n//             `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n//     },\n//     diagnosticoDatosDiaActual: {\n//         minutosUnicosConDatosDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n//         minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy,\n//         minutosUnicosConEnergyCeroDetectadosHoyEnHorarioLaboral: minutosConEnergyCeroHoyHorarioLaboral.size\n//     }\n// };\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 420,
        "wires": [
            [
                "81652c633c2a794d"
            ]
        ]
    },
    {
        "id": "e07fd6dfb054acd6",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "tiempoUsoF2H2",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2150,
        "y": 800,
        "wires": []
    },
    {
        "id": "982ab4342811a370",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 5",
        "func": "// --- Constantes de Configuraci√≥n ---\nconst HORA_INICIO_LABORAL_CHILE = 6;\nconst MINUTOS_INICIO_LABORAL_CHILE = 0;\nconst HORA_FIN_LABORAL_CHILE = 18;\nconst MINUTOS_FIN_LABORAL_CHILE = 0;\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Determinar Fecha y Hora Actual en Chile ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\nconst horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\nconst minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// --- Contadores y Sets ---\nlet minutosDeUsoHoyHorarioLaboral = new Set();\nlet todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n// Variables para KPIs de energ√≠a con ACUMULADOR, enfocadas en valores > 0\nlet primerValorEnergyActivo = { timestampOriginal: null, value: null };\nlet ultimoValorEnergyActivo = { timestampOriginal: null, value: null };\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const timestampMinutoUtcIso = fechaRecordUtcOriginal.toISOString();\n\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                if (record._field === \"Energy\") {\n                    todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                    if (record._value > 350) { // Solo considerar para tiempo de uso y para KPIs de consumo si > 0\n                        minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                        // --- CORRECCI√ìN: Capturar primer y √∫ltimo valor del acumulador \"Energy\" SI ES > 0 ---\n                        if (primerValorEnergyActivo.timestampOriginal === null) {\n                            primerValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                            primerValorEnergyActivo.value = record._value;\n                        }\n                        // Siempre actualizar el √∫ltimo valor activo, ya que los datos vienen ordenados por tiempo\n                        ultimoValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                        ultimoValorEnergyActivo.value = record._value;\n                        // --- FIN CORRECCI√ìN ---\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- C√°lculos de Tiempo de Uso/No Uso y Porcentajes ---\nconst numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\nconst inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\nconst finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\nconst actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\nlet minutosReferenciaParaNoUsoHoy = 0;\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n} else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n}\nminutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\nconst tiempoDeUsoMinutos = numMinutosDeUsoHoy;\nlet tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\ntiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\nlet porcentajeUso = 0;\nlet porcentajeNoUso = 0;\nif (minutosReferenciaParaNoUsoHoy > 0) {\n    porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n    porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n}\n\n// --- Calcular KPIs de Consumo Energ√©tico para ACUMULADOR (simplificado) ---\nlet consumoTotalKWh = 0;\nlet valorInicialParaConsumo = (primerValorEnergyActivo.value !== null) ? primerValorEnergyActivo.value : null;\nlet valorFinalParaConsumo = (ultimoValorEnergyActivo.value !== null) ? ultimoValorEnergyActivo.value : null;\n\nif (valorInicialParaConsumo !== null && valorFinalParaConsumo !== null) {\n    consumoTotalKWh = valorFinalParaConsumo - valorInicialParaConsumo;\n    if (consumoTotalKWh < 0) { \n        // Esto puede ocurrir si el contador se resetea o hay datos an√≥malos.\n        // node.warn(`Consumo calculado negativo (${consumoTotalKWh} kWh). Valor inicial: ${valorInicialParaConsumo}, Valor final: ${valorFinalParaConsumo}. Se establecer√° a 0.`);\n        consumoTotalKWh = 0; \n    }\n}\n\n// --- Definir Hora de Inicio y Fin del Periodo ---\nconst inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\nlet finHorarioLaboralConsideradoHoyStr = \"\";\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n} else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n} else {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n}\n\n// --- Formatear Resultados ---\nmsg.payload = {\n    tiempoDeUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeUsoMinutos,\n        horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeUso.toFixed(2))\n    },\n    tiempoDeNoUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeNoUsoMinutos,\n        horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeNoUso.toFixed(2))\n    },\n    // --- SECCI√ìN DE KPIs ENERG√âTICOS SIMPLIFICADA ---\n    kpisConsumoEnergeticoDiaActual: {\n        valorInicialAcumuladorKWh: (valorInicialParaConsumo !== null) ? parseFloat(valorInicialParaConsumo.toFixed(3)) : null,\n        timestampValorInicialUTC: primerValorEnergyActivo.timestampOriginal,\n        valorFinalAcumuladorKWh: (valorFinalParaConsumo !== null) ? parseFloat(valorFinalParaConsumo.toFixed(3)) : null,\n        timestampValorFinalUTC: ultimoValorEnergyActivo.timestampOriginal,\n        consumoTotalEstimadoKWh: parseFloat(consumoTotalKWh.toFixed(3)),\n        // Los tiempos de inicio y fin del horario ya est√°n en contextoCalculo.periodoAnalizadoDiaActual\n        notaImportante: \"Consumo = (Valor Final Activo - Valor Inicial Activo) del acumulador 'Energy' (kWh). Valores Activos: primer/√∫ltimo registro del d√≠a/horario laboral con _value > 0. El _value es el promedio del contador acumulado en su respectivo minuto.\"\n    },\n    contextoCalculo: {\n        fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n        horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n        periodoAnalizadoDiaActual: { // Estos son el tiempo de inicio y t√©rmino horario Chile que solicitaste\n          inicio: inicioHorarioLaboralHoyStr,\n          fin: finHorarioLaboralConsideradoHoyStr\n        },\n        minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n        offsetUtcUtilizado: OFFSET_CHILE_UTC,\n        definicionHorarioLaboral: \n            `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n            `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n    },\n    diagnosticoDatosDiaActual: {\n        minutosUnicosConAlgunRegistroDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n        minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy \n    }\n};\n\nreturn msg;\n\n\n// // --- Constantes de Configuraci√≥n ---\n// const HORA_INICIO_LABORAL_CHILE = 7;\n// const MINUTOS_INICIO_LABORAL_CHILE = 30;\n// const HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0;\n// const OFFSET_CHILE_UTC = -4;\n\n// // --- Determinar Fecha y Hora Actual en Chile ---\n// const ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\n// const anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\n// const mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\n// const diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n// const horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\n// const minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// // --- Contadores y Sets ---\n// let minutosDeUsoHoyHorarioLaboral = new Set();\n// let minutosConEnergyCeroHoyHorarioLaboral = new Set();\n// let todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n\n// // --- Procesamiento de Datos ---\n// if (msg.payload && Array.isArray(msg.payload)) {\n//     msg.payload.forEach(record => {\n//         if (record === null || typeof record !== 'object' ||\n//             !record._time || record._field === undefined || record._value === undefined) {\n//             return;\n//         }\n\n//         const fechaRecordUtc = new Date(record._time);\n//         const timestampMinutoUtcIso = fechaRecordUtc.toISOString();\n\n//         const recordEnChile_DateObj = new Date(fechaRecordUtc.getTime() + OFFSET_CHILE_UTC * 3600000);\n//         const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n//         const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n//         const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n//         const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n//         const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n\n//         if (anioRecordChile === anioActualChile &&\n//             mesRecordChile === mesActualChile &&\n//             diaRecordChile === diaActualChile) {\n\n//             const esDespuesOIgualAlInicioLaboral =\n//                 (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n//                 (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n//             const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n//             const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n//             if (enHorarioLaboral) {\n//                 if (record._field === \"Energy\") {\n//                     todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                     if (record._value > 0) {\n//                         minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         if (minutosConEnergyCeroHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.delete(timestampMinutoUtcIso);\n//                         }\n//                     } else {\n//                         if (!minutosDeUsoHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     });\n// }\n\n// // --- C√°lculos Finales ---\n// const numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\n\n// const inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\n// const finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\n// const actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\n\n// let minutosReferenciaParaNoUsoHoy = 0;\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else {\n//     minutosReferenciaParaNoUsoHoy = 0;\n// }\n// minutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\n\n// const tiempoDeUsoMinutos = numMinutosDeUsoHoy;\n// let tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\n// tiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\n\n// // --- Calcular Porcentajes de Uso y No Uso ---\n// let porcentajeUso = 0;\n// let porcentajeNoUso = 0;\n\n// if (minutosReferenciaParaNoUsoHoy > 0) {\n//     porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n//     porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n// } else {\n//     // Si minutosReferenciaParaNoUsoHoy es 0 (ej. antes del inicio del horario laboral),\n//     // tiempoDeUsoMinutos y tiempoDeNoUsoMinutos tambi√©n ser√°n 0.\n//     // Por lo tanto, los porcentajes son 0%.\n//     porcentajeUso = 0;\n//     porcentajeNoUso = 0;\n// }\n\n// // --- Definir Hora de Inicio y Fin del Periodo ---\n// const inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\n// let finHorarioLaboralConsideradoHoyStr = \"\";\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n// } else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// } else {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// }\n\n// // --- Formatear Resultados ---\n// msg.payload = {\n//     tiempoDeUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeUsoMinutos,\n//         horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeUso.toFixed(2)) // NUEVO\n//     },\n//     tiempoDeNoUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeNoUsoMinutos,\n//         horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeNoUso.toFixed(2)) // NUEVO\n//     },\n//     contextoCalculo: {\n//         fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n//         horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n//         periodoAnalizadoDiaActual: {\n//             inicio: inicioHorarioLaboralHoyStr,\n//             fin: finHorarioLaboralConsideradoHoyStr\n//         },\n//         minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n//         offsetUtcUtilizado: OFFSET_CHILE_UTC,\n//         definicionHorarioLaboral:\n//             `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n//             `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n//     },\n//     diagnosticoDatosDiaActual: {\n//         minutosUnicosConDatosDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n//         minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy,\n//         minutosUnicosConEnergyCeroDetectadosHoyEnHorarioLaboral: minutosConEnergyCeroHoyHorarioLaboral.size\n//     }\n// };\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 800,
        "wires": [
            [
                "e07fd6dfb054acd6"
            ]
        ]
    },
    {
        "id": "0479e1bcc6b2f8d1",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H2",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 860,
        "y": 800,
        "wires": []
    },
    {
        "id": "ef2c7c362eff7ecd",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 1",
        "func": "// --- Constantes de Configuraci√≥n ---\nconst HORA_INICIO_LABORAL_CHILE = 6;\nconst MINUTOS_INICIO_LABORAL_CHILE = 0;\nconst HORA_FIN_LABORAL_CHILE = 18;\nconst MINUTOS_FIN_LABORAL_CHILE = 0;\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Determinar Fecha y Hora Actual en Chile ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\nconst horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\nconst minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// --- Contadores y Sets ---\nlet minutosDeUsoHoyHorarioLaboral = new Set();\nlet todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n// Variables para KPIs de energ√≠a con ACUMULADOR, enfocadas en valores > 0\nlet primerValorEnergyActivo = { timestampOriginal: null, value: null };\nlet ultimoValorEnergyActivo = { timestampOriginal: null, value: null };\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const timestampMinutoUtcIso = fechaRecordUtcOriginal.toISOString();\n\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                if (record._field === \"Energy\") {\n                    todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                    if (record._value > 350) { // Solo considerar para tiempo de uso y para KPIs de consumo si > 0\n                        minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                        // --- CORRECCI√ìN: Capturar primer y √∫ltimo valor del acumulador \"Energy\" SI ES > 0 ---\n                        if (primerValorEnergyActivo.timestampOriginal === null) {\n                            primerValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                            primerValorEnergyActivo.value = record._value;\n                        }\n                        // Siempre actualizar el √∫ltimo valor activo, ya que los datos vienen ordenados por tiempo\n                        ultimoValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                        ultimoValorEnergyActivo.value = record._value;\n                        // --- FIN CORRECCI√ìN ---\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- C√°lculos de Tiempo de Uso/No Uso y Porcentajes ---\nconst numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\nconst inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\nconst finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\nconst actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\nlet minutosReferenciaParaNoUsoHoy = 0;\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n} else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n}\nminutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\nconst tiempoDeUsoMinutos = numMinutosDeUsoHoy;\nlet tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\ntiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\nlet porcentajeUso = 0;\nlet porcentajeNoUso = 0;\nif (minutosReferenciaParaNoUsoHoy > 0) {\n    porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n    porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n}\n\n// --- Calcular KPIs de Consumo Energ√©tico para ACUMULADOR (simplificado) ---\nlet consumoTotalKWh = 0;\nlet valorInicialParaConsumo = (primerValorEnergyActivo.value !== null) ? primerValorEnergyActivo.value : null;\nlet valorFinalParaConsumo = (ultimoValorEnergyActivo.value !== null) ? ultimoValorEnergyActivo.value : null;\n\nif (valorInicialParaConsumo !== null && valorFinalParaConsumo !== null) {\n    consumoTotalKWh = valorFinalParaConsumo - valorInicialParaConsumo;\n    if (consumoTotalKWh < 0) { \n        // Esto puede ocurrir si el contador se resetea o hay datos an√≥malos.\n        // node.warn(`Consumo calculado negativo (${consumoTotalKWh} kWh). Valor inicial: ${valorInicialParaConsumo}, Valor final: ${valorFinalParaConsumo}. Se establecer√° a 0.`);\n        consumoTotalKWh = 0; \n    }\n}\n\n// --- Definir Hora de Inicio y Fin del Periodo ---\nconst inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\nlet finHorarioLaboralConsideradoHoyStr = \"\";\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n} else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n} else {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n}\n\n// --- Formatear Resultados ---\nmsg.payload = {\n    tiempoDeUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeUsoMinutos,\n        horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeUso.toFixed(2))\n    },\n    tiempoDeNoUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeNoUsoMinutos,\n        horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeNoUso.toFixed(2))\n    },\n    // --- SECCI√ìN DE KPIs ENERG√âTICOS SIMPLIFICADA ---\n    kpisConsumoEnergeticoDiaActual: {\n        valorInicialAcumuladorKWh: (valorInicialParaConsumo !== null) ? parseFloat(valorInicialParaConsumo.toFixed(3)) : null,\n        timestampValorInicialUTC: primerValorEnergyActivo.timestampOriginal,\n        valorFinalAcumuladorKWh: (valorFinalParaConsumo !== null) ? parseFloat(valorFinalParaConsumo.toFixed(3)) : null,\n        timestampValorFinalUTC: ultimoValorEnergyActivo.timestampOriginal,\n        consumoTotalEstimadoKWh: parseFloat(consumoTotalKWh.toFixed(3)),\n        // Los tiempos de inicio y fin del horario ya est√°n en contextoCalculo.periodoAnalizadoDiaActual\n        notaImportante: \"Consumo = (Valor Final Activo - Valor Inicial Activo) del acumulador 'Energy' (kWh). Valores Activos: primer/√∫ltimo registro del d√≠a/horario laboral con _value > 0. El _value es el promedio del contador acumulado en su respectivo minuto.\"\n    },\n    contextoCalculo: {\n        fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n        horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n        periodoAnalizadoDiaActual: { // Estos son el tiempo de inicio y t√©rmino horario Chile que solicitaste\n          inicio: inicioHorarioLaboralHoyStr,\n          fin: finHorarioLaboralConsideradoHoyStr\n        },\n        minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n        offsetUtcUtilizado: OFFSET_CHILE_UTC,\n        definicionHorarioLaboral: \n            `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n            `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n    },\n    diagnosticoDatosDiaActual: {\n        minutosUnicosConAlgunRegistroDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n        minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy \n    }\n};\n\nreturn msg;\n\n\n// // --- Constantes de Configuraci√≥n ---\n// const HORA_INICIO_LABORAL_CHILE = 7;\n// const MINUTOS_INICIO_LABORAL_CHILE = 30;\n// const HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0;\n// const OFFSET_CHILE_UTC = -4;\n\n// // --- Determinar Fecha y Hora Actual en Chile ---\n// const ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\n// const anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\n// const mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\n// const diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n// const horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\n// const minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// // --- Contadores y Sets ---\n// let minutosDeUsoHoyHorarioLaboral = new Set();\n// let minutosConEnergyCeroHoyHorarioLaboral = new Set();\n// let todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n\n// // --- Procesamiento de Datos ---\n// if (msg.payload && Array.isArray(msg.payload)) {\n//     msg.payload.forEach(record => {\n//         if (record === null || typeof record !== 'object' ||\n//             !record._time || record._field === undefined || record._value === undefined) {\n//             return;\n//         }\n\n//         const fechaRecordUtc = new Date(record._time);\n//         const timestampMinutoUtcIso = fechaRecordUtc.toISOString();\n\n//         const recordEnChile_DateObj = new Date(fechaRecordUtc.getTime() + OFFSET_CHILE_UTC * 3600000);\n//         const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n//         const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n//         const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n//         const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n//         const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n\n//         if (anioRecordChile === anioActualChile &&\n//             mesRecordChile === mesActualChile &&\n//             diaRecordChile === diaActualChile) {\n\n//             const esDespuesOIgualAlInicioLaboral =\n//                 (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n//                 (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n//             const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n//             const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n//             if (enHorarioLaboral) {\n//                 if (record._field === \"Energy\") {\n//                     todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                     if (record._value > 0) {\n//                         minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         if (minutosConEnergyCeroHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.delete(timestampMinutoUtcIso);\n//                         }\n//                     } else {\n//                         if (!minutosDeUsoHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     });\n// }\n\n// // --- C√°lculos Finales ---\n// const numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\n\n// const inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\n// const finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\n// const actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\n\n// let minutosReferenciaParaNoUsoHoy = 0;\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else {\n//     minutosReferenciaParaNoUsoHoy = 0;\n// }\n// minutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\n\n// const tiempoDeUsoMinutos = numMinutosDeUsoHoy;\n// let tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\n// tiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\n\n// // --- Calcular Porcentajes de Uso y No Uso ---\n// let porcentajeUso = 0;\n// let porcentajeNoUso = 0;\n\n// if (minutosReferenciaParaNoUsoHoy > 0) {\n//     porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n//     porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n// } else {\n//     // Si minutosReferenciaParaNoUsoHoy es 0 (ej. antes del inicio del horario laboral),\n//     // tiempoDeUsoMinutos y tiempoDeNoUsoMinutos tambi√©n ser√°n 0.\n//     // Por lo tanto, los porcentajes son 0%.\n//     porcentajeUso = 0;\n//     porcentajeNoUso = 0;\n// }\n\n// // --- Definir Hora de Inicio y Fin del Periodo ---\n// const inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\n// let finHorarioLaboralConsideradoHoyStr = \"\";\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n// } else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// } else {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// }\n\n// // --- Formatear Resultados ---\n// msg.payload = {\n//     tiempoDeUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeUsoMinutos,\n//         horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeUso.toFixed(2)) // NUEVO\n//     },\n//     tiempoDeNoUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeNoUsoMinutos,\n//         horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeNoUso.toFixed(2)) // NUEVO\n//     },\n//     contextoCalculo: {\n//         fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n//         horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n//         periodoAnalizadoDiaActual: {\n//             inicio: inicioHorarioLaboralHoyStr,\n//             fin: finHorarioLaboralConsideradoHoyStr\n//         },\n//         minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n//         offsetUtcUtilizado: OFFSET_CHILE_UTC,\n//         definicionHorarioLaboral:\n//             `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n//             `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n//     },\n//     diagnosticoDatosDiaActual: {\n//         minutosUnicosConDatosDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n//         minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy,\n//         minutosUnicosConEnergyCeroDetectadosHoyEnHorarioLaboral: minutosConEnergyCeroHoyHorarioLaboral.size\n//     }\n// };\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 800,
        "wires": [
            [
                "0479e1bcc6b2f8d1"
            ]
        ]
    },
    {
        "id": "6e8624b8c454d8ef",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 2",
        "func": "// --- Constantes de Configuraci√≥n para Detecci√≥n de Coladas ---\nconst UMBRAL_POTENCIA_ALTA = 75; // kW - Umbral para considerar que la fusi√≥n ha comenzado/continuado\nconst UMBRAL_POTENCIA_BAJA = 25; // kW - Umbral por debajo del cual se considera baja potencia/posible fin\nconst TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS = 10 * 60 * 1000; // 10 minutos en milisegundos\nconst TIEMPO_MINIMO_FUSION_MS = 10 * 60 * 1000; // Opcional: 5 minutos de fusi√≥n para ser colada v√°lida\n\n// --- Constantes de Horario Laboral y Offset (copiadas del nodo anterior) ---\nconst HORA_INICIO_LABORAL_CHILE = 7;\nconst MINUTOS_INICIO_LABORAL_CHILE = 30;\nconst HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0; // No se usa directamente si el fin es HORA_FIN < VALOR\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Variables de Estado y Contadores ---\nlet contadorColadasDiaActual = 0;\nlet estadoHorno = \"APAGADO\"; // Estados: APAGADO, FUSIONANDO, POSIBLE_FIN_COLADA\nlet timestampInicioFusion = null;\nlet timestampInicioBajaPotencia = null;\n\n// --- Determinar Fecha Actual en Chile (para filtrar datos) ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    // Filtrar y ordenar por tiempo primero (si no viene ordenado, crucial)\n    // Se asume que msg.payload ya est√° ordenado por InfluxDB\n    \n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        // Considerar solo registros de Potencia para este KPI\n        if (record._field !== \"Power\") {\n            return;\n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        // Filtro por d√≠a actual y horario laboral\n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                const potenciaActual = record._value;\n                const tiempoActualMs = fechaRecordUtcOriginal.getTime();\n\n                if (estadoHorno === \"APAGADO\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) {\n                        estadoHorno = \"FUSIONANDO\";\n                        timestampInicioFusion = tiempoActualMs;\n                        timestampInicioBajaPotencia = null; \n                    }\n                } else if (estadoHorno === \"FUSIONANDO\") {\n                    if (potenciaActual < UMBRAL_POTENCIA_BAJA) {\n                        estadoHorno = \"POSIBLE_FIN_COLADA\";\n                        timestampInicioBajaPotencia = tiempoActualMs;\n                    }\n                } else if (estadoHorno === \"POSIBLE_FIN_COLADA\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) { // Subi√≥ la potencia de nuevo\n                        estadoHorno = \"FUSIONANDO\"; // Volver a fusionando, fue bajada temporal\n                        timestampInicioBajaPotencia = null;\n                    } else { // Sigue en baja potencia\n                        if (timestampInicioBajaPotencia !== null) {\n                            const duracionBajaPotenciaMs = tiempoActualMs - timestampInicioBajaPotencia;\n                            if (duracionBajaPotenciaMs >= TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS) {\n                                // Condici√≥n de tiempo de baja potencia cumplida\n                                // Verificar tambi√©n el tiempo m√≠nimo de fusi√≥n (opcional pero recomendado)\n                                if (timestampInicioFusion !== null) {\n                                    const duracionFusionMs = timestampInicioBajaPotencia - timestampInicioFusion; // Tiempo desde inicio fusi√≥n hasta inicio de esta baja larga\n                                    if (duracionFusionMs >= TIEMPO_MINIMO_FUSION_MS) {\n                                        contadorColadasDiaActual++;\n                                    }\n                                } else {\n                                    // Si no hay timestampInicioFusion pero llegamos aqu√≠, es un estado raro.\n                                    // Podr√≠a ser que empez√≥ en POSIBLE_FIN_COLADA. Lo seguro es contar si hay fusi√≥n previa.\n                                }\n                                estadoHorno = \"APAGADO\"; // Resetear para la pr√≥xima colada\n                                timestampInicioFusion = null; // Importante resetear\n                                timestampInicioBajaPotencia = null;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- Preparar Salida ---\n// Puedes a√±adir este KPI al payload del mensaje original si este nodo sigue a otro,\n// o crear un nuevo mensaje. Aqu√≠ creo un nuevo objeto en msg.kpiColadas.\nif (!msg.kpiColadas) {\n    msg.kpiColadas = {};\n}\nmsg.kpiColadas.cantidadColadasDiaActual = contadorColadasDiaActual;\nmsg.kpiColadas.diaAnalizado = `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`;\nmsg.kpiColadas.nota = \"Estimaci√≥n basada en patrones de potencia. Ajustar umbrales seg√∫n operaci√≥n real.\";\n// Puedes tambi√©n pasar los umbrales usados para referencia\nmsg.kpiColadas.umbralesConfigurados = {\n    UMBRAL_POTENCIA_ALTA_kW: UMBRAL_POTENCIA_ALTA,\n    UMBRAL_POTENCIA_BAJA_kW: UMBRAL_POTENCIA_BAJA,\n    TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_min: TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS / (60 * 1000),\n    TIEMPO_MINIMO_FUSION_min: TIEMPO_MINIMO_FUSION_MS / (60 * 1000)\n};\n\n// Si quieres que este nodo env√≠e su propio mensaje independiente:\n// return { payload: { kpiColadas: msg.kpiColadas } };\n// Si quieres a√±adirlo al mensaje existente y pasarlo:\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 840,
        "wires": [
            [
                "f91b290711bd7cb5"
            ]
        ]
    },
    {
        "id": "f91b290711bd7cb5",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H2coladas",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "kpiColadas",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 840,
        "wires": []
    },
    {
        "id": "5de4de3dd477d883",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H3",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 880,
        "y": 1160,
        "wires": []
    },
    {
        "id": "63a552b94d1f44c7",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 8",
        "func": "// --- Constantes de Configuraci√≥n ---\nconst HORA_INICIO_LABORAL_CHILE = 6;\nconst MINUTOS_INICIO_LABORAL_CHILE = 0;\nconst HORA_FIN_LABORAL_CHILE = 18;\nconst MINUTOS_FIN_LABORAL_CHILE = 0;\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Determinar Fecha y Hora Actual en Chile ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\nconst horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\nconst minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// --- Contadores y Sets ---\nlet minutosDeUsoHoyHorarioLaboral = new Set();\nlet todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n// Variables para KPIs de energ√≠a con ACUMULADOR, enfocadas en valores > 0\nlet primerValorEnergyActivo = { timestampOriginal: null, value: null };\nlet ultimoValorEnergyActivo = { timestampOriginal: null, value: null };\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const timestampMinutoUtcIso = fechaRecordUtcOriginal.toISOString();\n\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                if (record._field === \"Energy\") {\n                    todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                    if (record._value > 350) { // Solo considerar para tiempo de uso y para KPIs de consumo si > 0\n                        minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                        // --- CORRECCI√ìN: Capturar primer y √∫ltimo valor del acumulador \"Energy\" SI ES > 0 ---\n                        if (primerValorEnergyActivo.timestampOriginal === null) {\n                            primerValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                            primerValorEnergyActivo.value = record._value;\n                        }\n                        // Siempre actualizar el √∫ltimo valor activo, ya que los datos vienen ordenados por tiempo\n                        ultimoValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                        ultimoValorEnergyActivo.value = record._value;\n                        // --- FIN CORRECCI√ìN ---\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- C√°lculos de Tiempo de Uso/No Uso y Porcentajes ---\nconst numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\nconst inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\nconst finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\nconst actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\nlet minutosReferenciaParaNoUsoHoy = 0;\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n} else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n}\nminutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\nconst tiempoDeUsoMinutos = numMinutosDeUsoHoy;\nlet tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\ntiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\nlet porcentajeUso = 0;\nlet porcentajeNoUso = 0;\nif (minutosReferenciaParaNoUsoHoy > 0) {\n    porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n    porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n}\n\n// --- Calcular KPIs de Consumo Energ√©tico para ACUMULADOR (simplificado) ---\nlet consumoTotalKWh = 0;\nlet valorInicialParaConsumo = (primerValorEnergyActivo.value !== null) ? primerValorEnergyActivo.value : null;\nlet valorFinalParaConsumo = (ultimoValorEnergyActivo.value !== null) ? ultimoValorEnergyActivo.value : null;\n\nif (valorInicialParaConsumo !== null && valorFinalParaConsumo !== null) {\n    consumoTotalKWh = valorFinalParaConsumo - valorInicialParaConsumo;\n    if (consumoTotalKWh < 0) { \n        // Esto puede ocurrir si el contador se resetea o hay datos an√≥malos.\n        // node.warn(`Consumo calculado negativo (${consumoTotalKWh} kWh). Valor inicial: ${valorInicialParaConsumo}, Valor final: ${valorFinalParaConsumo}. Se establecer√° a 0.`);\n        consumoTotalKWh = 0; \n    }\n}\n\n// --- Definir Hora de Inicio y Fin del Periodo ---\nconst inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\nlet finHorarioLaboralConsideradoHoyStr = \"\";\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n} else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n} else {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n}\n\n// --- Formatear Resultados ---\nmsg.payload = {\n    tiempoDeUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeUsoMinutos,\n        horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeUso.toFixed(2))\n    },\n    tiempoDeNoUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeNoUsoMinutos,\n        horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeNoUso.toFixed(2))\n    },\n    // --- SECCI√ìN DE KPIs ENERG√âTICOS SIMPLIFICADA ---\n    kpisConsumoEnergeticoDiaActual: {\n        valorInicialAcumuladorKWh: (valorInicialParaConsumo !== null) ? parseFloat(valorInicialParaConsumo.toFixed(3)) : null,\n        timestampValorInicialUTC: primerValorEnergyActivo.timestampOriginal,\n        valorFinalAcumuladorKWh: (valorFinalParaConsumo !== null) ? parseFloat(valorFinalParaConsumo.toFixed(3)) : null,\n        timestampValorFinalUTC: ultimoValorEnergyActivo.timestampOriginal,\n        consumoTotalEstimadoKWh: parseFloat(consumoTotalKWh.toFixed(3)),\n        // Los tiempos de inicio y fin del horario ya est√°n en contextoCalculo.periodoAnalizadoDiaActual\n        notaImportante: \"Consumo = (Valor Final Activo - Valor Inicial Activo) del acumulador 'Energy' (kWh). Valores Activos: primer/√∫ltimo registro del d√≠a/horario laboral con _value > 0. El _value es el promedio del contador acumulado en su respectivo minuto.\"\n    },\n    contextoCalculo: {\n        fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n        horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n        periodoAnalizadoDiaActual: { // Estos son el tiempo de inicio y t√©rmino horario Chile que solicitaste\n          inicio: inicioHorarioLaboralHoyStr,\n          fin: finHorarioLaboralConsideradoHoyStr\n        },\n        minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n        offsetUtcUtilizado: OFFSET_CHILE_UTC,\n        definicionHorarioLaboral: \n            `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n            `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n    },\n    diagnosticoDatosDiaActual: {\n        minutosUnicosConAlgunRegistroDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n        minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy \n    }\n};\n\nreturn msg;\n\n\n// // --- Constantes de Configuraci√≥n ---\n// const HORA_INICIO_LABORAL_CHILE = 7;\n// const MINUTOS_INICIO_LABORAL_CHILE = 30;\n// const HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0;\n// const OFFSET_CHILE_UTC = -4;\n\n// // --- Determinar Fecha y Hora Actual en Chile ---\n// const ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\n// const anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\n// const mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\n// const diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n// const horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\n// const minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// // --- Contadores y Sets ---\n// let minutosDeUsoHoyHorarioLaboral = new Set();\n// let minutosConEnergyCeroHoyHorarioLaboral = new Set();\n// let todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n\n// // --- Procesamiento de Datos ---\n// if (msg.payload && Array.isArray(msg.payload)) {\n//     msg.payload.forEach(record => {\n//         if (record === null || typeof record !== 'object' ||\n//             !record._time || record._field === undefined || record._value === undefined) {\n//             return;\n//         }\n\n//         const fechaRecordUtc = new Date(record._time);\n//         const timestampMinutoUtcIso = fechaRecordUtc.toISOString();\n\n//         const recordEnChile_DateObj = new Date(fechaRecordUtc.getTime() + OFFSET_CHILE_UTC * 3600000);\n//         const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n//         const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n//         const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n//         const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n//         const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n\n//         if (anioRecordChile === anioActualChile &&\n//             mesRecordChile === mesActualChile &&\n//             diaRecordChile === diaActualChile) {\n\n//             const esDespuesOIgualAlInicioLaboral =\n//                 (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n//                 (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n//             const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n//             const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n//             if (enHorarioLaboral) {\n//                 if (record._field === \"Energy\") {\n//                     todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                     if (record._value > 0) {\n//                         minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         if (minutosConEnergyCeroHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.delete(timestampMinutoUtcIso);\n//                         }\n//                     } else {\n//                         if (!minutosDeUsoHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     });\n// }\n\n// // --- C√°lculos Finales ---\n// const numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\n\n// const inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\n// const finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\n// const actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\n\n// let minutosReferenciaParaNoUsoHoy = 0;\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else {\n//     minutosReferenciaParaNoUsoHoy = 0;\n// }\n// minutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\n\n// const tiempoDeUsoMinutos = numMinutosDeUsoHoy;\n// let tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\n// tiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\n\n// // --- Calcular Porcentajes de Uso y No Uso ---\n// let porcentajeUso = 0;\n// let porcentajeNoUso = 0;\n\n// if (minutosReferenciaParaNoUsoHoy > 0) {\n//     porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n//     porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n// } else {\n//     // Si minutosReferenciaParaNoUsoHoy es 0 (ej. antes del inicio del horario laboral),\n//     // tiempoDeUsoMinutos y tiempoDeNoUsoMinutos tambi√©n ser√°n 0.\n//     // Por lo tanto, los porcentajes son 0%.\n//     porcentajeUso = 0;\n//     porcentajeNoUso = 0;\n// }\n\n// // --- Definir Hora de Inicio y Fin del Periodo ---\n// const inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\n// let finHorarioLaboralConsideradoHoyStr = \"\";\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n// } else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// } else {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// }\n\n// // --- Formatear Resultados ---\n// msg.payload = {\n//     tiempoDeUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeUsoMinutos,\n//         horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeUso.toFixed(2)) // NUEVO\n//     },\n//     tiempoDeNoUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeNoUsoMinutos,\n//         horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeNoUso.toFixed(2)) // NUEVO\n//     },\n//     contextoCalculo: {\n//         fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n//         horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n//         periodoAnalizadoDiaActual: {\n//             inicio: inicioHorarioLaboralHoyStr,\n//             fin: finHorarioLaboralConsideradoHoyStr\n//         },\n//         minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n//         offsetUtcUtilizado: OFFSET_CHILE_UTC,\n//         definicionHorarioLaboral:\n//             `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n//             `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n//     },\n//     diagnosticoDatosDiaActual: {\n//         minutosUnicosConDatosDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n//         minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy,\n//         minutosUnicosConEnergyCeroDetectadosHoyEnHorarioLaboral: minutosConEnergyCeroHoyHorarioLaboral.size\n//     }\n// };\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1160,
        "wires": [
            [
                "5de4de3dd477d883"
            ]
        ]
    },
    {
        "id": "e5321fadbd48578e",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 9",
        "func": "// --- Constantes de Configuraci√≥n para Detecci√≥n de Coladas ---\nconst UMBRAL_POTENCIA_ALTA = 75; // kW - Umbral para considerar que la fusi√≥n ha comenzado/continuado\nconst UMBRAL_POTENCIA_BAJA = 25; // kW - Umbral por debajo del cual se considera baja potencia/posible fin\nconst TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS = 10 * 60 * 1000; // 10 minutos en milisegundos\nconst TIEMPO_MINIMO_FUSION_MS = 10 * 60 * 1000; // Opcional: 5 minutos de fusi√≥n para ser colada v√°lida\n\n// --- Constantes de Horario Laboral y Offset (copiadas del nodo anterior) ---\nconst HORA_INICIO_LABORAL_CHILE = 7;\nconst MINUTOS_INICIO_LABORAL_CHILE = 30;\nconst HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0; // No se usa directamente si el fin es HORA_FIN < VALOR\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Variables de Estado y Contadores ---\nlet contadorColadasDiaActual = 0;\nlet estadoHorno = \"APAGADO\"; // Estados: APAGADO, FUSIONANDO, POSIBLE_FIN_COLADA\nlet timestampInicioFusion = null;\nlet timestampInicioBajaPotencia = null;\n\n// --- Determinar Fecha Actual en Chile (para filtrar datos) ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    // Filtrar y ordenar por tiempo primero (si no viene ordenado, crucial)\n    // Se asume que msg.payload ya est√° ordenado por InfluxDB\n    \n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        // Considerar solo registros de Potencia para este KPI\n        if (record._field !== \"Power\") {\n            return;\n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        // Filtro por d√≠a actual y horario laboral\n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                const potenciaActual = record._value;\n                const tiempoActualMs = fechaRecordUtcOriginal.getTime();\n\n                if (estadoHorno === \"APAGADO\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) {\n                        estadoHorno = \"FUSIONANDO\";\n                        timestampInicioFusion = tiempoActualMs;\n                        timestampInicioBajaPotencia = null; \n                    }\n                } else if (estadoHorno === \"FUSIONANDO\") {\n                    if (potenciaActual < UMBRAL_POTENCIA_BAJA) {\n                        estadoHorno = \"POSIBLE_FIN_COLADA\";\n                        timestampInicioBajaPotencia = tiempoActualMs;\n                    }\n                } else if (estadoHorno === \"POSIBLE_FIN_COLADA\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) { // Subi√≥ la potencia de nuevo\n                        estadoHorno = \"FUSIONANDO\"; // Volver a fusionando, fue bajada temporal\n                        timestampInicioBajaPotencia = null;\n                    } else { // Sigue en baja potencia\n                        if (timestampInicioBajaPotencia !== null) {\n                            const duracionBajaPotenciaMs = tiempoActualMs - timestampInicioBajaPotencia;\n                            if (duracionBajaPotenciaMs >= TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS) {\n                                // Condici√≥n de tiempo de baja potencia cumplida\n                                // Verificar tambi√©n el tiempo m√≠nimo de fusi√≥n (opcional pero recomendado)\n                                if (timestampInicioFusion !== null) {\n                                    const duracionFusionMs = timestampInicioBajaPotencia - timestampInicioFusion; // Tiempo desde inicio fusi√≥n hasta inicio de esta baja larga\n                                    if (duracionFusionMs >= TIEMPO_MINIMO_FUSION_MS) {\n                                        contadorColadasDiaActual++;\n                                    }\n                                } else {\n                                    // Si no hay timestampInicioFusion pero llegamos aqu√≠, es un estado raro.\n                                    // Podr√≠a ser que empez√≥ en POSIBLE_FIN_COLADA. Lo seguro es contar si hay fusi√≥n previa.\n                                }\n                                estadoHorno = \"APAGADO\"; // Resetear para la pr√≥xima colada\n                                timestampInicioFusion = null; // Importante resetear\n                                timestampInicioBajaPotencia = null;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- Preparar Salida ---\n// Puedes a√±adir este KPI al payload del mensaje original si este nodo sigue a otro,\n// o crear un nuevo mensaje. Aqu√≠ creo un nuevo objeto en msg.kpiColadas.\nif (!msg.kpiColadas) {\n    msg.kpiColadas = {};\n}\nmsg.kpiColadas.cantidadColadasDiaActual = contadorColadasDiaActual;\nmsg.kpiColadas.diaAnalizado = `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`;\nmsg.kpiColadas.nota = \"Estimaci√≥n basada en patrones de potencia. Ajustar umbrales seg√∫n operaci√≥n real.\";\n// Puedes tambi√©n pasar los umbrales usados para referencia\nmsg.kpiColadas.umbralesConfigurados = {\n    UMBRAL_POTENCIA_ALTA_kW: UMBRAL_POTENCIA_ALTA,\n    UMBRAL_POTENCIA_BAJA_kW: UMBRAL_POTENCIA_BAJA,\n    TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_min: TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS / (60 * 1000),\n    TIEMPO_MINIMO_FUSION_min: TIEMPO_MINIMO_FUSION_MS / (60 * 1000)\n};\n\n// Si quieres que este nodo env√≠e su propio mensaje independiente:\n// return { payload: { kpiColadas: msg.kpiColadas } };\n// Si quieres a√±adirlo al mensaje existente y pasarlo:\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1200,
        "wires": [
            [
                "f8bd7e384a4a4bb2"
            ]
        ]
    },
    {
        "id": "f8bd7e384a4a4bb2",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H3coladas",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "kpiColadas",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 900,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c00b6099d98a24d7",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H4",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 900,
        "y": 1540,
        "wires": []
    },
    {
        "id": "c08326ce9176160d",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 10",
        "func": "// --- Constantes de Configuraci√≥n ---\nconst HORA_INICIO_LABORAL_CHILE = 6;\nconst MINUTOS_INICIO_LABORAL_CHILE = 0;\nconst HORA_FIN_LABORAL_CHILE = 18;\nconst MINUTOS_FIN_LABORAL_CHILE = 0;\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Determinar Fecha y Hora Actual en Chile ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\nconst horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\nconst minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// --- Contadores y Sets ---\nlet minutosDeUsoHoyHorarioLaboral = new Set();\nlet todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n// Variables para KPIs de energ√≠a con ACUMULADOR, enfocadas en valores > 0\nlet primerValorEnergyActivo = { timestampOriginal: null, value: null };\nlet ultimoValorEnergyActivo = { timestampOriginal: null, value: null };\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const timestampMinutoUtcIso = fechaRecordUtcOriginal.toISOString();\n\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                if (record._field === \"Energy\") {\n                    todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                    if (record._value > 350) { // Solo considerar para tiempo de uso y para KPIs de consumo si > 0\n                        minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n\n                        // --- CORRECCI√ìN: Capturar primer y √∫ltimo valor del acumulador \"Energy\" SI ES > 0 ---\n                        if (primerValorEnergyActivo.timestampOriginal === null) {\n                            primerValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                            primerValorEnergyActivo.value = record._value;\n                        }\n                        // Siempre actualizar el √∫ltimo valor activo, ya que los datos vienen ordenados por tiempo\n                        ultimoValorEnergyActivo.timestampOriginal = timestampMinutoUtcIso;\n                        ultimoValorEnergyActivo.value = record._value;\n                        // --- FIN CORRECCI√ìN ---\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- C√°lculos de Tiempo de Uso/No Uso y Porcentajes ---\nconst numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\nconst inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\nconst finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\nconst actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\nlet minutosReferenciaParaNoUsoHoy = 0;\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n} else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n    minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n}\nminutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\nconst tiempoDeUsoMinutos = numMinutosDeUsoHoy;\nlet tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\ntiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\nlet porcentajeUso = 0;\nlet porcentajeNoUso = 0;\nif (minutosReferenciaParaNoUsoHoy > 0) {\n    porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n    porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n}\n\n// --- Calcular KPIs de Consumo Energ√©tico para ACUMULADOR (simplificado) ---\nlet consumoTotalKWh = 0;\nlet valorInicialParaConsumo = (primerValorEnergyActivo.value !== null) ? primerValorEnergyActivo.value : null;\nlet valorFinalParaConsumo = (ultimoValorEnergyActivo.value !== null) ? ultimoValorEnergyActivo.value : null;\n\nif (valorInicialParaConsumo !== null && valorFinalParaConsumo !== null) {\n    consumoTotalKWh = valorFinalParaConsumo - valorInicialParaConsumo;\n    if (consumoTotalKWh < 0) { \n        // Esto puede ocurrir si el contador se resetea o hay datos an√≥malos.\n        // node.warn(`Consumo calculado negativo (${consumoTotalKWh} kWh). Valor inicial: ${valorInicialParaConsumo}, Valor final: ${valorFinalParaConsumo}. Se establecer√° a 0.`);\n        consumoTotalKWh = 0; \n    }\n}\n\n// --- Definir Hora de Inicio y Fin del Periodo ---\nconst inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\nlet finHorarioLaboralConsideradoHoyStr = \"\";\nif (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n} else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n} else {\n    finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n}\n\n// --- Formatear Resultados ---\nmsg.payload = {\n    tiempoDeUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeUsoMinutos,\n        horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeUso.toFixed(2))\n    },\n    tiempoDeNoUsoHorarioLaboralDiaActual: {\n        minutos: tiempoDeNoUsoMinutos,\n        horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n        porcentaje: parseFloat(porcentajeNoUso.toFixed(2))\n    },\n    // --- SECCI√ìN DE KPIs ENERG√âTICOS SIMPLIFICADA ---\n    kpisConsumoEnergeticoDiaActual: {\n        valorInicialAcumuladorKWh: (valorInicialParaConsumo !== null) ? parseFloat(valorInicialParaConsumo.toFixed(3)) : null,\n        timestampValorInicialUTC: primerValorEnergyActivo.timestampOriginal,\n        valorFinalAcumuladorKWh: (valorFinalParaConsumo !== null) ? parseFloat(valorFinalParaConsumo.toFixed(3)) : null,\n        timestampValorFinalUTC: ultimoValorEnergyActivo.timestampOriginal,\n        consumoTotalEstimadoKWh: parseFloat(consumoTotalKWh.toFixed(3)),\n        // Los tiempos de inicio y fin del horario ya est√°n en contextoCalculo.periodoAnalizadoDiaActual\n        notaImportante: \"Consumo = (Valor Final Activo - Valor Inicial Activo) del acumulador 'Energy' (kWh). Valores Activos: primer/√∫ltimo registro del d√≠a/horario laboral con _value > 0. El _value es el promedio del contador acumulado en su respectivo minuto.\"\n    },\n    contextoCalculo: {\n        fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n        horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n        periodoAnalizadoDiaActual: { // Estos son el tiempo de inicio y t√©rmino horario Chile que solicitaste\n          inicio: inicioHorarioLaboralHoyStr,\n          fin: finHorarioLaboralConsideradoHoyStr\n        },\n        minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n        offsetUtcUtilizado: OFFSET_CHILE_UTC,\n        definicionHorarioLaboral: \n            `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n            `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n    },\n    diagnosticoDatosDiaActual: {\n        minutosUnicosConAlgunRegistroDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n        minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy \n    }\n};\n\nreturn msg;\n\n\n// // --- Constantes de Configuraci√≥n ---\n// const HORA_INICIO_LABORAL_CHILE = 7;\n// const MINUTOS_INICIO_LABORAL_CHILE = 30;\n// const HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0;\n// const OFFSET_CHILE_UTC = -4;\n\n// // --- Determinar Fecha y Hora Actual en Chile ---\n// const ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\n// const anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\n// const mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\n// const diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n// const horaActualChile_Num = ahoraEnChile_DateObj.getUTCHours();\n// const minutosActualesChile_Num = ahoraEnChile_DateObj.getUTCMinutes();\n\n// // --- Contadores y Sets ---\n// let minutosDeUsoHoyHorarioLaboral = new Set();\n// let minutosConEnergyCeroHoyHorarioLaboral = new Set();\n// let todosLosMinutosConDatosEnergyHoyHorarioLaboral = new Set();\n\n// // --- Procesamiento de Datos ---\n// if (msg.payload && Array.isArray(msg.payload)) {\n//     msg.payload.forEach(record => {\n//         if (record === null || typeof record !== 'object' ||\n//             !record._time || record._field === undefined || record._value === undefined) {\n//             return;\n//         }\n\n//         const fechaRecordUtc = new Date(record._time);\n//         const timestampMinutoUtcIso = fechaRecordUtc.toISOString();\n\n//         const recordEnChile_DateObj = new Date(fechaRecordUtc.getTime() + OFFSET_CHILE_UTC * 3600000);\n//         const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n//         const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n//         const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n//         const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n//         const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n\n//         if (anioRecordChile === anioActualChile &&\n//             mesRecordChile === mesActualChile &&\n//             diaRecordChile === diaActualChile) {\n\n//             const esDespuesOIgualAlInicioLaboral =\n//                 (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n//                 (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n//             const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n//             const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n//             if (enHorarioLaboral) {\n//                 if (record._field === \"Energy\") {\n//                     todosLosMinutosConDatosEnergyHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                     if (record._value > 0) {\n//                         minutosDeUsoHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         if (minutosConEnergyCeroHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.delete(timestampMinutoUtcIso);\n//                         }\n//                     } else {\n//                         if (!minutosDeUsoHoyHorarioLaboral.has(timestampMinutoUtcIso)) {\n//                             minutosConEnergyCeroHoyHorarioLaboral.add(timestampMinutoUtcIso);\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     });\n// }\n\n// // --- C√°lculos Finales ---\n// const numMinutosDeUsoHoy = minutosDeUsoHoyHorarioLaboral.size;\n\n// const inicioLaboralEnMinutosDesdeMedianoche = HORA_INICIO_LABORAL_CHILE * 60 + MINUTOS_INICIO_LABORAL_CHILE;\n// const finLaboralEnMinutosDesdeMedianoche = HORA_FIN_LABORAL_CHILE * 60 + MINUTOS_FIN_LABORAL_CHILE;\n// const actualEnMinutosDesdeMedianoche = horaActualChile_Num * 60 + minutosActualesChile_Num;\n\n// let minutosReferenciaParaNoUsoHoy = 0;\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = finLaboralEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else if (actualEnMinutosDesdeMedianoche > inicioLaboralEnMinutosDesdeMedianoche) {\n//     minutosReferenciaParaNoUsoHoy = actualEnMinutosDesdeMedianoche - inicioLaboralEnMinutosDesdeMedianoche;\n// } else {\n//     minutosReferenciaParaNoUsoHoy = 0;\n// }\n// minutosReferenciaParaNoUsoHoy = Math.max(0, minutosReferenciaParaNoUsoHoy);\n\n// const tiempoDeUsoMinutos = numMinutosDeUsoHoy;\n// let tiempoDeNoUsoMinutos = minutosReferenciaParaNoUsoHoy - tiempoDeUsoMinutos;\n// tiempoDeNoUsoMinutos = Math.max(0, tiempoDeNoUsoMinutos);\n\n// // --- Calcular Porcentajes de Uso y No Uso ---\n// let porcentajeUso = 0;\n// let porcentajeNoUso = 0;\n\n// if (minutosReferenciaParaNoUsoHoy > 0) {\n//     porcentajeUso = (tiempoDeUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n//     porcentajeNoUso = (tiempoDeNoUsoMinutos / minutosReferenciaParaNoUsoHoy) * 100;\n// } else {\n//     // Si minutosReferenciaParaNoUsoHoy es 0 (ej. antes del inicio del horario laboral),\n//     // tiempoDeUsoMinutos y tiempoDeNoUsoMinutos tambi√©n ser√°n 0.\n//     // Por lo tanto, los porcentajes son 0%.\n//     porcentajeUso = 0;\n//     porcentajeNoUso = 0;\n// }\n\n// // --- Definir Hora de Inicio y Fin del Periodo ---\n// const inicioHorarioLaboralHoyStr = `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')}`;\n// let finHorarioLaboralConsideradoHoyStr = \"\";\n// if (actualEnMinutosDesdeMedianoche >= finLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')}`;\n// } else if (actualEnMinutosDesdeMedianoche < inicioLaboralEnMinutosDesdeMedianoche) {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// } else {\n//     finHorarioLaboralConsideradoHoyStr = `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`;\n// }\n\n// // --- Formatear Resultados ---\n// msg.payload = {\n//     tiempoDeUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeUsoMinutos,\n//         horas: parseFloat((tiempoDeUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeUso.toFixed(2)) // NUEVO\n//     },\n//     tiempoDeNoUsoHorarioLaboralDiaActual: {\n//         minutos: tiempoDeNoUsoMinutos,\n//         horas: parseFloat((tiempoDeNoUsoMinutos / 60).toFixed(2)),\n//         porcentaje: parseFloat(porcentajeNoUso.toFixed(2)) // NUEVO\n//     },\n//     contextoCalculo: {\n//         fechaReporte: `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`,\n//         horaReporte: `${String(horaActualChile_Num).padStart(2, '0')}:${String(minutosActualesChile_Num).padStart(2, '0')}`,\n//         periodoAnalizadoDiaActual: {\n//             inicio: inicioHorarioLaboralHoyStr,\n//             fin: finHorarioLaboralConsideradoHoyStr\n//         },\n//         minutosDelHorarioLaboralHoyConsideradosParaNoUso: minutosReferenciaParaNoUsoHoy,\n//         offsetUtcUtilizado: OFFSET_CHILE_UTC,\n//         definicionHorarioLaboral:\n//             `${String(HORA_INICIO_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_INICIO_LABORAL_CHILE).padStart(2, '0')} - ` +\n//             `${String(HORA_FIN_LABORAL_CHILE).padStart(2, '0')}:${String(MINUTOS_FIN_LABORAL_CHILE).padStart(2, '0')} (Hora de Chile)`\n//     },\n//     diagnosticoDatosDiaActual: {\n//         minutosUnicosConDatosDeEnergyHoyEnHorarioLaboral: todosLosMinutosConDatosEnergyHoyHorarioLaboral.size,\n//         minutosUnicosDeUsoDetectadosHoy: numMinutosDeUsoHoy,\n//         minutosUnicosConEnergyCeroDetectadosHoyEnHorarioLaboral: minutosConEnergyCeroHoyHorarioLaboral.size\n//     }\n// };\n\n// return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1540,
        "wires": [
            [
                "c00b6099d98a24d7"
            ]
        ]
    },
    {
        "id": "f055401be76a8e62",
        "type": "function",
        "z": "eb65df9c7eb63c1b",
        "name": "function 11",
        "func": "// --- Constantes de Configuraci√≥n para Detecci√≥n de Coladas ---\nconst UMBRAL_POTENCIA_ALTA = 120; // kW - Umbral para considerar que la fusi√≥n ha comenzado/continuado\nconst UMBRAL_POTENCIA_BAJA = 25; // kW - Umbral por debajo del cual se considera baja potencia/posible fin\nconst TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS = 3 * 60 * 1000; // 10 minutos en milisegundos\nconst TIEMPO_MINIMO_FUSION_MS = 15 * 60 * 1000; // Opcional: 5 minutos de fusi√≥n para ser colada v√°lida\n\n// --- Constantes de Horario Laboral y Offset (copiadas del nodo anterior) ---\nconst HORA_INICIO_LABORAL_CHILE = 7;\nconst MINUTOS_INICIO_LABORAL_CHILE = 30;\nconst HORA_FIN_LABORAL_CHILE = 18;\n// const MINUTOS_FIN_LABORAL_CHILE = 0; // No se usa directamente si el fin es HORA_FIN < VALOR\nconst OFFSET_CHILE_UTC = -4;\n\n// --- Variables de Estado y Contadores ---\nlet contadorColadasDiaActual = 0;\nlet estadoHorno = \"APAGADO\"; // Estados: APAGADO, FUSIONANDO, POSIBLE_FIN_COLADA\nlet timestampInicioFusion = null;\nlet timestampInicioBajaPotencia = null;\n\n// --- Determinar Fecha Actual en Chile (para filtrar datos) ---\nconst ahoraEnChile_DateObj = new Date(Date.now() + OFFSET_CHILE_UTC * 3600000);\nconst anioActualChile = ahoraEnChile_DateObj.getUTCFullYear();\nconst mesActualChile = ahoraEnChile_DateObj.getUTCMonth();\nconst diaActualChile = ahoraEnChile_DateObj.getUTCDate();\n\n// --- Procesamiento de Datos ---\nif (msg.payload && Array.isArray(msg.payload)) {\n    // Filtrar y ordenar por tiempo primero (si no viene ordenado, crucial)\n    // Se asume que msg.payload ya est√° ordenado por InfluxDB\n    \n    msg.payload.forEach(record => {\n        if (record === null || typeof record !== 'object' ||\n            !record._time || record._field === undefined || record._value === undefined) {\n            return; \n        }\n\n        // Considerar solo registros de Potencia para este KPI\n        if (record._field !== \"Power\") {\n            return;\n        }\n\n        const fechaRecordUtcOriginal = new Date(record._time);\n        const recordEnChile_DateObj = new Date(fechaRecordUtcOriginal.getTime() + OFFSET_CHILE_UTC * 3600000);\n        const anioRecordChile = recordEnChile_DateObj.getUTCFullYear();\n        const mesRecordChile = recordEnChile_DateObj.getUTCMonth();\n        const diaRecordChile = recordEnChile_DateObj.getUTCDate();\n        const horaRecordChile_Num = recordEnChile_DateObj.getUTCHours();\n        const minutosRecordChile_Num = recordEnChile_DateObj.getUTCMinutes();\n        \n        // Filtro por d√≠a actual y horario laboral\n        if (anioRecordChile === anioActualChile &&\n            mesRecordChile === mesActualChile &&\n            diaRecordChile === diaActualChile) {\n            \n            const esDespuesOIgualAlInicioLaboral = \n                (horaRecordChile_Num > HORA_INICIO_LABORAL_CHILE) ||\n                (horaRecordChile_Num === HORA_INICIO_LABORAL_CHILE && minutosRecordChile_Num >= MINUTOS_INICIO_LABORAL_CHILE);\n            const esAntesDelFinLaboral = (horaRecordChile_Num < HORA_FIN_LABORAL_CHILE);\n            const enHorarioLaboral = esDespuesOIgualAlInicioLaboral && esAntesDelFinLaboral;\n\n            if (enHorarioLaboral) {\n                const potenciaActual = record._value;\n                const tiempoActualMs = fechaRecordUtcOriginal.getTime();\n\n                if (estadoHorno === \"APAGADO\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) {\n                        estadoHorno = \"FUSIONANDO\";\n                        timestampInicioFusion = tiempoActualMs;\n                        timestampInicioBajaPotencia = null; \n                    }\n                } else if (estadoHorno === \"FUSIONANDO\") {\n                    if (potenciaActual < UMBRAL_POTENCIA_BAJA) {\n                        estadoHorno = \"POSIBLE_FIN_COLADA\";\n                        timestampInicioBajaPotencia = tiempoActualMs;\n                    }\n                } else if (estadoHorno === \"POSIBLE_FIN_COLADA\") {\n                    if (potenciaActual >= UMBRAL_POTENCIA_ALTA) { // Subi√≥ la potencia de nuevo\n                        estadoHorno = \"FUSIONANDO\"; // Volver a fusionando, fue bajada temporal\n                        timestampInicioBajaPotencia = null;\n                    } else { // Sigue en baja potencia\n                        if (timestampInicioBajaPotencia !== null) {\n                            const duracionBajaPotenciaMs = tiempoActualMs - timestampInicioBajaPotencia;\n                            if (duracionBajaPotenciaMs >= TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS) {\n                                // Condici√≥n de tiempo de baja potencia cumplida\n                                // Verificar tambi√©n el tiempo m√≠nimo de fusi√≥n (opcional pero recomendado)\n                                if (timestampInicioFusion !== null) {\n                                    const duracionFusionMs = timestampInicioBajaPotencia - timestampInicioFusion; // Tiempo desde inicio fusi√≥n hasta inicio de esta baja larga\n                                    if (duracionFusionMs >= TIEMPO_MINIMO_FUSION_MS) {\n                                        contadorColadasDiaActual++;\n                                    }\n                                } else {\n                                    // Si no hay timestampInicioFusion pero llegamos aqu√≠, es un estado raro.\n                                    // Podr√≠a ser que empez√≥ en POSIBLE_FIN_COLADA. Lo seguro es contar si hay fusi√≥n previa.\n                                }\n                                estadoHorno = \"APAGADO\"; // Resetear para la pr√≥xima colada\n                                timestampInicioFusion = null; // Importante resetear\n                                timestampInicioBajaPotencia = null;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    });\n}\n\n// --- Preparar Salida ---\n// Puedes a√±adir este KPI al payload del mensaje original si este nodo sigue a otro,\n// o crear un nuevo mensaje. Aqu√≠ creo un nuevo objeto en msg.kpiColadas.\nif (!msg.kpiColadas) {\n    msg.kpiColadas = {};\n}\nmsg.kpiColadas.cantidadColadasDiaActual = contadorColadasDiaActual;\nmsg.kpiColadas.diaAnalizado = `${String(diaActualChile).padStart(2, '0')}/${String(mesActualChile + 1).padStart(2, '0')}/${anioActualChile}`;\nmsg.kpiColadas.nota = \"Estimaci√≥n basada en patrones de potencia. Ajustar umbrales seg√∫n operaci√≥n real.\";\nmsg.kpiColadas.estado = estadoHorno;\n// Puedes tambi√©n pasar los umbrales usados para referencia\nmsg.kpiColadas.umbralesConfigurados = {\n    UMBRAL_POTENCIA_ALTA_kW: UMBRAL_POTENCIA_ALTA,\n    UMBRAL_POTENCIA_BAJA_kW: UMBRAL_POTENCIA_BAJA,\n    TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_min: TIEMPO_MINIMO_BAJA_POTENCIA_ENTRE_COLADAS_MS / (60 * 1000),\n    TIEMPO_MINIMO_FUSION_min: TIEMPO_MINIMO_FUSION_MS / (60 * 1000)\n};\n\n// Si quieres que este nodo env√≠e su propio mensaje independiente:\n// return { payload: { kpiColadas: msg.kpiColadas } };\n// Si quieres a√±adirlo al mensaje existente y pasarlo:\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1580,
        "wires": [
            [
                "11e2468a958d2f03"
            ]
        ]
    },
    {
        "id": "11e2468a958d2f03",
        "type": "debug",
        "z": "eb65df9c7eb63c1b",
        "name": "F1H4coladas",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "kpiColadas",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 920,
        "y": 1580,
        "wires": []
    },
    {
        "id": "054daedda561c57a",
        "type": "link out",
        "z": "eb65df9c7eb63c1b",
        "name": "conection-status-output-link",
        "mode": "link",
        "links": [
            "673722a787cbe977"
        ],
        "x": 1065,
        "y": 440,
        "wires": []
    },
    {
        "id": "ac08a9901909bf1c",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "ff4918d8b9197941",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "808ad72d2dcfe7c5"
            ]
        ]
    },
    {
        "id": "453324f3976cd784",
        "type": "inject",
        "z": "e780f688e5979083",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "ff4918d8b9197941",
                "6324c9ecd1f654bf"
            ]
        ]
    },
    {
        "id": "e9c90482530aa2f6",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 60,
        "wires": []
    },
    {
        "id": "808ad72d2dcfe7c5",
        "type": "tcp request",
        "z": "e780f688e5979083",
        "name": "",
        "server": "192.168.1.201",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 630,
        "y": 140,
        "wires": [
            [
                "e9c90482530aa2f6",
                "18ed91e3177f9fec",
                "c2c03860bba5088b"
            ]
        ]
    },
    {
        "id": "ec20ec81866d7036",
        "type": "tcp request",
        "z": "e780f688e5979083",
        "name": "",
        "server": "192.168.1.208",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "1500",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 550,
        "y": 600,
        "wires": [
            [
                "65ae7065e2f1111a",
                "b66ac828162e4928",
                "dea0d81f6d4fd287"
            ]
        ]
    },
    {
        "id": "1b35a9fb7474ea19",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Modbus Request",
        "func": "\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x01,0x03,0x01,0x00,0x00,0x60,0x44,0x1E])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 540,
        "wires": [
            [
                "ec20ec81866d7036"
            ]
        ]
    },
    {
        "id": "342a719225e4fcb0",
        "type": "inject",
        "z": "e780f688e5979083",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "1b35a9fb7474ea19"
            ]
        ]
    },
    {
        "id": "65ae7065e2f1111a",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 560,
        "wires": []
    },
    {
        "id": "ca15947ca32f39d8",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "HORNO 1 FUNDICION 2",
        "info": "",
        "x": 470,
        "y": 60,
        "wires": []
    },
    {
        "id": "9e88d8d60eaae749",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "Medidor de potencia [DPM-C530]",
        "info": "",
        "x": 210,
        "y": 480,
        "wires": []
    },
    {
        "id": "b23f15affa409aef",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "HORNO 2 FUNDICION 2",
        "info": "",
        "x": 470,
        "y": 480,
        "wires": []
    },
    {
        "id": "22fb5c4da538bdc6",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "ADAM-6017",
        "info": "",
        "x": 470,
        "y": 880,
        "wires": []
    },
    {
        "id": "0127ef8ab7d07571",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "SILO SUR Y NORTE FUNDICION 2",
        "info": "",
        "x": 560,
        "y": 860,
        "wires": []
    },
    {
        "id": "527ede977c5d5a83",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "ADAM-6017",
        "info": "",
        "x": 490,
        "y": 1400,
        "wires": []
    },
    {
        "id": "970434d129d8c9fa",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "SILO COHETE FUNDICION 2",
        "info": "",
        "x": 560,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f6ed48fd417378d7",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "function 16",
        "func": "msg.topic=\"InfluxData4\"\nif ((msg.payload === 1) || msg.payload === 2) {\n\n    let disconnect = 0;\n    global.set(\"siloN_S\", disconnect);  // Guarda la primera vez que se activa\n\n    msg.payload={\n    \"silo_sur\" : Number(0),\n    \"silo_norte\" : Number(0),\n    //\"Ch2\": CH2,\n   // \"Ch3\": CH3,\n    //\"Ch4\": CH4,\n    //\"Ch5\": CH5,\n    //\"Ch6\": CH6,\n    //\"Ch7\": CH7\n}\nreturn msg;\n} else if (msg.payload.data){\nvar CH0=msg.payload.data[0]\nvar CH1 = msg.payload.data[1]\nvar CH2 = msg.payload.data[2]\nvar CH3 = msg.payload.data[3]\nvar CH4 = msg.payload.data[4]\nvar CH5 = msg.payload.data[5]\nvar CH6 = msg.payload.data[6]\nvar CH7 = msg.payload.data[7]\n\n//Silo sur\nvar CH07=(0.0021628636*CH7-41.7432685666)\n//silo Norte\nvar CH06=(0.0021628636*CH6-41.7432683746)\n\nCH06 = Number(CH06.toFixed(1));\nCH07 = Number(CH07.toFixed(1));\n\nlet disconnect = 50;\nglobal.set(\"siloN_S\", disconnect);  // Guarda la primera vez que se activa\n\nmsg.payload={\n    \"silo_sur\" : CH07,\n    \"silo_norte\" : CH06,\n    //\"Ch6\": CH6,\n   // \"Ch7\": CH7,\n    //\"Ch4\": CH4,\n    //\"Ch5\": CH5,\n    //\"Ch6\": CH6,\n    //\"Ch7\": CH7\n}\nreturn msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 980,
        "wires": [
            [
                "2b77b3330651651a",
                "0fcc4b5a96210345"
            ]
        ]
    },
    {
        "id": "2b77b3330651651a",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 940,
        "wires": []
    },
    {
        "id": "95e9366bd095a361",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "function 17",
        "func": "msg.topic = \"InfluxData5\"\n\nif (msg.payload === 1 || msg.payload === 2) {\n\n    let disconnect = 0;\n    global.set(\"silo_cohete1\", disconnect);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"silo_cohete\": Number(0),\n        //\"Ch2\": CH2,\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    var CH2 = msg.payload.data[2]\n    var CH3 = msg.payload.data[3]\n    var CH4 = msg.payload.data[4]\n    var CH5 = msg.payload.data[5]\n    var CH6 = msg.payload.data[6]\n    var CH7 = msg.payload.data[7]\n\n    //silo cohete\n    var CH07 = (0.00196944732 * CH7 - 29.0694239291);\n\n    CH07 = Number(CH07.toFixed(1));\n    if (CH07 < 0) {\n        CH07 = 0.1;\n    }\n\n    let disconnect = 50;\n    global.set(\"silo_cohete1\", disconnect);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"silo_cohete\": CH07,\n        //\"Ch7\": CH7,\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1480,
        "wires": [
            [
                "edc1e46a2727fdcd",
                "a047ae66f11228d0"
            ]
        ]
    },
    {
        "id": "edc1e46a2727fdcd",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5cf202290b9cea09",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "808ad72d2dcfe7c5"
            ]
        ]
    },
    {
        "id": "6324c9ecd1f654bf",
        "type": "delay",
        "z": "e780f688e5979083",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 260,
        "wires": [
            [
                "5cf202290b9cea09"
            ]
        ]
    },
    {
        "id": "e58b99ace4c70cd1",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 180,
        "wires": []
    },
    {
        "id": "18ed91e3177f9fec",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n    var power1 = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n   \n    global.set(\"potHorno1F2\", power);  // Guarda la primera vez que se activa\n    // let ultimoNivelPot = global.get(\"potHorno1F2\") || power;\n    // node.status({ fill: \"blue\", shape: \"dot\", text: \"potHorno1F2: \" + ultimoNivelPot });\n    \n    // node.warn(\"Valor de potHorno1F2: \" + ultimoNivelPot);\n    \n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "6043b96234f930a3"
            ]
        ]
    },
    {
        "id": "c2c03860bba5088b",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n    \n    global.set(\"potHorno1F2\", power);  // Guarda la primera vez que se activa\n    let ultimoNivelPot = global.get(\"potHorno1F2\") || power;\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"potHorno1F2: \" + ultimoNivelPot });\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1500;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "6043b96234f930a3",
                "38f8ec1dd7c9e88a"
            ]
        ]
    },
    {
        "id": "6043b96234f930a3",
        "type": "switch",
        "z": "e780f688e5979083",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 280,
        "wires": [
            [
                "f56a126ed595ab51",
                "e58b99ace4c70cd1"
            ],
            [
                "f138b5c2d25559e2",
                "f56a126ed595ab51"
            ]
        ]
    },
    {
        "id": "d7e6af4f54bf9b29",
        "type": "catch",
        "z": "e780f688e5979083",
        "name": "",
        "scope": [
            "ec20ec81866d7036"
        ],
        "uncaught": false,
        "x": 510,
        "y": 740,
        "wires": [
            [
                "29ac93cb9611089d",
                "b66ac828162e4928"
            ]
        ]
    },
    {
        "id": "df1e57a0100a854a",
        "type": "catch",
        "z": "e780f688e5979083",
        "name": "",
        "scope": [
            "808ad72d2dcfe7c5"
        ],
        "uncaught": false,
        "x": 450,
        "y": 320,
        "wires": [
            [
                "c2c03860bba5088b"
            ]
        ]
    },
    {
        "id": "51da8ecae5eac0c9",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1320,
        "wires": []
    },
    {
        "id": "392f5a4fb4be6930",
        "type": "exec",
        "z": "e780f688e5979083",
        "command": "ping -c 1 192.168.1.27",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 360,
        "y": 1200,
        "wires": [
            [],
            [],
            [
                "672ee01e981fc9fd"
            ]
        ]
    },
    {
        "id": "68632c20ca09cc51",
        "type": "inject",
        "z": "e780f688e5979083",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "392f5a4fb4be6930"
            ]
        ]
    },
    {
        "id": "672ee01e981fc9fd",
        "type": "switch",
        "z": "e780f688e5979083",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 1200,
        "wires": [
            [
                "e6178cea6e68d0b4"
            ],
            [
                "9ee44ca72bcaa7bb"
            ],
            [
                "63068dd0facd0256"
            ]
        ],
        "outputLabels": [
            "Online",
            "Offline",
            ""
        ]
    },
    {
        "id": "63068dd0facd0256",
        "type": "change",
        "z": "e780f688e5979083",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1260,
        "wires": [
            [
                "51da8ecae5eac0c9",
                "0afc9c61fd6a9610"
            ]
        ]
    },
    {
        "id": "e6178cea6e68d0b4",
        "type": "change",
        "z": "e780f688e5979083",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1140,
        "wires": [
            [
                "d505150a27aed8aa",
                "0afc9c61fd6a9610"
            ]
        ]
    },
    {
        "id": "d505150a27aed8aa",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1080,
        "wires": []
    },
    {
        "id": "9ee44ca72bcaa7bb",
        "type": "change",
        "z": "e780f688e5979083",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "e4f738906a8f90b3",
                "0afc9c61fd6a9610"
            ]
        ]
    },
    {
        "id": "e4f738906a8f90b3",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f78860345ace1f4a",
        "type": "link in",
        "z": "e780f688e5979083",
        "name": "Estado silo NorteSur",
        "links": [
            "0afc9c61fd6a9610"
        ],
        "x": 445,
        "y": 1040,
        "wires": [
            [
                "f6ed48fd417378d7"
            ]
        ]
    },
    {
        "id": "0afc9c61fd6a9610",
        "type": "link out",
        "z": "e780f688e5979083",
        "name": "Estado silo NorteSur Out",
        "mode": "link",
        "links": [
            "f78860345ace1f4a"
        ],
        "x": 925,
        "y": 1200,
        "wires": []
    },
    {
        "id": "9becd17d1f04728a",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1840,
        "wires": []
    },
    {
        "id": "f6fe698ffc416714",
        "type": "exec",
        "z": "e780f688e5979083",
        "command": "ping -c 1 192.168.1.28",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 340,
        "y": 1720,
        "wires": [
            [
                "de6e988e5425767b"
            ],
            [],
            [
                "c22f0ce301241529"
            ]
        ]
    },
    {
        "id": "3cd32330b6d496f6",
        "type": "inject",
        "z": "e780f688e5979083",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1640,
        "wires": [
            [
                "f6fe698ffc416714"
            ]
        ]
    },
    {
        "id": "c22f0ce301241529",
        "type": "switch",
        "z": "e780f688e5979083",
        "name": "",
        "property": "payload.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 1720,
        "wires": [
            [
                "aa4d583351a797ab"
            ],
            [
                "81d7a04b8534a276"
            ],
            [
                "420ad9e9e49b8992"
            ]
        ],
        "outputLabels": [
            "Online",
            "Offline",
            ""
        ]
    },
    {
        "id": "420ad9e9e49b8992",
        "type": "change",
        "z": "e780f688e5979083",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1780,
        "wires": [
            [
                "9becd17d1f04728a",
                "7c02703a1a5a790e"
            ]
        ]
    },
    {
        "id": "aa4d583351a797ab",
        "type": "change",
        "z": "e780f688e5979083",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 1660,
        "wires": [
            [
                "576ed34a1b251dff",
                "7c02703a1a5a790e"
            ]
        ]
    },
    {
        "id": "576ed34a1b251dff",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1600,
        "wires": []
    },
    {
        "id": "81d7a04b8534a276",
        "type": "change",
        "z": "e780f688e5979083",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.code",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1720,
        "wires": [
            [
                "d486c079d55a72af",
                "7c02703a1a5a790e"
            ]
        ]
    },
    {
        "id": "d486c079d55a72af",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 34",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1760,
        "wires": []
    },
    {
        "id": "7c02703a1a5a790e",
        "type": "link out",
        "z": "e780f688e5979083",
        "name": "Estado silo cohete out",
        "mode": "link",
        "links": [
            "c1697e770acd2025"
        ],
        "x": 925,
        "y": 1720,
        "wires": []
    },
    {
        "id": "c1697e770acd2025",
        "type": "link in",
        "z": "e780f688e5979083",
        "name": "Estado Silo Cohete",
        "links": [
            "7c02703a1a5a790e"
        ],
        "x": 455,
        "y": 1540,
        "wires": [
            [
                "95e9366bd095a361"
            ]
        ]
    },
    {
        "id": "de6e988e5425767b",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 37",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1860,
        "wires": []
    },
    {
        "id": "b30239e240989793",
        "type": "udp in",
        "z": "e780f688e5979083",
        "name": "",
        "iface": "",
        "port": "5168",
        "ipv": "udp4",
        "multicast": "false",
        "group": "192.168.0.215",
        "datatype": "buffer",
        "x": 180,
        "y": 2020,
        "wires": [
            [
                "c5882568eb4d34fc",
                "a1f9e99af90cbea7"
            ]
        ]
    },
    {
        "id": "c5882568eb4d34fc",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "function 19",
        "func": "msg.topic = \"InfluxData7\";\n\n// Crear un mensaje con el √∫ltimo dato y enviarlo\nvar D0 = msg.payload[22];\nvar D1 = msg.payload[23];\nvar D2 = msg.payload[24];\nvar D3 = msg.payload[25];\n\nvar Dato1 = /*'0x'+*/ (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2);\nvar Dato2 = /*'0x'+*/ (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n\nvar DECtemp1 = (parseInt(Dato1, 16));\nvar DECtemp2 = (parseInt(Dato2, 16));\n\nvar Temp1 = (0.0209048406 * DECtemp1 + 0.0058329264);\nvar Temp2 = (0.0209048406 * DECtemp2 + 0.0058329264);\n\nif (Number(Temp1.toFixed(2)) > 70) {\n    let disconnect1 = 50;\n    global.set(\"hornoTT1F2\", disconnect1);  // Guarda la primera vez que se activa\n}else {\n    let disconnect1 = 0;\n    global.set(\"hornoTT1F2\", disconnect1);  // Guarda la primera vez que se activa\n}\n\nif (Number(Temp2.toFixed(2)) > 70) {\n    let disconnect2 = 50;\n    global.set(\"hornoTT2F2\", disconnect2);  // Guarda la primera vez que se activa\n} else {\n    let disconnect2 = 0;\n    global.set(\"hornoTT2F2\", disconnect2);  // Guarda la primera vez que se activa\n}\n\nmsg.payload = {\n    \"TT_horno1_F2\": Number(Temp1.toFixed(2)),\n    \"TT_horno2_F2\": Number(Temp2.toFixed(2)),\n    //\"Ch4\": CH4,\n    //\"Ch5\": CH5,\n    //\"Ch6\": CH6,\n    //\"Ch7\": CH7\n};\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2020,
        "wires": [
            [
                "fea08019c7f9251a"
            ]
        ]
    },
    {
        "id": "fea08019c7f9251a",
        "type": "trigger",
        "z": "e780f688e5979083",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 2020,
        "wires": [
            [
                "aa153729e9aa0146",
                "8b1f9a49acf3c0cd"
            ]
        ]
    },
    {
        "id": "aa153729e9aa0146",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 38",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1980,
        "wires": []
    },
    {
        "id": "f138b5c2d25559e2",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 39",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 360,
        "wires": []
    },
    {
        "id": "ce573c28cf761ca7",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "TRATAMIENTOS TERMICOS FUNDICION 2",
        "info": "",
        "x": 410,
        "y": 1960,
        "wires": []
    },
    {
        "id": "29ac93cb9611089d",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 40",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 760,
        "wires": []
    },
    {
        "id": "b66ac828162e4928",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Data selection and formatting",
        "func": "msg.topic = \"InfluxData2\"\n\nif ((msg.payload[7] === 0x1e) && (msg.payload[6] === 0x44) && (msg.payload[5] === 0x60) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x0) && (msg.payload[2] === 0x1) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x1)) {\n\n    var voltage = 0;\n    var voltageB = 0;\n    var voltageC = 0;\n    var current = 0;\n    var currentB = 0;\n    var currentC = 0;\n    var power = 0;\n    var energy = 0;\n\n    global.set(\"potHorno2F2\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy,\n        \"error\": msg.error\n    }\n    return msg;\n} else {\n\n    //----Seleccion de datos-----\n    //Voltage phase A\n    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n    //AVGvoltage\n    var D4 = msg.payload[17];\n    var D5 = msg.payload[18];\n    var D6 = msg.payload[15];\n    var D7 = msg.payload[16];\n    //Current phase A\n    var D8 = msg.payload[69]\n    var D9 = msg.payload[70]\n    var D10 = msg.payload[67]\n    var D11 = msg.payload[68]\n    //Potencia\n    var D12 = msg.payload[141]\n    var D13 = msg.payload[142]\n    var D14 = msg.payload[139]\n    var D15 = msg.payload[140]\n    //Energia\n    var D16 = msg.payload[189]\n    var D17 = msg.payload[190]\n    var D18 = msg.payload[187]\n    var D19 = msg.payload[188]\n    //Voltage phase B\n    var D20 = msg.payload[25];\n    var D21 = msg.payload[26];\n    var D22 = msg.payload[23];\n    var D23 = msg.payload[24];\n    //Voltage phase C\n    var D24 = msg.payload[29];\n    var D25 = msg.payload[30];\n    var D26 = msg.payload[27];\n    var D27 = msg.payload[28];\n    //Current phase B\n    var D28 = msg.payload[73]\n    var D29 = msg.payload[74]\n    var D30 = msg.payload[71]\n    var D31 = msg.payload[72]\n    //Current phase C\n    var D32 = msg.payload[77]\n    var D33 = msg.payload[78]\n    var D34 = msg.payload[75]\n    var D35 = msg.payload[76]\n    //Error\n    var D100 = msg.payload[7]\n\n    //------ Concatenacion para dejar un HEX por solicitud------------\n    var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n    var VoltB = '0x' + (\"00\" + D20.toString(16)).slice(-2) + (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2);\n    var VoltC = '0x' + (\"00\" + D24.toString(16)).slice(-2) + (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2);\n    var AVGv = '0x' + (\"00\" + D4.toString(16)).slice(-2) + (\"00\" + D5.toString(16)).slice(-2) + (\"00\" + D6.toString(16)).slice(-2) + (\"00\" + D7.toString(16)).slice(-2);\n    var CurrA = '0x' + (\"00\" + D8.toString(16)).slice(-2) + (\"00\" + D9.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2);\n    var CurrB = '0x' + (\"00\" + D28.toString(16)).slice(-2) + (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2);\n    var CurrC = '0x' + (\"00\" + D32.toString(16)).slice(-2) + (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2);\n    var Pow = '0x' + (\"00\" + D12.toString(16)).slice(-2) + (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2);\n    var En = '0x' + (\"00\" + D16.toString(16)).slice(-2) + (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2);\n\n    var Errorr = '0x' + (\"00\" + D100.toString(16)).slice(-2);\n\n    //------- Funcion para transformar HEX a float ----------\n    function parseFloat(str) {\n        var float = 0, sign, order, mantissa, exp, int = 0, multi = 1;\n        if (/^0x/.exec(str)) {\n            int = parseInt(str, 16);\n        } else {\n            for (var i = str.length - 1; i >= 0; i -= 1) {\n                if (str.charCodeAt(i) > 255) {\n                    return false;\n                }\n                int += str.charCodeAt(i) * multi;\n                multi *= 256;\n            }\n        }\n        sign = (int >>> 31) ? -1 : 1;\n        exp = (int >>> 23 & 0xff) - 127;\n        mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n        for (i = 0; i < mantissa.length; i += 1) {\n            float += parseInt(mantissa[i]) ? Math.pow(2, exp) : 0;\n            exp--;\n        }\n        return float * sign;\n    }\n    var voltage = Number(parseFloat(VoltA).toFixed(2));\n    var voltageB = Number(parseFloat(VoltB).toFixed(2));\n    var voltageC = Number(parseFloat(VoltC).toFixed(2));\n    var current = Number(parseFloat(CurrA).toFixed(2));\n    var currentB = Number(parseFloat(CurrB).toFixed(2));\n    var currentC = Number(parseFloat(CurrC).toFixed(2));\n    var power = Number(parseFloat(Pow).toFixed(2));\n    var energy = Number(parseFloat(En).toFixed(0) / 1000);\n\n\n    global.set(\"potHorno2F2\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 660,
        "wires": [
            [
                "6d4b6e74debde853",
                "8a8b714315dd21fa"
            ]
        ]
    },
    {
        "id": "6d4b6e74debde853",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 620,
        "wires": []
    },
    {
        "id": "ab1b88cbea27fe20",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "function 20",
        "func": "msg.topic = \"InfluxData5\"\n\nif (msg.payload === 1 || msg.payload === 2) {\n    msg.payload = {\n        \"Tin_arena\": 0,\n        \"Tout_arena\": 0,\n        \"Tin_agua\": 0,\n        \"Tout_agua\": 0,\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    var CH2 = msg.payload.data[2]\n    var CH3 = msg.payload.data[3]\n    var CH4 = msg.payload.data[4]\n    var CH5 = msg.payload.data[5]\n    var CH6 = msg.payload.data[6]\n    var CH7 = msg.payload.data[7]\n\n    //silo cohete\n    var CH00 = (0.0061 * CH0 + 0.0031);\n    var CH01 = (0.0061 * CH1 + 0.0031);\n    var CH02 = (0.0061 * CH2 + 0.0031);\n    var CH03 = (0.0061 * CH3 + 0.0031);\n\n    CH00 = Number(CH00.toFixed(1));\n    CH01 = Number(CH01.toFixed(1));\n    CH02 = Number(CH02.toFixed(1));\n    CH03 = Number(CH03.toFixed(1));\n\n    msg.payload = {\n        \"Tin_arena\": CH00,\n        \"Tout_arena\": CH01,\n        \"Tout_agua\": CH02,\n        \"Tin_agua\": CH03,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2740,
        "wires": [
            [
                "ed9a2c24cb28ccca"
            ]
        ]
    },
    {
        "id": "8a8b714315dd21fa",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Horno2_F2",
        "measurement": "F2-Horno2-[DPM-C530]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion2",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "0fcc4b5a96210345",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "901545a3e9d96401",
        "name": "DB_SiloNyS_F2",
        "measurement": "F2-silo-NyS-[ADAM6017]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion2",
        "x": 780,
        "y": 980,
        "wires": []
    },
    {
        "id": "a047ae66f11228d0",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "901545a3e9d96401",
        "name": "DB_SiloCohete_F2",
        "measurement": "F2-silo-cohete-[ADAM6017]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion2",
        "x": 790,
        "y": 1480,
        "wires": []
    },
    {
        "id": "f56a126ed595ab51",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Horno1_F2",
        "measurement": "F2-Horno1-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion2",
        "x": 980,
        "y": 260,
        "wires": []
    },
    {
        "id": "8b1f9a49acf3c0cd",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "901545a3e9d96401",
        "name": "DB_TratamientosTermicosF2",
        "measurement": "F2-TT-[ADAM-6018]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion2",
        "x": 760,
        "y": 2040,
        "wires": []
    },
    {
        "id": "ed9a2c24cb28ccca",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Temperatura _lecho_F2",
        "measurement": "F2-Temp-Lecho",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion2",
        "x": 560,
        "y": 2740,
        "wires": []
    },
    {
        "id": "1a50679c69be037b",
        "type": "modbus-read",
        "z": "e780f688e5979083",
        "name": "Leer silo norte y sur",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "fd812ec1a0185442",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 330,
        "y": 980,
        "wires": [
            [],
            [
                "f6ed48fd417378d7"
            ]
        ]
    },
    {
        "id": "dcf7a62ba5edebb4",
        "type": "modbus-read",
        "z": "e780f688e5979083",
        "name": "Leer silo cohete",
        "topic": "",
        "showStatusActivities": true,
        "logIOActivities": false,
        "showErrors": true,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "62685803db2817d6",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": true,
        "x": 300,
        "y": 1480,
        "wires": [
            [],
            [
                "edc1e46a2727fdcd",
                "95e9366bd095a361"
            ]
        ]
    },
    {
        "id": "f6eddcfd6cb2b9c8",
        "type": "modbus-read",
        "z": "e780f688e5979083",
        "name": "Leer silo cohete",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "1",
        "rateUnit": "m",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "62685803db2817d6",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 120,
        "y": 2740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "588cd6dd7f4edf34",
        "type": "modbus-read",
        "z": "e780f688e5979083",
        "name": "Temperatura Lecho F2",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "8",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "0bd0941b0d027eab",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 2740,
        "wires": [
            [],
            [
                "ab1b88cbea27fe20"
            ]
        ]
    },
    {
        "id": "b90adc4a7bdda62a",
        "type": "inject",
        "z": "e780f688e5979083",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1290,
        "y": 60,
        "wires": [
            [
                "797a8482b68a3570"
            ]
        ]
    },
    {
        "id": "797a8482b68a3570",
        "type": "link out",
        "z": "e780f688e5979083",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "9cb41b5c3784f0e9"
        ],
        "x": 1415,
        "y": 60,
        "wires": []
    },
    {
        "id": "9cb41b5c3784f0e9",
        "type": "link in",
        "z": "e780f688e5979083",
        "name": "connection-status-link",
        "links": [
            "797a8482b68a3570"
        ],
        "x": 1285,
        "y": 400,
        "wires": [
            [
                "1395a50d10b2aa26"
            ]
        ]
    },
    {
        "id": "d1734a72bc676a1c",
        "type": "join",
        "z": "e780f688e5979083",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "10",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1750,
        "y": 60,
        "wires": [
            [
                "871eabf81f10c64e"
            ]
        ]
    },
    {
        "id": "673722a787cbe977",
        "type": "link in",
        "z": "e780f688e5979083",
        "name": "link in 1",
        "links": [
            "e97c8033a532ee94",
            "054daedda561c57a"
        ],
        "x": 1665,
        "y": 60,
        "wires": [
            [
                "d1734a72bc676a1c"
            ]
        ]
    },
    {
        "id": "e97c8033a532ee94",
        "type": "link out",
        "z": "e780f688e5979083",
        "name": "conection-status-output-link",
        "mode": "link",
        "links": [
            "673722a787cbe977"
        ],
        "x": 1915,
        "y": 400,
        "wires": []
    },
    {
        "id": "871eabf81f10c64e",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Array",
        "func": "var data = msg.payload;\n\nvar transformedData = {\n    horno2F2: data.horno2F2.horno2,\n    horno1F2: data.horno1F2.horno1,\n    silo_cohete: data.SiloCohete.silo_cohete,\n    silo_norte: data.SiloNyS.silo_norte,\n    silo_sur: data.SiloNyS.silo_sur,\n    hornoTT1F2: data.hornoTT1F2.hornoTT1F2,\n    hornoTT2F2: data.hornoTT2F2.hornoTT2F2,\n    horno2F1: data.horno2F1.horno2F1,\n    horno4F1: data.horno4F1.horno4F1,\n    horno1F1: data.horno1F1.horno1F1,\n    horno3F1: data.horno3F1.horno3F1,\n}\n\nmsg.payload = transformedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 60,
        "wires": [
            [
                "edf0edd98f9e6b2b",
                "284807aa123efcfe"
            ]
        ]
    },
    {
        "id": "284807aa123efcfe",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 48",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 60,
        "wires": []
    },
    {
        "id": "edf0edd98f9e6b2b",
        "type": "websocket out",
        "z": "e780f688e5979083",
        "name": "CStatus-WebSocket",
        "server": "4dd79f1fdbfd6807",
        "client": "",
        "x": 2080,
        "y": 120,
        "wires": []
    },
    {
        "id": "34a13847ac515b23",
        "type": "websocket in",
        "z": "e780f688e5979083",
        "name": "reload-WebSocket",
        "server": "4dd79f1fdbfd6807",
        "client": "",
        "x": 1290,
        "y": 180,
        "wires": [
            [
                "cb98fa3a7b06d8c1"
            ]
        ]
    },
    {
        "id": "cb98fa3a7b06d8c1",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "scrpit",
        "func": "if (msg.payload === \"true\") {\n    var msg1 = {payload: 1 };\n}\nnode.send([msg1]);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 120,
        "wires": [
            [
                "797a8482b68a3570"
            ]
        ]
    },
    {
        "id": "38f8ec1dd7c9e88a",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 50",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 420,
        "wires": []
    },
    {
        "id": "6a9528ec9e041a0d",
        "type": "modbus-read",
        "z": "e780f688e5979083",
        "name": "Presion_shakout",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "0",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "2",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "7a46a0045114eb9d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 160,
        "y": 2360,
        "wires": [
            [],
            [
                "839e4d18dfeff576",
                "b9ebf4439ea19e2c"
            ]
        ]
    },
    {
        "id": "e934fed44e729355",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 2620,
        "wires": []
    },
    {
        "id": "839e4d18dfeff576",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Data formatting",
        "func": "msg.topic = \"InfluxData5\"\n\nif (msg.payload === 1 || msg.payload === 2) {\n    msg.payload = {\n        \"Presion_bombona\": Number(0),\n        \"Presion_entrada\": Number(0),\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    // var CH2 = msg.payload.data[2]\n    // var CH3 = msg.payload.data[3]\n    // var CH4 = msg.payload.data[4]\n    // var CH5 = msg.payload.data[5]\n    // var CH6 = msg.payload.data[6]\n    // var CH7 = msg.payload.data[7]\n\n   \n    var CH00 = (15.2590218967 * CH0)/100000;\n    var CH01 = (15.2590218967 * CH1)/100000;\n\n    CH00 = Number(CH00.toFixed(2));\n    if (CH00 < 0) {\n        CH00 = 0.1;\n    }\n    CH01 = Number(CH01.toFixed(2));\n    if (CH01 < 0) {\n        CH01 = 0.1;\n    }\n\n    msg.payload = {\n        \"Presion_bombona\": CH00,\n        \"Presion_entrada\": CH01,\n        //\"Ch7\": CH7,\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2320,
        "wires": [
            [
                "fbd41e8a4a9723e3"
            ]
        ]
    },
    {
        "id": "fbd41e8a4a9723e3",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Presion_shakeout_F2",
        "measurement": "F2-Bombona-Shakeout",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion2",
        "x": 550,
        "y": 2300,
        "wires": []
    },
    {
        "id": "92c93b8c6a3e2d84",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Modbus Request",
        "func": "\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x01,0x03,0x01,0x00,0x00,0x60,0x44,0x1E])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2120,
        "wires": [
            [
                "685f8327d39fdd5b"
            ]
        ]
    },
    {
        "id": "b216172a2005c439",
        "type": "inject",
        "z": "e780f688e5979083",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2120,
        "wires": [
            [
                "92c93b8c6a3e2d84"
            ]
        ]
    },
    {
        "id": "685f8327d39fdd5b",
        "type": "tcp request",
        "z": "e780f688e5979083",
        "name": "",
        "server": "192.168.1.204",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "1500",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 570,
        "y": 2120,
        "wires": [
            [
                "2741b63a90d9b26f"
            ]
        ]
    },
    {
        "id": "2741b63a90d9b26f",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Data selection and formatting",
        "func": "msg.topic = \"InfluxData2\"\n\nif ((msg.payload[7] === 0x1e) && (msg.payload[6] === 0x44) && (msg.payload[5] === 0x60) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x0) && (msg.payload[2] === 0x1) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x1)) {\n\n    msg.payload = {\n        \"Voltage\": Number(0),\n        \"VoltageB\": Number(0),\n        \"VoltageC\": Number(0),\n        \"Current\": Number(0),\n        \"CurrentB\": Number(0),\n        \"CurrentC\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0),\n        \"error\": msg.error\n    }\n    return msg;\n} else {\n\n    //----Seleccion de datos-----\n    //Voltage phase A\n    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n    //AVGvoltage\n    var D4 = msg.payload[17];\n    var D5 = msg.payload[18];\n    var D6 = msg.payload[15];\n    var D7 = msg.payload[16];\n    //Current phase A\n    var D8 = msg.payload[69]\n    var D9 = msg.payload[70]\n    var D10 = msg.payload[67]\n    var D11 = msg.payload[68]\n    //Potencia\n    var D12 = msg.payload[141]\n    var D13 = msg.payload[142]\n    var D14 = msg.payload[139]\n    var D15 = msg.payload[140]\n    //Energia\n    var D16 = msg.payload[189]\n    var D17 = msg.payload[190]\n    var D18 = msg.payload[187]\n    var D19 = msg.payload[188]\n    //Voltage phase B\n    var D20 = msg.payload[25];\n    var D21 = msg.payload[26];\n    var D22 = msg.payload[23];\n    var D23 = msg.payload[24];\n    //Voltage phase C\n    var D24 = msg.payload[29];\n    var D25 = msg.payload[30];\n    var D26 = msg.payload[27];\n    var D27 = msg.payload[28];\n    //Current phase B\n    var D28 = msg.payload[73]\n    var D29 = msg.payload[74]\n    var D30 = msg.payload[71]\n    var D31 = msg.payload[72]\n    //Current phase C\n    var D32 = msg.payload[77]\n    var D33 = msg.payload[78]\n    var D34 = msg.payload[75]\n    var D35 = msg.payload[76]\n    //Error\n    var D100 = msg.payload[7]\n\n    //------ Concatenacion para dejar un HEX por solicitud------------\n    var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n    var VoltB = '0x' + (\"00\" + D20.toString(16)).slice(-2) + (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2);\n    var VoltC = '0x' + (\"00\" + D24.toString(16)).slice(-2) + (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2);\n    var AVGv = '0x' + (\"00\" + D4.toString(16)).slice(-2) + (\"00\" + D5.toString(16)).slice(-2) + (\"00\" + D6.toString(16)).slice(-2) + (\"00\" + D7.toString(16)).slice(-2);\n    var CurrA = '0x' + (\"00\" + D8.toString(16)).slice(-2) + (\"00\" + D9.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2);\n    var CurrB = '0x' + (\"00\" + D28.toString(16)).slice(-2) + (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2);\n    var CurrC = '0x' + (\"00\" + D32.toString(16)).slice(-2) + (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2);\n    var Pow = '0x' + (\"00\" + D12.toString(16)).slice(-2) + (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2);\n    var En = '0x' + (\"00\" + D16.toString(16)).slice(-2) + (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2);\n\n    var Errorr = '0x' + (\"00\" + D100.toString(16)).slice(-2);\n\n    //------- Funcion para transformar HEX a float ----------\n    function parseFloat(str) {\n        var float = 0, sign, order, mantissa, exp, int = 0, multi = 1;\n        if (/^0x/.exec(str)) {\n            int = parseInt(str, 16);\n        } else {\n            for (var i = str.length - 1; i >= 0; i -= 1) {\n                if (str.charCodeAt(i) > 255) {\n                    return false;\n                }\n                int += str.charCodeAt(i) * multi;\n                multi *= 256;\n            }\n        }\n        sign = (int >>> 31) ? -1 : 1;\n        exp = (int >>> 23 & 0xff) - 127;\n        mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n        for (i = 0; i < mantissa.length; i += 1) {\n            float += parseInt(mantissa[i]) ? Math.pow(2, exp) : 0;\n            exp--;\n        }\n        return float * sign;\n    }\n    msg.payload = {\n        \"Voltage\": Number(parseFloat(VoltA).toFixed(2)),\n        \"VoltageB\": Number(parseFloat(VoltB).toFixed(2)),\n        \"VoltageC\": Number(parseFloat(VoltC).toFixed(2)),\n        \"Current\": Number(parseFloat(CurrA).toFixed(2)),\n        \"CurrentB\": Number(parseFloat(CurrB).toFixed(2)),\n        \"CurrentC\": Number(parseFloat(CurrC).toFixed(2)),\n        \"Power\": Number(parseFloat(Pow).toFixed(2)),\n        \"Energy\": Number(parseFloat(En).toFixed(0)/1000)\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "b9ebf4439ea19e2c",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Counter_bombona_function",
        "func": "var previousCounter = global.get('previousCounter') || 0;\nvar count = global.get('count') || 0;\n\nif (msg.payload === 1 || msg.payload === 2) {\n    msg.payload = {\n        \"Presion_bombona\": Number(0),\n        \"Presion_entrada\": Number(0),\n        // \"Ch3\": CH3,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n} else if (msg.payload.data) {\n    var CH0 = msg.payload.data[0]\n    var CH1 = msg.payload.data[1]\n    // var CH2 = msg.payload.data[2]\n    // var CH3 = msg.payload.data[3]\n    // var CH4 = msg.payload.data[4]\n    // var CH5 = msg.payload.data[5]\n    // var CH6 = msg.payload.data[6]\n    // var CH7 = msg.payload.data[7]\n\n   \n    var CH00 = (15.2590218967 * CH0)/100000;\n    var CH01 = (15.2590218967 * CH1)/100000;\n    var counter;\n      \n\n    CH00 = Number(CH00.toFixed(2));\n    if (CH00 < 0) {\n        CH00 = 0.1;\n    }\n    else if(CH00 >= 0.3) {\n        counter = 1;\n \n    }\n    else if (CH00 <= 0.2 && CH00 >= 0) {\n        counter = 0\n    }\n\n    CH01 = Number(CH01.toFixed(2));\n    if (CH01 < 0) {\n        CH01 = 0.1;\n    }\n\n    if (previousCounter === 1 && counter === 0) {\n        count += 1;\n    }\n\n    global.set('previousCounter', counter);\n    global.set('count', count);\n    \n    msg.payload = {\n        \"Presion_bombona\": CH00,\n        \"Presion_entrada\": CH01,\n        \"counter\": count,\n        \"counterup\": counter,\n        //\"Ch4\": CH4,\n        //\"Ch5\": CH5,\n        //\"Ch6\": CH6,\n        //\"Ch7\": CH7\n    }\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2420,
        "wires": [
            [
                "5443a903d2699e4a",
                "013d569ec0e34465"
            ]
        ]
    },
    {
        "id": "4b35a441057952c1",
        "type": "comment",
        "z": "e780f688e5979083",
        "name": "LECHO FLUIDIZADO Y SHAKEOUT FUNDICION 2",
        "info": "",
        "x": 430,
        "y": 2240,
        "wires": []
    },
    {
        "id": "5443a903d2699e4a",
        "type": "influxdb out",
        "z": "e780f688e5979083",
        "influxdb": "0cd0de0349e15191",
        "name": "DB_Counter_bombona_F2",
        "measurement": "F2-Bombona-Shakeout",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "counter-data",
        "x": 660,
        "y": 2420,
        "wires": []
    },
    {
        "id": "7f146f062f5af688",
        "type": "websocket out",
        "z": "e780f688e5979083",
        "name": "CStatus-WebSocket",
        "server": "e6786a342ce86a73",
        "client": "",
        "x": 580,
        "y": 2560,
        "wires": []
    },
    {
        "id": "ca4135e5794125ac",
        "type": "influxdb in",
        "z": "e780f688e5979083",
        "influxdb": "0cd0de0349e15191",
        "name": "",
        "query": "from(bucket: \"counter-data\")\n|> range(start: -24h)\n|> filter(fn: (r) => r[\"_measurement\"] == \"F2-Bombona-Shakeout\")\n|> filter(fn: (r) => r[\"_field\"] == \"counter\")\n|> max()",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 350,
        "y": 2560,
        "wires": [
            [
                "7f146f062f5af688",
                "a1c75e3aac6ac10c"
            ]
        ]
    },
    {
        "id": "426457ab28fc3397",
        "type": "inject",
        "z": "e780f688e5979083",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2560,
        "wires": [
            [
                "ca4135e5794125ac"
            ]
        ]
    },
    {
        "id": "013d569ec0e34465",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 56",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 2460,
        "wires": []
    },
    {
        "id": "a1c75e3aac6ac10c",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "Reset counter bombona",
        "func": "var lastCounter = msg.payload[0]._value || 0;\n\nif (global.get('count') <= 0){\nglobal.set('count', lastCounter);\nglobal.set('previousCounter', 0); // Reinicia el previousCounter o aj√∫stalo seg√∫n sea necesario\n\nmsg.payload = {\n    \"lastcounter\": lastCounter,\n    \"count\": global.get('count') || 0\n}\nreturn msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 2620,
        "wires": [
            [
                "e934fed44e729355"
            ]
        ]
    },
    {
        "id": "1395a50d10b2aa26",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "function 21",
        "func": "// Obtiene la √∫ltima marca de tiempo en que se recibi√≥ una respuesta o se inici√≥ el temporizador\n\nlet potHorno1F2 = global.get(\"potHorno1F2\") || 0;\nlet potHorno2F2 = global.get(\"potHorno2F2\") || 0;\nlet potHorno1F1 = global.get(\"potHorno1F1\") || 0;\nlet potHorno2F1 = global.get(\"potHorno2F1\") || 0;\nlet potHorno3F1 = global.get(\"potHorno3F1\") || 0;\nlet potHorno4F1 = global.get(\"potHorno4F1\") || 0;\nlet siloN_S = global.get(\"siloN_S\") || 0;\nlet silo_cohete1 = global.get(\"silo_cohete1\") || 0;\nlet hornoTT1F2 = global.get(\"hornoTT1F2\") || 0;\nlet hornoTT2F2 = global.get(\"hornoTT2F2\") || 0;\n\n// node.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + hornoTT1F2 });\n //node.warn(\"Valor de potHorno2F2: \" + potHorno2F2);  // Depuraci√≥n\n\n//Estado horno 1 FUNDICION 2\nif (potHorno1F2 > 20) {\n    var msg1 = { payload: { 'response': true } };\n} else {\n    var msg1 = { payload: { 'response': false } };\n}\n\n//Estado horno 2 FUNDICION 2\nif (potHorno2F2 > 20) {\n    var msg2 = { payload: { 'response': true } };\n} else {\n    var msg2 = { payload: { 'response': false } };\n}\n\n//Estado horno 1 FUNDICION 1\nif (potHorno1F1 > 20) {\n    var msg3 = { payload: { 'response': true } };\n} else {\n    var msg3 = { payload: { 'response': false } };\n}\n\n//Estado horno 2 FUNDICION 1\nif (potHorno2F1 > 20) {\n    var msg4 = { payload: { 'response': true } };\n} else {\n    var msg4 = { payload: { 'response': false } };\n}\n\n//Estado horno 3 FUNDICION 1\nif (potHorno3F1 > 20) {\n    var msg5 = { payload: { 'response': true } };\n} else {\n    var msg5 = { payload: { 'response': false } };\n}\n//Estado horno 4 FUNDICION 1\nif (potHorno4F1 > 20) {\n    var msg6 = { payload: { 'response': true } };\n} else {\n    var msg6 = { payload: { 'response': false } };\n}\n\n//Estado Silo Norte y Sur FUNDICION 2\nif (siloN_S > 20) {\n    var msg7 = {payload: {'response': true}} ;\n} else {\n    var msg7 = {payload: {'response': false}};\n}\n\n//Estado silo cohete FUNDICION 2\nif (silo_cohete1 > 20) {\n    var msg8 = { payload: { 'response': true } };\n} else {\n    var msg8 = { payload: { 'response': false } };\n}\n\n//Estado horno TT 1 FUNDICION 2\nif (hornoTT1F2 > 20) {\n    var msg9 = { payload: { 'response': true } };\n} else {\n    var msg9 = { payload: { 'response': false } };\n}\n\n//Estado horno TT 2 FUNDICION 2\nif (hornoTT2F2 > 20) {\n    var msg10 = { payload: { 'response': true } };\n} else {\n    var msg10 = { payload: { 'response': false } };\n}\n\n\n\nreturn [msg1,msg2,msg3,msg4,msg5,msg6,msg7,msg8,msg9,msg10];",
        "outputs": 10,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 400,
        "wires": [
            [
                "42144953fb2f62c7"
            ],
            [
                "87b233e67e32884a"
            ],
            [
                "ebdc24c826cb16b2"
            ],
            [
                "c25a96e4fd00e44a"
            ],
            [
                "e5138ab9f13cd195"
            ],
            [
                "2ebca5f084ad48b4"
            ],
            [
                "80b7d7398612d98b"
            ],
            [
                "8f4cb4ccbe987860"
            ],
            [
                "b029c98f208cb034"
            ],
            [
                "ef0503be8bf7b96f"
            ]
        ]
    },
    {
        "id": "80b7d7398612d98b",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-silosN&S",
        "func": "msg.topic = \"SiloNyS\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif ((msg.payload.response === false)) {\n    msg.payload = {\n        \"silo_sur\": false,\n        \"silo_norte\": false,\n    }\n} else {\n    msg.payload = {\n        \"silo_sur\": true,\n        \"silo_norte\": true,\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 440,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "8f4cb4ccbe987860",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-silosCohete",
        "func": "msg.topic = \"SiloCohete\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"silo_cohete\": false\n    }\n} else {\n    msg.payload = {\n        \"silo_cohete\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 500,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "42144953fb2f62c7",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoInd1F2",
        "func": "msg.topic = \"horno1F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno1\": false\n    }\n} else{\n    msg.payload = {\n        \"horno1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 140,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "87b233e67e32884a",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoInd2F2",
        "func": "msg.topic = \"horno2F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno2\": false\n    }\n} else {\n    msg.payload = {\n        \"horno2\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 200,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "ebdc24c826cb16b2",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoInd1F1",
        "func": "msg.topic = \"horno1F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno1F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno1F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "c25a96e4fd00e44a",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoInd2F1",
        "func": "msg.topic = \"horno2F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno2F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno2F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 260,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "e5138ab9f13cd195",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoInd3F1",
        "func": "msg.topic = \"horno3F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno3F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno3F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 380,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "2ebca5f084ad48b4",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoInd4F1",
        "func": "msg.topic = \"horno4F1\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"horno4F1\": false\n    }\n} else {\n    msg.payload = {\n        \"horno4F1\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 560,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "b029c98f208cb034",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoTT1F2",
        "func": "msg.topic = \"hornoTT1F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"hornoTT1F2\": false\n    }\n} else  {\n    msg.payload = {\n        \"hornoTT1F2\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 620,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "ef0503be8bf7b96f",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "data-format-HornoTT2F2",
        "func": "msg.topic = \"hornoTT2F2\"\nnode.status({ fill: \"blue\", shape: \"dot\", text: \"potTest: \" + msg.payload.response });\nif (msg.payload.response === false) {\n    msg.payload = {\n        \"hornoTT2F2\": false\n    }\n} else  {\n    msg.payload = {\n        \"hornoTT2F2\": true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 680,
        "wires": [
            [
                "e97c8033a532ee94"
            ]
        ]
    },
    {
        "id": "a1f9e99af90cbea7",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 54",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 2060,
        "wires": []
    },
    {
        "id": "dea0d81f6d4fd287",
        "type": "function",
        "z": "e780f688e5979083",
        "name": "function 22",
        "func": "    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n\n var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n\n    msg.payload = {\n        \"D0\": D0,\n\"D1\": D1,\n\"D2\": D2,\n\"D3\": D3,\n\"voltaA\": VoltA\n    }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 820,
        "wires": [
            [
                "6e988289bb387214"
            ]
        ]
    },
    {
        "id": "6e988289bb387214",
        "type": "debug",
        "z": "e780f688e5979083",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 820,
        "wires": []
    },
    {
        "id": "38edbf672a86259c",
        "type": "catch",
        "z": "e780f688e5979083",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 170,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "c2d7aa44b5d3570b",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "38e5edd3e720210b",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            [
                "a94ffb6de195deb6"
            ]
        ]
    },
    {
        "id": "f641315aa92813a0",
        "type": "inject",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "38e5edd3e720210b",
                "f2d735def2a2335e"
            ]
        ]
    },
    {
        "id": "14b2067671d6d535",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 140,
        "wires": []
    },
    {
        "id": "a94ffb6de195deb6",
        "type": "tcp request",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "server": "192.168.1.29",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 620,
        "y": 180,
        "wires": [
            [
                "d67a71911632c248",
                "c91e583caf86eebc",
                "14b2067671d6d535"
            ]
        ]
    },
    {
        "id": "f4bb2346d1d261ed",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "HORNO 2 FUNDICION 1",
        "info": "",
        "x": 470,
        "y": 100,
        "wires": []
    },
    {
        "id": "420f795e35e93b2d",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "a94ffb6de195deb6"
            ]
        ]
    },
    {
        "id": "f2d735def2a2335e",
        "type": "delay",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "420f795e35e93b2d"
            ]
        ]
    },
    {
        "id": "d67a71911632c248",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    global.set(\"potHorno2F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "011a24e46688dac1"
            ]
        ]
    },
    {
        "id": "c91e583caf86eebc",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno2F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else if ((msg.payload[7] === 0x10) && (msg.payload[6] === 0x59) && (msg.payload[5] === 0x0a) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x52) && (msg.payload[2] === 0xc6) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno2F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n}\n\nelse {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 10000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "011a24e46688dac1"
            ]
        ]
    },
    {
        "id": "011a24e46688dac1",
        "type": "switch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 300,
        "wires": [
            [
                "bbcf742f2194d680"
            ],
            [
                "bbcf742f2194d680"
            ]
        ]
    },
    {
        "id": "d027449e54260673",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "a94ffb6de195deb6"
        ],
        "uncaught": false,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "c91e583caf86eebc"
            ]
        ]
    },
    {
        "id": "bbcf742f2194d680",
        "type": "influxdb out",
        "z": "9eca4a74afa40c8b",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Horno2_F1",
        "measurement": "F1-Horno2-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion1",
        "x": 960,
        "y": 280,
        "wires": []
    },
    {
        "id": "f22964fe46f185c6",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 240,
        "y": 620,
        "wires": []
    },
    {
        "id": "1f6f132e3d2f024e",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "HORNO 4 FUNDICION 1",
        "info": "",
        "x": 510,
        "y": 620,
        "wires": []
    },
    {
        "id": "8bd798c6d04c397c",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "25a3c84459041023"
            ]
        ]
    },
    {
        "id": "4989832d7d6fa0ed",
        "type": "inject",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 820,
        "wires": [
            [
                "8bd798c6d04c397c",
                "297896595e59185e",
                "2767e6a33b629927"
            ]
        ]
    },
    {
        "id": "25a3c84459041023",
        "type": "tcp request",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "server": "192.168.1.30",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 660,
        "y": 760,
        "wires": [
            [
                "ca0d8010b9684d69",
                "3a89b78380e39291",
                "32d5b7d22e5ea271",
                "621dac71e6e313f1"
            ]
        ]
    },
    {
        "id": "9997821b80912086",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 800,
        "wires": [
            [
                "25a3c84459041023"
            ]
        ]
    },
    {
        "id": "297896595e59185e",
        "type": "delay",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 880,
        "wires": [
            [
                "9997821b80912086"
            ]
        ]
    },
    {
        "id": "c2ad58983c7fa1d2",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 62",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 820,
        "wires": []
    },
    {
        "id": "3a89b78380e39291",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    global.set(\"potHorno4F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 860,
        "wires": [
            [
                "b189bdf5b8756ba6"
            ]
        ]
    },
    {
        "id": "32d5b7d22e5ea271",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno4F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else if ((msg.payload[7] === 0x10) && (msg.payload[6] === 0x59) && (msg.payload[5] === 0x0a) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x52) && (msg.payload[2] === 0xc6) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n    var power = Number(0);\n\n    global.set(\"potHorno4F1\", power);  // Guarda la primera vez que se activa\n\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n}\n else {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 10000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 900,
        "wires": [
            [
                "b189bdf5b8756ba6",
                "82072ee2d892fce1"
            ]
        ]
    },
    {
        "id": "b189bdf5b8756ba6",
        "type": "switch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 880,
        "wires": [
            [
                "c2ad58983c7fa1d2",
                "64d64c08e8348059"
            ],
            [
                "7ab7f04b02ee5f11",
                "64d64c08e8348059"
            ]
        ]
    },
    {
        "id": "b5b1ae8b7961d8f7",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "25a3c84459041023"
        ],
        "uncaught": false,
        "x": 490,
        "y": 940,
        "wires": [
            [
                "32d5b7d22e5ea271",
                "1aeedc1cd5566f9b"
            ]
        ]
    },
    {
        "id": "7ab7f04b02ee5f11",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 63",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 940,
        "wires": []
    },
    {
        "id": "64d64c08e8348059",
        "type": "influxdb out",
        "z": "9eca4a74afa40c8b",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Horno4_F1",
        "measurement": "F1-Horno4-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion1",
        "x": 1060,
        "y": 880,
        "wires": []
    },
    {
        "id": "1aeedc1cd5566f9b",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 64",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 1000,
        "wires": []
    },
    {
        "id": "82072ee2d892fce1",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 65",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ca0d8010b9684d69",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 66",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 680,
        "wires": []
    },
    {
        "id": "ade59f34c38abe58",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "Medidor de potencia [COUNTIS E53]",
        "info": "",
        "x": 1280,
        "y": 100,
        "wires": []
    },
    {
        "id": "574e16067c6cd15e",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "HORNO 3 FUNDICION 1",
        "info": "",
        "x": 1550,
        "y": 100,
        "wires": []
    },
    {
        "id": "c3f425237f51fba7",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data1\";\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC5,0x50,0x00,0x36,0xF8,0x85])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 220,
        "wires": [
            [
                "5cb3706fd77dd7f7"
            ]
        ]
    },
    {
        "id": "42d5bec3f6ed143d",
        "type": "inject",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "c3f425237f51fba7",
                "b1e06a78a31baeec",
                "eb6db4d0f8f48f30"
            ]
        ]
    },
    {
        "id": "5cb3706fd77dd7f7",
        "type": "tcp request",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "server": "192.168.1.34",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "800",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1700,
        "y": 240,
        "wires": [
            [
                "7823c0d9c5b49bb2",
                "c0253ddc28bead6d",
                "7b8ebbd8ad3a6347",
                "4c6e04b944a2cf6f"
            ]
        ]
    },
    {
        "id": "8cb3f7360fde72ac",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Modbus Request",
        "func": "msg.topic = \"data2\"\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x05,0x03,0xC6,0x52,0x00,0x0a,0x59,0x10])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 280,
        "wires": [
            [
                "5cb3706fd77dd7f7"
            ]
        ]
    },
    {
        "id": "b1e06a78a31baeec",
        "type": "delay",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1.5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 360,
        "wires": [
            [
                "8cb3f7360fde72ac"
            ]
        ]
    },
    {
        "id": "06551fd2a9c22e30",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 67",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 300,
        "wires": []
    },
    {
        "id": "c0253ddc28bead6d",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Volt,Curr,Po",
        "func": "\n//condicion if\nvar D41 = msg.payload[3]\nvar D42 = msg.payload[4]\nvar D43 = msg.payload[5]\nvar D44 = msg.payload[6]\n\nvar En = /*'0x'+*/ (\"00\" + D41.toString(16)).slice(-2) + (\"00\" + D42.toString(16)).slice(-2) + (\"00\" + D43.toString(16)).slice(-2) + (\"00\" + D44.toString(16)).slice(-2);\n\n\n//-----Salida--------\nif (En == \"ffffffff\") {\n    msg.topic = \"data1\"\n\n    //aca se calcularan los valores de voltaje, corriente y potencia de forma simplificada:\n    var voltage1 = 0;\n    var voltage2 = 0;\n    var voltage3 = 0;\n    var current1 = 0;\n    var current2 = 0;\n    var current3 = 0;\n    var power = 0;\n   \n    for (var i = 19; i <= 54; i += 4) {\n        var D1 = msg.payload[i];\n        var D2 = msg.payload[i + 1];\n        var D3 = msg.payload[i + 2];\n        var D4 = msg.payload[i + 3];\n\n        \n        var value = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n        if (value !== \"ffffffff\") {\n            if (i >= 19 && i <= 22) {\n                voltage1 = parseInt(value, 16) / 100;\n            } else if (i >= 23 && i <= 26) {\n                voltage2 = parseInt(value, 16) / 100;\n            } else if (i >= 27 && i <= 30) {\n                voltage3 = parseInt(value, 16) / 100;\n            } else if (i >= 35 && i <= 38) {\n                current1 = parseInt(value, 16) / 1000;\n            } else if (i >= 39 && i <= 42) {\n                current2 = (parseInt(value, 16) / 1000);\n            } else if (i >= 43 && i <= 46) {\n                current3 = (parseInt(value, 16) / 1000);\n            } else if (i >= 51 && i <= 54) {\n                power = Number((parseInt(value, 16) / 100).toFixed(3));\n            }\n        }\n    }\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    global.set(\"potHorno3F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": dataError(voltage1) ? voltage1 : NaN,\n        \"Voltage2\": dataError(voltage2) ? voltage2 : NaN,\n        \"Voltage3\": dataError(voltage3) ? voltage3 : NaN,\n        \"Current1\": dataError(current1) ? current1 : NaN,\n        \"Current2\": dataError(current2) ? current2 : NaN,\n        \"Current3\": dataError(current3) ? current3 : NaN,\n        \"Power\": dataError(power) ? power : NaN,\n    }\n    \n    return msg;\n}\n\nfunction dataError(value) {\n    var errorThreshold = 1000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n    //aca se verifica si el valor esta dentro de los valores aceptables\n    // var errorThreshold = 10000;\n    // if (voltage1 > voltage1 * errorThreshold) {\n    //     msg.payload = {\n    //         \"Voltage2\": voltage2,\n    //         \"Voltage3\": voltage3,\n    //         \"Current1\": current1,\n    //         \"Current2\": current2,\n    //         \"Current3\": current3,\n    //         \"Power\": Number(power.toFixed(3))\n    //     }\n    //     return msg;\n    // }\n//     } else if (voltage2 > voltage2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (voltage3 > voltage3 * errorThreshold){\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current1 > current1 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current2 > current2 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n\n//     } else if (current3 > current3 * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n        \n//     } else if (power > power * errorThreshold) {\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//         }\n//         return msg;\n\n//     } else {\n\n//         msg.payload = {\n//             \"Voltage1\": voltage1,\n//             \"Voltage2\": voltage2,\n//             \"Voltage3\": voltage3,\n//             \"Current1\": current1,\n//             \"Current2\": current2,\n//             \"Current3\": current3,\n//             \"Power\": Number(power.toFixed(3))\n//         }\n//         return msg;\n//     }\n// }\n\n\n\n\n\n    // //Voltage\n    //     //Phase to phase voltage U12\n    // var D01= msg.payload[7]\n    // var D02= msg.payload[8]\n    // var D03= msg.payload[9]\n    // var D04= msg.payload[10]\n    //     //Phase to phase voltage U23\n    // var D05 = msg.payload[11]\n    // var D06 = msg.payload[12]\n    // var D07 = msg.payload[13]\n    // var D08 = msg.payload[14]\n    //     //Phase to phase voltage U31\n    // var D09 = msg.payload[15]\n    // var D10 = msg.payload[16]\n    // var D11 = msg.payload[17]\n    // var D12 = msg.payload[18]\n    //     //Simple voltage: V1\n    // var D13 = msg.payload[19]\n    // var D14 = msg.payload[20]\n    // var D15 = msg.payload[21]\n    // var D16 = msg.payload[22]\n    //     //Simple voltage: V2\n    // var D17 = msg.payload[23]\n    // var D18 = msg.payload[24]\n    // var D19 = msg.payload[25]\n    // var D20 = msg.payload[26]\n    //     //Simple voltage: V3\n    // var D21 = msg.payload[27]\n    // var D22 = msg.payload[28]\n    // var D23 = msg.payload[29]\n    // var D24 = msg.payload[30]\n\n    // //Corriente\n    //     //Current: I1\n    // var D25 = msg.payload[35]\n    // var D26 = msg.payload[36]\n    // var D27 = msg.payload[37]\n    // var D28 = msg.payload[38]\n    //     //Current: I2\n    // var D29 = msg.payload[39]\n    // var D30 = msg.payload[40]\n    // var D31 = msg.payload[41]\n    // var D32 = msg.payload[42]\n    //     //Current: I3\n    // var D33 = msg.payload[43]\n    // var D34 = msg.payload[44]\n    // var D35 = msg.payload[45]\n    // var D36 = msg.payload[46]\n\n    // //Potencia\n    // var D37 = msg.payload[51]\n    // var D38 = msg.payload[52]\n    // var D39 = msg.payload[53]\n    // var D40 = msg.payload[54]\n\n\n\n\n    // //Voltage fase a fase\n    // var P2pvU12 = /*'0x'+*/ (\"00\" + D01.toString(16)).slice(-2) + (\"00\" + D02.toString(16)).slice(-2) + (\"00\" + D03.toString(16)).slice(-2) + (\"00\" + D04.toString(16)).slice(-2);\n    // var P2pvU23 = /*'0x'+*/ (\"00\" + D05.toString(16)).slice(-2) + (\"00\" + D06.toString(16)).slice(-2) + (\"00\" + D07.toString(16)).slice(-2) + (\"00\" + D08.toString(16)).slice(-2);\n    // var P2pvU31 = /*'0x'+*/ (\"00\" + D09.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2) + (\"00\" + D12.toString(16)).slice(-2);\n    // //Voltage simple de cada linea\n    // var V1 = /*'0x'+*/ (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2) + (\"00\" + D16.toString(16)).slice(-2);\n    // var V2 = /*'0x'+*/ (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2) + (\"00\" + D20.toString(16)).slice(-2);\n    // var V3 = /*'0x'+*/ (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2) + (\"00\" + D24.toString(16)).slice(-2);\n    // //Corriente de cada linea\n    // var I1 = /*'0x'+*/ (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2) + (\"00\" + D28.toString(16)).slice(-2);\n    // var I2 = /*'0x'+*/ (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2) + (\"00\" + D32.toString(16)).slice(-2);\n    // var I3 = /*'0x'+*/ (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2) + (\"00\" + D36.toString(16)).slice(-2);\n    // //potencia\n    // var Pot = /*'0x'+*/ (\"00\" + D37.toString(16)).slice(-2) + (\"00\" + D38.toString(16)).slice(-2) + (\"00\" + D39.toString(16)).slice(-2) + (\"00\" + D40.toString(16)).slice(-2);\n\n\n//     msg.payload = {\n//         /*\"Fase2FaseVolt_U12\": parseInt(P2pvU12, 16),\n//         \"Fase2FaseVolt_U23\": parseInt(P2pvU23, 16),\n//         \"Fase2FaseVolt_U31\": parseInt(P2pvU31, 16),*/\n//         \"Voltage1\": (parseInt(V1, 16)) / 100,\n//         \"Voltage2\": (parseInt(V2, 16)) / 100,\n//         \"Voltage3\": parseInt(V3, 16) / 100,\n//         \"Current1\": parseInt(I1, 16) / 1000,\n//         \"Current2\": parseInt(I2, 16) / 1000,\n//         \"Current3\": parseInt(I3, 16) / 1000,\n//         \"Power\": Number((parseInt(Pot, 16) / 100).toFixed(3)),\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 340,
        "wires": [
            [
                "241f7a1b115a200f"
            ]
        ]
    },
    {
        "id": "7b8ebbd8ad3a6347",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Energy",
        "func": "msg.topic = \"data2\"\n\nif ((msg.payload[7] === 0x85) && (msg.payload[6] === 0xf8) && (msg.payload[5] === 0x36) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x50) && (msg.payload[2] === 0xc5) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n\n    var power = Number(0);\n\n    global.set(\"potHorno3F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n\n} else if ((msg.payload[7] === 0x10) && (msg.payload[6] === 0x59) && (msg.payload[5] === 0x0a) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x52) && (msg.payload[2] === 0xc6) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x5)) {\n   \n    var power = Number(0);\n\n    global.set(\"potHorno3F1\", power);  // Guarda la primera vez que se activa\n    msg.payload = {\n        \"Voltage1\": Number(0),\n        \"Voltage2\": Number(0),\n        \"Voltage3\": Number(0),\n        \"Current1\": Number(0),\n        \"Current2\": Number(0),\n        \"Current3\": Number(0),\n        \"Power\": Number(0),\n        \"Energy\": Number(0)\n    }\n    return msg;\n}\n else {//----Seleccion de datos-----\n    //Energia\n    var D1 = msg.payload[3]\n    var D2 = msg.payload[4]\n    var D3 = msg.payload[5]\n    var D4 = msg.payload[6]\n\n    var En = (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2) + (\"00\" + D4.toString(16)).slice(-2);\n\n    //-----Salida--------\n    if (En == \"ffffffff\") {\n\n    } else {\n        var energyValue = Number((parseInt(En,16) / 1000).toFixed(3));\n        msg.payload = {\n            // \"Energy\": Number(energyValue.toFixed(3)),\n            \"Energy\": dataError(energyValue) ? energyValue : NaN\n        }\n\n        msg.data = {\n            \"d1\": D1,\n            \"d2\": D2,\n            \"d3\": D3,\n            \"d4\": D4,\n            \"Energy1\":energyValue \n        }\n        return msg;\n    }\n}\n\nfunction dataError(value) {\n    var errorThreshold = 10000;\n    if (value > errorThreshold) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n\n\n\n\n\n\n//     //Convierto el valor a numero y divido en 1000\n//     var energyValue = parseInt(En,16) / 1000;\n\n//     var sumOfLasFiveValues = flow.get(\"sumOfLasFiveValues\") || 0;\n//     var lastFiveValues = flow.get(\"lastFiveValues\") || [];\n//     lastFiveValues.push(energyValue);\n//     sumOfLasFiveValues += energyValue;\n\n//     if (lastFiveValues.length > 5) {\n//         var removedValue = lastFiveValues.shift();\n//         sumOfLasFiveValues -= removedValue;\n//     }\n\n//     //Almaceno los valores actualizados en la memoria de flujo\n//     flow.set(\"sumOfLastFiveValues\", sumOfLasFiveValues);\n//     flow.set(\"LastFiveValues\", lastFiveValues);\n\n//     //calculo el promedio\n//     var average = sumOfLasFiveValues / lastFiveValues.length;\n\n//     //Ahora el filtro, si el valor actual de energia es mucho mayor que el promedio de los ultimos 5 valores, se considera error\n//     if (energyValue > average * 10000) {\n//         //no manda nada\n//         console.log(\"valor de energia erronea: \", energyValue)\n//     } else {\n//         //si no es un error de lectura, envio el valor normalmente a inlux\n//         msg.payload = {\n//             \"Energy\": Number(energyValue.toFixed(3))\n//         };\n//     }\n//     return msg;\n// }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 380,
        "wires": [
            [
                "241f7a1b115a200f",
                "6385f77b5e35fe0b"
            ]
        ]
    },
    {
        "id": "241f7a1b115a200f",
        "type": "switch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "property": "topic",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "data1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "data2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 360,
        "wires": [
            [
                "06551fd2a9c22e30",
                "40a088fdbe3d3650",
                "7abdb49b3beded4b"
            ],
            [
                "5f99b6834c97a542",
                "40a088fdbe3d3650",
                "7abdb49b3beded4b"
            ]
        ]
    },
    {
        "id": "a7bce9e739ebf00d",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "5cb3706fd77dd7f7"
        ],
        "uncaught": false,
        "x": 1530,
        "y": 420,
        "wires": [
            [
                "7b8ebbd8ad3a6347",
                "f3ee38c6d06c3dfe"
            ]
        ]
    },
    {
        "id": "5f99b6834c97a542",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 68",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 420,
        "wires": []
    },
    {
        "id": "40a088fdbe3d3650",
        "type": "influxdb out",
        "z": "9eca4a74afa40c8b",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Horno3_F1",
        "measurement": "F1-Horno3-[COUNTIS-E53]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion1",
        "x": 2100,
        "y": 360,
        "wires": []
    },
    {
        "id": "f3ee38c6d06c3dfe",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 480,
        "wires": []
    },
    {
        "id": "6385f77b5e35fe0b",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 520,
        "wires": []
    },
    {
        "id": "7823c0d9c5b49bb2",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 160,
        "wires": []
    },
    {
        "id": "cc6edf32d4a622a9",
        "type": "tcp request",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "server": "192.168.1.39",
        "port": "8899",
        "out": "time",
        "ret": "buffer",
        "splitc": "1500",
        "newline": "",
        "trim": false,
        "tls": "",
        "x": 1780,
        "y": 840,
        "wires": [
            [
                "9e6f7f928a2e9201",
                "2d6116fd2fbf5e47"
            ]
        ]
    },
    {
        "id": "46f618a4dec111b6",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Modbus Request",
        "func": "\n\n//DATA LOG\n//var buf=Buffer.from([0x01,0xFE,0x08,0x00,0x00,0x01,0xEB,0xBE]);\n\n//corriente fase A\nvar buf=Buffer.from([0x01,0x03,0x01,0x00,0x00,0x60,0x44,0x1E])\nmsg.payload = buf\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 840,
        "wires": [
            [
                "cc6edf32d4a622a9"
            ]
        ]
    },
    {
        "id": "d2478cd899ef4f34",
        "type": "inject",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1350,
        "y": 880,
        "wires": [
            [
                "46f618a4dec111b6",
                "81d44ba26ccbd3e8"
            ]
        ]
    },
    {
        "id": "51e6da65efe001ee",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "Medidor de potencia [DPM-C530]",
        "info": "",
        "x": 1410,
        "y": 660,
        "wires": []
    },
    {
        "id": "84ee8c36e3730cf1",
        "type": "comment",
        "z": "9eca4a74afa40c8b",
        "name": "HORNO 1 FUNDICION 1",
        "info": "",
        "x": 1670,
        "y": 660,
        "wires": []
    },
    {
        "id": "9e54a3e7c393e0d5",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "cc6edf32d4a622a9"
        ],
        "uncaught": false,
        "x": 1830,
        "y": 720,
        "wires": [
            [
                "7307253a71119ec4",
                "9e6f7f928a2e9201"
            ]
        ]
    },
    {
        "id": "7307253a71119ec4",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 780,
        "wires": []
    },
    {
        "id": "9e6f7f928a2e9201",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Data selection and formatting",
        "func": "msg.topic = \"InfluxData2\"\n\nif ((msg.payload[7] === 0x1e) && (msg.payload[6] === 0x44) && (msg.payload[5] === 0x60) && (msg.payload[4] === 0x0) && (msg.payload[3] === 0x0) && (msg.payload[2] === 0x1) && (msg.payload[1] === 0x3) && (msg.payload[0] === 0x1)) {\n\n    var voltage = 0;\n    var voltageB = 0;\n    var voltageC = 0;\n    var current = 0;\n    var currentB = 0;\n    var currentC = 0;\n    var power = 0;\n    var energy = 0;\n\n    global.set(\"potHorno1F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy,\n        \"error\": msg.error\n    }\n    return msg;\n} else {\n\n    //----Seleccion de datos-----\n    //Voltage phase A\n    var D0 = msg.payload[21];\n    var D1 = msg.payload[22];\n    var D2 = msg.payload[19];\n    var D3 = msg.payload[20];\n    //AVGvoltage\n    var D4 = msg.payload[17];\n    var D5 = msg.payload[18];\n    var D6 = msg.payload[15];\n    var D7 = msg.payload[16];\n    //Current phase A\n    var D8 = msg.payload[69]\n    var D9 = msg.payload[70]\n    var D10 = msg.payload[67]\n    var D11 = msg.payload[68]\n    //Potencia\n    var D12 = msg.payload[141]\n    var D13 = msg.payload[142]\n    var D14 = msg.payload[139]\n    var D15 = msg.payload[140]\n    //Energia\n    var D16 = msg.payload[189]\n    var D17 = msg.payload[190]\n    var D18 = msg.payload[187]\n    var D19 = msg.payload[188]\n    //Voltage phase B\n    var D20 = msg.payload[25];\n    var D21 = msg.payload[26];\n    var D22 = msg.payload[23];\n    var D23 = msg.payload[24];\n    //Voltage phase C\n    var D24 = msg.payload[29];\n    var D25 = msg.payload[30];\n    var D26 = msg.payload[27];\n    var D27 = msg.payload[28];\n    //Current phase B\n    var D28 = msg.payload[73]\n    var D29 = msg.payload[74]\n    var D30 = msg.payload[71]\n    var D31 = msg.payload[72]\n    //Current phase C\n    var D32 = msg.payload[77]\n    var D33 = msg.payload[78]\n    var D34 = msg.payload[75]\n    var D35 = msg.payload[76]\n    //Error\n    var D100 = msg.payload[7]\n\n    //------ Concatenacion para dejar un HEX por solicitud------------\n    var VoltA = '0x' + (\"00\" + D0.toString(16)).slice(-2) + (\"00\" + D1.toString(16)).slice(-2) + (\"00\" + D2.toString(16)).slice(-2) + (\"00\" + D3.toString(16)).slice(-2);\n    var VoltB = '0x' + (\"00\" + D20.toString(16)).slice(-2) + (\"00\" + D21.toString(16)).slice(-2) + (\"00\" + D22.toString(16)).slice(-2) + (\"00\" + D23.toString(16)).slice(-2);\n    var VoltC = '0x' + (\"00\" + D24.toString(16)).slice(-2) + (\"00\" + D25.toString(16)).slice(-2) + (\"00\" + D26.toString(16)).slice(-2) + (\"00\" + D27.toString(16)).slice(-2);\n    var AVGv = '0x' + (\"00\" + D4.toString(16)).slice(-2) + (\"00\" + D5.toString(16)).slice(-2) + (\"00\" + D6.toString(16)).slice(-2) + (\"00\" + D7.toString(16)).slice(-2);\n    var CurrA = '0x' + (\"00\" + D8.toString(16)).slice(-2) + (\"00\" + D9.toString(16)).slice(-2) + (\"00\" + D10.toString(16)).slice(-2) + (\"00\" + D11.toString(16)).slice(-2);\n    var CurrB = '0x' + (\"00\" + D28.toString(16)).slice(-2) + (\"00\" + D29.toString(16)).slice(-2) + (\"00\" + D30.toString(16)).slice(-2) + (\"00\" + D31.toString(16)).slice(-2);\n    var CurrC = '0x' + (\"00\" + D32.toString(16)).slice(-2) + (\"00\" + D33.toString(16)).slice(-2) + (\"00\" + D34.toString(16)).slice(-2) + (\"00\" + D35.toString(16)).slice(-2);\n    var Pow = '0x' + (\"00\" + D12.toString(16)).slice(-2) + (\"00\" + D13.toString(16)).slice(-2) + (\"00\" + D14.toString(16)).slice(-2) + (\"00\" + D15.toString(16)).slice(-2);\n    var En = '0x' + (\"00\" + D16.toString(16)).slice(-2) + (\"00\" + D17.toString(16)).slice(-2) + (\"00\" + D18.toString(16)).slice(-2) + (\"00\" + D19.toString(16)).slice(-2);\n\n    var Errorr = '0x' + (\"00\" + D100.toString(16)).slice(-2);\n\n    //------- Funcion para transformar HEX a float ----------\n    function parseFloat(str) {\n        var float = 0, sign, order, mantissa, exp, int = 0, multi = 1;\n        if (/^0x/.exec(str)) {\n            int = parseInt(str, 16);\n        } else {\n            for (var i = str.length - 1; i >= 0; i -= 1) {\n                if (str.charCodeAt(i) > 255) {\n                    return false;\n                }\n                int += str.charCodeAt(i) * multi;\n                multi *= 256;\n            }\n        }\n        sign = (int >>> 31) ? -1 : 1;\n        exp = (int >>> 23 & 0xff) - 127;\n        mantissa = ((int & 0x7fffff) + 0x800000).toString(2);\n        for (i = 0; i < mantissa.length; i += 1) {\n            float += parseInt(mantissa[i]) ? Math.pow(2, exp) : 0;\n            exp--;\n        }\n        return float * sign;\n    }\n    var voltage = Number(parseFloat(VoltA).toFixed(2));\n    var voltageB = Number(parseFloat(VoltB).toFixed(2));\n    var voltageC = Number(parseFloat(VoltC).toFixed(2));\n    var current = Number(parseFloat(CurrA).toFixed(2));\n    var currentB = Number(parseFloat(CurrB).toFixed(2));\n    var currentC = Number(parseFloat(CurrC).toFixed(2));\n    var power = Number(parseFloat(Pow).toFixed(2));\n    var energy = Number(parseFloat(En).toFixed(0) / 1000);\n\n\n    global.set(\"potHorno1F1\", power);  // Guarda la primera vez que se activa\n\n    msg.payload = {\n        \"Voltage\": voltage,\n        \"VoltageB\": voltageB,\n        \"VoltageC\": voltageC,\n        \"Current\": current,\n        \"CurrentB\": currentB,\n        \"CurrentC\": currentC,\n        \"Power\": power,\n        \"Energy\": energy\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 840,
        "wires": [
            [
                "1256ca5bcebd5939",
                "17b37adaa777c1eb"
            ]
        ]
    },
    {
        "id": "1256ca5bcebd5939",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 74",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 740,
        "wires": []
    },
    {
        "id": "17b37adaa777c1eb",
        "type": "influxdb out",
        "z": "9eca4a74afa40c8b",
        "influxdb": "901545a3e9d96401",
        "name": "DB_Horno1_F1",
        "measurement": "F1-Horno1-[DPM-C530]",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "Neptuno",
        "bucket": "fundicion1",
        "x": 2340,
        "y": 880,
        "wires": []
    },
    {
        "id": "0dbcdaa2fff544a2",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "c0253ddc28bead6d"
        ],
        "uncaught": false,
        "x": 1690,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "45018dce84172279",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "bbcf742f2194d680"
        ],
        "uncaught": false,
        "x": 930,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "1d29db0d28bd6278",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "64d64c08e8348059"
        ],
        "uncaught": false,
        "x": 1030,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "af04e287af6d25a2",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "40a088fdbe3d3650"
        ],
        "uncaught": false,
        "x": 2070,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "eb0ffdd12e08e8c5",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "17b37adaa777c1eb"
        ],
        "uncaught": false,
        "x": 2330,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "2d6116fd2fbf5e47",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "reset de temporizador",
        "func": "// Obtiene el tiempo transcurrido desde la variable global\n// const elapsedTime = global.get(\"elapsedTime\") || 0;\n\n// if ( elapsedTime > 10 ) {\n\n//     var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n//     msg.payload = buf\n//     return msg;\n\n// } else {\n    \n    // Al recibir respuesta, actualiza el tiempo de √∫ltima respuesta en el contexto global\n    \n    \n    \n    \n    const currentTime = new Date().getTime();\nglobal.set(\"lastResponseTimeHorno1F1\", currentTime);  // Reinicia el temporizador\n\n    msg.payload = `Se reseteo el temporizador`\n    return msg;\n\n    // return msg;\n// }\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 780,
        "wires": []
    },
    {
        "id": "81d44ba26ccbd3e8",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Temporizador medidor apagado",
        "func": "// Obtiene el tiempo actual en milisegundos\nconst currentTime = new Date().getTime();\n\n// Obtiene la √∫ltima marca de tiempo en que se recibi√≥ una respuesta o se inici√≥ el temporizador\nlet lastResponseTime = global.get(\"lastResponseTimeHorno1F1\") || currentTime;\nglobal.set(\"lastResponseTimeHorno1F1\", lastResponseTime);  // Guarda la primera vez que se activa\n\n// Calcula el tiempo transcurrido desde la √∫ltima respuesta\nconst elapsedTime = currentTime - lastResponseTime;\n\n// Verifica si han pasado m√°s de 10 segundos (10000 ms) sin respuesta\nif (elapsedTime > 10000) {\n    var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n    msg.payload = buf\n    return msg;\n} else {\n    return null;  // No hace nada si el tiempo no ha pasado los 10 segundos\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 980,
        "wires": [
            [
                "e2461044570bfcf3",
                "9e6f7f928a2e9201"
            ]
        ]
    },
    {
        "id": "e2461044570bfcf3",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 940,
        "wires": []
    },
    {
        "id": "eb6db4d0f8f48f30",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Temporizador medidor apagado",
        "func": "// Obtiene el tiempo actual en milisegundos\nconst currentTime = new Date().getTime();\n\n// Obtiene la √∫ltima marca de tiempo en que se recibi√≥ una respuesta o se inici√≥ el temporizador\nlet lastResponseTime = global.get(\"lastResponseTimeHorno3F1\") || currentTime;\nglobal.set(\"lastResponseTimeHorno3F1\", lastResponseTime);  // Guarda la primera vez que se activa\n\n// Calcula el tiempo transcurrido desde la √∫ltima respuesta\nconst elapsedTime = currentTime - lastResponseTime;\n\n// Verifica si han pasado m√°s de 10 segundos (10000 ms) sin respuesta\nif (elapsedTime > 10000) {\n    var buf = Buffer.from([0x5, 0x3, 0xc5, 0x50, 0x0, 0x36, 0xf8, 0x85])\n    msg.payload = buf\n    return msg;\n}\nelse {\n    return null;  // No hace nada si el tiempo no ha pasado los 10 segundos\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 500,
        "wires": [
            [
                "6d082d30444d7a5a",
                "7b8ebbd8ad3a6347"
            ]
        ]
    },
    {
        "id": "6d082d30444d7a5a",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 560,
        "wires": []
    },
    {
        "id": "4c6e04b944a2cf6f",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "reset de temporizador",
        "func": "// Obtiene el tiempo transcurrido desde la variable global\n// const elapsedTime = global.get(\"elapsedTime\") || 0;\n\n// if ( elapsedTime > 10 ) {\n\n//     var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n//     msg.payload = buf\n//     return msg;\n\n// } else {\n    \n    // Al recibir respuesta, actualiza el tiempo de √∫ltima respuesta en el contexto global\n    \n    \n    \n    \n    const currentTime = new Date().getTime();\nglobal.set(\"lastResponseTimeHorno3F1\", currentTime);  // Reinicia el temporizador\n\n    msg.payload = `Se reseteo el temporizador`\n    return msg;\n\n    // return msg;\n// }\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 160,
        "wires": []
    },
    {
        "id": "2767e6a33b629927",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Temporizador medidor apagado",
        "func": "// Obtiene el tiempo actual en milisegundos\nconst currentTime = new Date().getTime();\n\n// Obtiene la √∫ltima marca de tiempo en que se recibi√≥ una respuesta o se inici√≥ el temporizador\nlet lastResponseTime = global.get(\"lastResponseTimeHorno4F1\") || currentTime;\nglobal.set(\"lastResponseTimeHorno4F1\", lastResponseTime);  // Guarda la primera vez que se activa\n\n// Calcula el tiempo transcurrido desde la √∫ltima respuesta\nconst elapsedTime = currentTime - lastResponseTime;\n\n// Verifica si han pasado m√°s de 10 segundos (10000 ms) sin respuesta\nif (elapsedTime > 10000) {\n    var buf = Buffer.from([0x5, 0x3, 0xc5, 0x50, 0x0, 0x36, 0xf8, 0x85])\n    msg.payload = buf\n    return msg;\n}\nelse {\n    return null;  // No hace nada si el tiempo no ha pasado los 10 segundos\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1040,
        "wires": [
            [
                "15774a50273a8cb1",
                "32d5b7d22e5ea271"
            ]
        ]
    },
    {
        "id": "15774a50273a8cb1",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1100,
        "wires": []
    },
    {
        "id": "621dac71e6e313f1",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "reset de temporizador",
        "func": "// Obtiene el tiempo transcurrido desde la variable global\n// const elapsedTime = global.get(\"elapsedTime\") || 0;\n\n// if ( elapsedTime > 10 ) {\n\n//     var buf = Buffer.from([0x1, 0x03, 0x01, 0x00, 0x00, 0x60, 0x44, 0x1e])\n//     msg.payload = buf\n//     return msg;\n\n// } else {\n    \n    // Al recibir respuesta, actualiza el tiempo de √∫ltima respuesta en el contexto global\n    \n    \n    \n    \n    const currentTime = new Date().getTime();\nglobal.set(\"lastResponseTimeHorno4F1\", currentTime);  // Reinicia el temporizador\n\n    msg.payload = `Se reseteo el temporizador`\n    return msg;\n\n    // return msg;\n// }\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 680,
        "wires": []
    },
    {
        "id": "fb62ba1a804a1d63",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "d67a71911632c248"
        ],
        "uncaught": false,
        "x": 800,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e9188cc96f4ba2a5",
        "type": "catch",
        "z": "9eca4a74afa40c8b",
        "name": "",
        "scope": [
            "3a89b78380e39291"
        ],
        "uncaught": false,
        "x": 630,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "7abdb49b3beded4b",
        "type": "function",
        "z": "9eca4a74afa40c8b",
        "name": "Datos para KPI",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 400,
        "wires": [
            [
                "db92da44dc6fb2bd"
            ]
        ]
    },
    {
        "id": "db92da44dc6fb2bd",
        "type": "debug",
        "z": "9eca4a74afa40c8b",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 340,
        "wires": []
    },
    {
        "id": "a3b9bcd09341930d",
        "type": "debug",
        "z": "dd1840493362654a",
        "name": "status M1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 120,
        "wires": []
    },
    {
        "id": "164c7585d0edee43",
        "type": "debug",
        "z": "dd1840493362654a",
        "name": "Status salida Y1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 200,
        "wires": []
    },
    {
        "id": "21a73437a8475b45",
        "type": "websocket out",
        "z": "dd1840493362654a",
        "name": "PLC Lecho Info",
        "server": "47197bdf13bce40a",
        "client": "",
        "x": 1360,
        "y": 60,
        "wires": []
    },
    {
        "id": "9623e713ce62c966",
        "type": "websocket in",
        "z": "dd1840493362654a",
        "name": "PLC Lecho Reload",
        "server": "47197bdf13bce40a",
        "client": "",
        "x": 1570,
        "y": 200,
        "wires": [
            [
                "a85b8b93c09c3c8a"
            ]
        ]
    },
    {
        "id": "46a96ffeda20bfba",
        "type": "join",
        "z": "dd1840493362654a",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "30",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 950,
        "y": 120,
        "wires": [
            [
                "164c7585d0edee43",
                "66e4a0de35eb64e1"
            ]
        ]
    },
    {
        "id": "e35ad54b0ccddb72",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d0",
        "func": "msg.topic = \"d0\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "48e5ce6e7888798e"
            ]
        ]
    },
    {
        "id": "274bafb096e7690f",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d1",
        "func": "msg.topic = \"d1\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "48e5ce6e7888798e"
            ]
        ]
    },
    {
        "id": "4683bb0c749973b0",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d2",
        "func": "msg.topic = \"d2\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "48e5ce6e7888798e"
            ]
        ]
    },
    {
        "id": "0680615f393afc8b",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d3",
        "func": "msg.topic = \"d3\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            [
                "48e5ce6e7888798e"
            ]
        ]
    },
    {
        "id": "bfd16f6a57abe3ea",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d4",
        "func": "msg.topic = \"d4\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "48e5ce6e7888798e"
            ]
        ]
    },
    {
        "id": "e425955d03d1ed21",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d5",
        "func": "msg.topic = \"d5\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 620,
        "wires": [
            [
                "1e99a62a6f8845d9"
            ]
        ]
    },
    {
        "id": "76aa84d789adb3a5",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d6",
        "func": "msg.topic = \"d6\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "1e99a62a6f8845d9"
            ]
        ]
    },
    {
        "id": "709bcb1db67df70a",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d7",
        "func": "msg.topic = \"d7\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 740,
        "wires": [
            [
                "1e99a62a6f8845d9"
            ]
        ]
    },
    {
        "id": "878a06595648430d",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d8",
        "func": "msg.topic = \"d8\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "1e99a62a6f8845d9"
            ]
        ]
    },
    {
        "id": "66e4a0de35eb64e1",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "Array",
        "func": "var data = msg.payload;\n\nvar transformedData = {\n    E_stop: data.d0.M999,\n    Bombona_llena: data.d1.X1,\n    Bombona_bajo: data.d2.X3,\n    Lecho_lleno: data.d3.X5,\n    Lecho_bajo: data.d4.X4,\n    Bombona_presurizada: data.d5.M98,\n    Bombona_despresurizada: data.d6.M97, \n    Cajon_bombona_shakeout_llena: data.d7.X9,\n    Vibrador_shakeout_motor1: data.d8.Y11,\n    Vibrador_shakeout_falla1: data.d9.XA,\n    Vibrador_shakeout_motor2: data.d10.Y12,\n    Vibrador_shakeout_falla2: data.d11.X2,\n    Vibrador_lecho_motor1: data.d12.Y13,\n    Vibrador_lecho_falla1: data.d13.X6,\n    Vibrador_lecho_motor2: data.d14.Y14,\n    Vibrador_lecho_falla2: data.d29.XE,\n    Soplador_rojo: data.d15.X15,\n    Soplador_rojo_falla: data.d16.XF,\n    Soplador_azul: data.d17.Y20,\n    Soplador_azul_falla: data.d18.XC,\n    Valvula_torpedo: data.d19.Y1A,\n    Valvula_despiche_bombona: data.d20.Y18,\n    Entrada_aire_bombona: data.d21.Y17,\n    Valvula_salida_lecho_bombona: data.d22.Y16,\n    Temp_arena_lecho_in: (data.d23.D3585)/10,\n    Temp_arena_lecho_out: (data.d24.D3587)/10,\n    Temp_agua_lecho_out: (data.d25.D3589)/10,\n    Temp_agua_lecho_in: (data.d26.D3591)/10,\n    Presion_bombona: data.d27.D64,\n    Nivel_arena_bombona: data.d28.D0,    \n}\n\nmsg.payload = transformedData;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "a3b9bcd09341930d",
                "21a73437a8475b45"
            ]
        ]
    },
    {
        "id": "3fae66f2d16dcac5",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d9",
        "func": "msg.topic = \"d9\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 860,
        "wires": [
            [
                "1e99a62a6f8845d9"
            ]
        ]
    },
    {
        "id": "96af15446383622b",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d10",
        "func": "msg.topic = \"d10\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "b36ac2889bd4172b"
            ]
        ]
    },
    {
        "id": "d358907bb05233d3",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d11",
        "func": "msg.topic = \"d11\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "b36ac2889bd4172b"
            ]
        ]
    },
    {
        "id": "c74802c67a59ae9d",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d12",
        "func": "msg.topic = \"d12\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "b36ac2889bd4172b"
            ]
        ]
    },
    {
        "id": "e0a698b8866a3b28",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d13",
        "func": "msg.topic = \"d13\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 480,
        "wires": [
            [
                "b36ac2889bd4172b"
            ]
        ]
    },
    {
        "id": "246362fd647bd364",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d14",
        "func": "msg.topic = \"d14\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 540,
        "wires": [
            [
                "b36ac2889bd4172b"
            ]
        ]
    },
    {
        "id": "4b7b7dd7f56b2d9e",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d15",
        "func": "msg.topic = \"d15\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "bc365a1570f342e9"
            ]
        ]
    },
    {
        "id": "48e5ce6e7888798e",
        "type": "link out",
        "z": "dd1840493362654a",
        "name": "OutputRequest1",
        "mode": "link",
        "links": [
            "d8d352785a70a6e2"
        ],
        "x": 625,
        "y": 420,
        "wires": []
    },
    {
        "id": "1e99a62a6f8845d9",
        "type": "link out",
        "z": "dd1840493362654a",
        "name": "OutputRequest2",
        "mode": "link",
        "links": [
            "d8d352785a70a6e2"
        ],
        "x": 625,
        "y": 740,
        "wires": []
    },
    {
        "id": "b36ac2889bd4172b",
        "type": "link out",
        "z": "dd1840493362654a",
        "name": "OutputRequest3",
        "mode": "link",
        "links": [
            "d8d352785a70a6e2"
        ],
        "x": 1365,
        "y": 420,
        "wires": []
    },
    {
        "id": "b9b057adf8fb5d86",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d16",
        "func": "msg.topic = \"d16\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "bc365a1570f342e9"
            ]
        ]
    },
    {
        "id": "fd3f45a644ae47a4",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d17",
        "func": "msg.topic = \"d17\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 740,
        "wires": [
            [
                "bc365a1570f342e9"
            ]
        ]
    },
    {
        "id": "c486a59d0f7c226f",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d18",
        "func": "msg.topic = \"d18\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 800,
        "wires": [
            [
                "bc365a1570f342e9"
            ]
        ]
    },
    {
        "id": "bc365a1570f342e9",
        "type": "link out",
        "z": "dd1840493362654a",
        "name": "OutputRequest4",
        "mode": "link",
        "links": [
            "d8d352785a70a6e2"
        ],
        "x": 1365,
        "y": 740,
        "wires": []
    },
    {
        "id": "88f8af58dedae338",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "InputRequest1",
        "links": [
            "ecd15b1a6c3b9821"
        ],
        "x": 35,
        "y": 420,
        "wires": [
            [
                "d534142b66e1586b",
                "b9f9b53d080923ee",
                "1842791f6257bc24",
                "ce96ae8b8e56f29c",
                "8abd29cc90af59ef"
            ]
        ]
    },
    {
        "id": "bded4e7c648fed0d",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "InputRequest2",
        "links": [
            "ecd15b1a6c3b9821"
        ],
        "x": 35,
        "y": 740,
        "wires": [
            [
                "455def16de2f7adc",
                "17940bc276158b25",
                "cb749775b1fc2fbf",
                "8c27237c7ebe13f4",
                "da19297618187682"
            ]
        ]
    },
    {
        "id": "7697f3ef2b9dfaa4",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "InputRequest3",
        "links": [
            "ecd15b1a6c3b9821"
        ],
        "x": 775,
        "y": 420,
        "wires": [
            [
                "a64d8628b8b41f75",
                "253cdc84e419e03c",
                "c4b2440614cf69e4",
                "5ec36b482a239db0",
                "847f90dbf1e85bce"
            ]
        ]
    },
    {
        "id": "002495a5f96b3a85",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "InputRequest4",
        "links": [
            "ecd15b1a6c3b9821"
        ],
        "x": 785,
        "y": 740,
        "wires": [
            [
                "84d7434da31a2861",
                "31cf8fb6ef6daf92",
                "b7d019f41c3feffc",
                "f5af1037f32b6fc6",
                "aca65519fcb0c433"
            ]
        ]
    },
    {
        "id": "d8d352785a70a6e2",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "OutRequest",
        "links": [
            "bc365a1570f342e9",
            "b36ac2889bd4172b",
            "1e99a62a6f8845d9",
            "48e5ce6e7888798e",
            "eb708710fa97e434",
            "e77aeadca94119a6"
        ],
        "x": 825,
        "y": 120,
        "wires": [
            [
                "46a96ffeda20bfba"
            ]
        ]
    },
    {
        "id": "c127156f4c741fa3",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d19",
        "func": "msg.topic = \"d19\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 860,
        "wires": [
            [
                "bc365a1570f342e9"
            ]
        ]
    },
    {
        "id": "9a120b47b3b11644",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d20",
        "func": "msg.topic = \"d20\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 300,
        "wires": [
            [
                "eb708710fa97e434"
            ]
        ]
    },
    {
        "id": "f9c08c18c1170c78",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d21",
        "func": "msg.topic = \"d21\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 360,
        "wires": [
            [
                "eb708710fa97e434"
            ]
        ]
    },
    {
        "id": "6f8f1eb1098a3187",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d22",
        "func": "msg.topic = \"d22\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 420,
        "wires": [
            [
                "eb708710fa97e434"
            ]
        ]
    },
    {
        "id": "ef82061feedca12f",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d23",
        "func": "msg.topic = \"d23\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 480,
        "wires": [
            [
                "eb708710fa97e434"
            ]
        ]
    },
    {
        "id": "eb708710fa97e434",
        "type": "link out",
        "z": "dd1840493362654a",
        "name": "OutputRequest4",
        "mode": "link",
        "links": [
            "d8d352785a70a6e2"
        ],
        "x": 2065,
        "y": 420,
        "wires": []
    },
    {
        "id": "3fa0b16ba98a93a8",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "InputRequest4",
        "links": [
            "ecd15b1a6c3b9821"
        ],
        "x": 1485,
        "y": 420,
        "wires": [
            [
                "07eb63dc1122a797",
                "55881e31f17d396b",
                "92b5c9d9fce1c64b",
                "242b081b6b652f66",
                "d13e2029c4a3a355"
            ]
        ]
    },
    {
        "id": "18b6e74c1a9b0861",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d24",
        "func": "msg.topic = \"d24\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 540,
        "wires": [
            [
                "eb708710fa97e434"
            ]
        ]
    },
    {
        "id": "28bb43ec731642a3",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d25",
        "func": "msg.topic = \"d25\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 620,
        "wires": [
            [
                "e77aeadca94119a6"
            ]
        ]
    },
    {
        "id": "8f77880326842851",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d26",
        "func": "msg.topic = \"d26\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 680,
        "wires": [
            [
                "e77aeadca94119a6"
            ]
        ]
    },
    {
        "id": "aaeb0560c51b1e5a",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d27",
        "func": "msg.topic = \"d27\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 740,
        "wires": [
            [
                "e77aeadca94119a6"
            ]
        ]
    },
    {
        "id": "acddb0f01b63e08b",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d28",
        "func": "msg.topic = \"d28\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 800,
        "wires": [
            [
                "e77aeadca94119a6"
            ]
        ]
    },
    {
        "id": "e77aeadca94119a6",
        "type": "link out",
        "z": "dd1840493362654a",
        "name": "OutputRequest4",
        "mode": "link",
        "links": [
            "d8d352785a70a6e2"
        ],
        "x": 2065,
        "y": 740,
        "wires": []
    },
    {
        "id": "f71c3570273b4447",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "InputRequest4",
        "links": [
            "ecd15b1a6c3b9821"
        ],
        "x": 1485,
        "y": 740,
        "wires": [
            [
                "077132e8ad9ba7c5",
                "dc334af398d06ea1",
                "c950595d67b81d28",
                "925a14ad871a6f57",
                "17b782229ad8e61c"
            ]
        ]
    },
    {
        "id": "3367ca72942c33f0",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "d29",
        "func": "msg.topic = \"d29\";\nmsg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 860,
        "wires": [
            [
                "e77aeadca94119a6"
            ]
        ]
    },
    {
        "id": "4d6c9a29c56da8ec",
        "type": "link in",
        "z": "dd1840493362654a",
        "name": "InputRequest4",
        "links": [
            "ecd15b1a6c3b9821"
        ],
        "x": 2445,
        "y": 40,
        "wires": [
            [
                "9605d1468984bc44",
                "4665bd3346253694"
            ]
        ]
    },
    {
        "id": "905eea607facb88a",
        "type": "debug",
        "z": "dd1840493362654a",
        "name": "M55_read_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 40,
        "wires": []
    },
    {
        "id": "758d45d5ec381970",
        "type": "inject",
        "z": "dd1840493362654a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1790,
        "y": 100,
        "wires": [
            [
                "ecd15b1a6c3b9821"
            ]
        ]
    },
    {
        "id": "ecd15b1a6c3b9821",
        "type": "link out",
        "z": "dd1840493362654a",
        "name": "preguntar estado",
        "mode": "link",
        "links": [
            "88f8af58dedae338",
            "002495a5f96b3a85",
            "bded4e7c648fed0d",
            "7697f3ef2b9dfaa4",
            "3fa0b16ba98a93a8",
            "f71c3570273b4447",
            "4d6c9a29c56da8ec"
        ],
        "x": 1915,
        "y": 100,
        "wires": []
    },
    {
        "id": "a0393f9be3c6efe9",
        "type": "debug",
        "z": "dd1840493362654a",
        "name": "M55_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 320,
        "wires": []
    },
    {
        "id": "56d7172cabedcefe",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "WebService to plc",
        "func": "var mensajeObjeto = JSON.parse(msg.payload);\n\nvar valorCanal = mensajeObjeto.canal;\nvar valorDato = mensajeObjeto.dato;\n\n//Aire empuje tubo alimentacio bombona\nif (valorCanal === \"M55\") {\n    if (valorDato === \"1\") {\n        var msg1 = {payload: 1 };\n    }\n    else if (valorDato === \"0\") {\n        var msg1 = {payload: 0 };\n    }\n}\nif (valorCanal === \"M56\") {\n    if (valorDato === \"1\") {   \n        var msg2 = {payload: 1 };     \n    }\n    else if (valorDato === \"0\") {\n        var msg2 = {payload: 0 };\n    }\n}\nnode.send([msg1, msg2]);",
        "outputs": 11,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 560,
        "wires": [
            [
                "b939e4655f2b8e35"
            ],
            [
                "ba8c8d45f8800e94"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "44978dafa2841ee0",
        "type": "debug",
        "z": "dd1840493362654a",
        "name": "M56_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2940,
        "y": 520,
        "wires": []
    },
    {
        "id": "531ef20b0dd39f3c",
        "type": "debug",
        "z": "dd1840493362654a",
        "name": "M56_read_test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2880,
        "y": 100,
        "wires": []
    },
    {
        "id": "d534142b66e1586b",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "E.Stop",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M999",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 350,
        "y": 300,
        "wires": [
            [
                "e35ad54b0ccddb72"
            ]
        ]
    },
    {
        "id": "b9f9b53d080923ee",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Bombona llena",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X1",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 320,
        "y": 360,
        "wires": [
            [
                "274bafb096e7690f"
            ]
        ]
    },
    {
        "id": "1842791f6257bc24",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Bombona bajo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X3",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 320,
        "y": 420,
        "wires": [
            [
                "4683bb0c749973b0"
            ]
        ]
    },
    {
        "id": "ce96ae8b8e56f29c",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Lecho lleno",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X5",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 330,
        "y": 480,
        "wires": [
            [
                "0680615f393afc8b"
            ]
        ]
    },
    {
        "id": "8abd29cc90af59ef",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Lecho bajo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X4",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 330,
        "y": 540,
        "wires": [
            [
                "bfd16f6a57abe3ea"
            ]
        ]
    },
    {
        "id": "455def16de2f7adc",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Bombona presurizada",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M98",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 300,
        "y": 620,
        "wires": [
            [
                "e425955d03d1ed21"
            ]
        ]
    },
    {
        "id": "17940bc276158b25",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Bombona despresurizada",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M97",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 290,
        "y": 680,
        "wires": [
            [
                "76aa84d789adb3a5"
            ]
        ]
    },
    {
        "id": "cb749775b1fc2fbf",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "cajon bombona Shakeout llena",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X9",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 270,
        "y": 740,
        "wires": [
            [
                "709bcb1db67df70a"
            ]
        ]
    },
    {
        "id": "da19297618187682",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador shakeout (motor1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y11",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 280,
        "y": 800,
        "wires": [
            [
                "878a06595648430d"
            ]
        ]
    },
    {
        "id": "a64d8628b8b41f75",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador shakeout (motor2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y12",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "96af15446383622b"
            ]
        ]
    },
    {
        "id": "8c27237c7ebe13f4",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador shakeout (falla1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XA",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 290,
        "y": 860,
        "wires": [
            [
                "3fae66f2d16dcac5"
            ]
        ]
    },
    {
        "id": "c4b2440614cf69e4",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador shakeout (falla2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X2",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1030,
        "y": 360,
        "wires": [
            [
                "d358907bb05233d3"
            ]
        ]
    },
    {
        "id": "253cdc84e419e03c",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador lecho (motor1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y13",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "c74802c67a59ae9d"
            ]
        ]
    },
    {
        "id": "5ec36b482a239db0",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador lecho (falla1)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X6",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1040,
        "y": 480,
        "wires": [
            [
                "e0a698b8866a3b28"
            ]
        ]
    },
    {
        "id": "847f90dbf1e85bce",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador lecho (motor2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y14",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "246362fd647bd364"
            ]
        ]
    },
    {
        "id": "84d7434da31a2861",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "soplador rojo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "X15",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "4b7b7dd7f56b2d9e"
            ]
        ]
    },
    {
        "id": "31cf8fb6ef6daf92",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Soplador rojo (falla)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XF",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "b9b057adf8fb5d86"
            ]
        ]
    },
    {
        "id": "b7d019f41c3feffc",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "soplador azul",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y20",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1070,
        "y": 740,
        "wires": [
            [
                "fd3f45a644ae47a4"
            ]
        ]
    },
    {
        "id": "f5af1037f32b6fc6",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "soplador azul (falla)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XC",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1050,
        "y": 800,
        "wires": [
            [
                "c486a59d0f7c226f"
            ]
        ]
    },
    {
        "id": "aca65519fcb0c433",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Valvula torpedo",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y1A",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1060,
        "y": 860,
        "wires": [
            [
                "c127156f4c741fa3"
            ]
        ]
    },
    {
        "id": "07eb63dc1122a797",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Valvula despiche bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y18",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1720,
        "y": 300,
        "wires": [
            [
                "9a120b47b3b11644"
            ]
        ]
    },
    {
        "id": "55881e31f17d396b",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Entrada aire bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y17",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 360,
        "wires": [
            [
                "f9c08c18c1170c78"
            ]
        ]
    },
    {
        "id": "92b5c9d9fce1c64b",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Valvula salida lecho bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "Y16",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1710,
        "y": 420,
        "wires": [
            [
                "6f8f1eb1098a3187"
            ]
        ]
    },
    {
        "id": "242b081b6b652f66",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Temp Arena lecho IN",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3585",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 480,
        "wires": [
            [
                "ef82061feedca12f"
            ]
        ]
    },
    {
        "id": "d13e2029c4a3a355",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Temp arena lecho Out",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3587",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 540,
        "wires": [
            [
                "18b6e74c1a9b0861"
            ]
        ]
    },
    {
        "id": "077132e8ad9ba7c5",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Temp agua lecho Out",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3589",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1760,
        "y": 620,
        "wires": [
            [
                "28bb43ec731642a3"
            ]
        ]
    },
    {
        "id": "dc334af398d06ea1",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Temp agua lecho in",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D3591",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1730,
        "y": 680,
        "wires": [
            [
                "8f77880326842851"
            ]
        ]
    },
    {
        "id": "c950595d67b81d28",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Presion bombona [BAR]",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D64",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1730,
        "y": 740,
        "wires": [
            [
                "aaeb0560c51b1e5a"
            ]
        ]
    },
    {
        "id": "925a14ad871a6f57",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Nivel arena bombona",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "D0",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 800,
        "wires": [
            [
                "acddb0f01b63e08b"
            ]
        ]
    },
    {
        "id": "17b782229ad8e61c",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "Vibrador lecho (falla2)",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "XE",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 1740,
        "y": 860,
        "wires": [
            [
                "3367ca72942c33f0"
            ]
        ]
    },
    {
        "id": "9605d1468984bc44",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "M55 Read SetPoint BBAS agua",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M55",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2630,
        "y": 40,
        "wires": [
            [
                "905eea607facb88a"
            ]
        ]
    },
    {
        "id": "4665bd3346253694",
        "type": "Ind MC Read",
        "z": "dd1840493362654a",
        "name": "M56 Read SetPoint Enfirador agua",
        "topic": "",
        "connection": "a58ac421aa624587",
        "address": "M56",
        "addressType": "str",
        "outputFormat": 0,
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2640,
        "y": 100,
        "wires": [
            [
                "531ef20b0dd39f3c"
            ]
        ]
    },
    {
        "id": "b939e4655f2b8e35",
        "type": "Ind MC Write",
        "z": "dd1840493362654a",
        "name": "M55",
        "topic": "",
        "connection": "a58ac421aa624587",
        "data": "payload",
        "address": "M55",
        "addressType": "str",
        "dataType": "msg",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2690,
        "y": 340,
        "wires": [
            [
                "a0393f9be3c6efe9"
            ]
        ]
    },
    {
        "id": "ba8c8d45f8800e94",
        "type": "Ind MC Write",
        "z": "dd1840493362654a",
        "name": "M56",
        "topic": "",
        "connection": "a58ac421aa624587",
        "data": "payload",
        "address": "M56",
        "addressType": "str",
        "dataType": "msg",
        "errorHandling": "throw",
        "outputs": 1,
        "x": 2730,
        "y": 460,
        "wires": [
            [
                "44978dafa2841ee0"
            ]
        ]
    },
    {
        "id": "a85b8b93c09c3c8a",
        "type": "function",
        "z": "dd1840493362654a",
        "name": "scrpit",
        "func": "if (msg.payload === \"true\") {\n    var msg1 = {payload: 1 };\n}\nnode.send([msg1]);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 160,
        "wires": [
            [
                "ecd15b1a6c3b9821"
            ]
        ]
    },
    {
        "id": "471ef217edd312d2",
        "type": "inject",
        "z": "ec5a549616ef2efd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 480,
        "wires": [
            [
                "ed80485a14cbafc4"
            ]
        ]
    },
    {
        "id": "f2ac2ea00fa95b81",
        "type": "debug",
        "z": "ec5a549616ef2efd",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 420,
        "wires": []
    },
    {
        "id": "ed80485a14cbafc4",
        "type": "exec",
        "z": "ec5a549616ef2efd",
        "command": "python3 /home/MED_TTermicosF2_Funciona.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 960,
        "y": 480,
        "wires": [
            [
                "f2ac2ea00fa95b81"
            ],
            [
                "9e856fa343049b32"
            ],
            [
                "98f6321eb5accdf2"
            ]
        ]
    },
    {
        "id": "9e856fa343049b32",
        "type": "debug",
        "z": "ec5a549616ef2efd",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 480,
        "wires": []
    },
    {
        "id": "98f6321eb5accdf2",
        "type": "debug",
        "z": "ec5a549616ef2efd",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 540,
        "wires": []
    },
    {
        "id": "26990fb1b8661544",
        "type": "http in",
        "z": "ec5a549616ef2efd",
        "name": "",
        "url": "api/Analisis",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "c26ef5b8b551c6b8"
            ]
        ]
    },
    {
        "id": "c26ef5b8b551c6b8",
        "type": "influxdb in",
        "z": "ec5a549616ef2efd",
        "influxdb": "901545a3e9d96401",
        "name": "F2H1",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: 2025-07-01T00:00:00Z)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-Horno1-[COUNTIS-E53]\" or r[\"_measurement\"] == \"F2-Horno2-[DPM-C530]\")\n  |> unique(column: \"_value\")\n",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 1130,
        "y": 1040,
        "wires": [
            [
                "7d1b878a485d5397"
            ]
        ]
    },
    {
        "id": "752d31170604c713",
        "type": "http response",
        "z": "ec5a549616ef2efd",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 1240,
        "y": 980,
        "wires": []
    },
    {
        "id": "7d1b878a485d5397",
        "type": "function",
        "z": "ec5a549616ef2efd",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_KPI = 'datosKPICache';\nconst TIMESTAMP_KEY_KPI = 'datosKPITimestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_KPI, msg.payload);\nflow.set(TIMESTAMP_KEY_KPI, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1040,
        "wires": [
            [
                "752d31170604c713",
                "21b1072ec97df3d2"
            ]
        ]
    },
    {
        "id": "21b1072ec97df3d2",
        "type": "debug",
        "z": "ec5a549616ef2efd",
        "name": "Datos guardados en cache",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1420,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c3f30fddb6dcc8b8",
        "type": "http in",
        "z": "ec5a549616ef2efd",
        "name": "",
        "url": "api/test",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 510,
        "y": 700,
        "wires": [
            [
                "a2c33949f15b12d5"
            ]
        ]
    },
    {
        "id": "a2c33949f15b12d5",
        "type": "influxdb in",
        "z": "ec5a549616ef2efd",
        "influxdb": "901545a3e9d96401",
        "name": "F2H1",
        "query": "from(bucket: \"fundicion2\")\n  |> range(start: -24h, stop: now())\n  |> filter(fn: (r) => r[\"_measurement\"] == \"F2-Horno1-[COUNTIS-E53]\" or r[\"_measurement\"] == \"F2-Horno2-[DPM-C530]\")\n  |> aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "Neptuno",
        "x": 850,
        "y": 760,
        "wires": [
            [
                "39e02e12b73e02ad"
            ]
        ]
    },
    {
        "id": "2217c9e7e4d6dd53",
        "type": "http response",
        "z": "ec5a549616ef2efd",
        "name": "Enviar datos a Angular",
        "statusCode": "200",
        "headers": {},
        "x": 1200,
        "y": 680,
        "wires": []
    },
    {
        "id": "39e02e12b73e02ad",
        "type": "function",
        "z": "ec5a549616ef2efd",
        "name": "Guardar en cache",
        "func": "//formateo los datos entrantes y los guardo en msg.payload\nconst formattedData = msg.payload.map(item => ({\n    measurement: item._measurement,\n    field: item._field,\n    time: item._time,\n    numero: item._value,\n}))\nmsg.payload = formattedData;\n\n//---Configuracion del cache (Debe coincidir con la verificacion)---\nconst CACHE_KEY_F2H1 = 'datosGraficoF2H1Cache';\nconst TIMESTAMP_KEY_F2H1 = 'datosGraficoF2H1Timestamp';\n//------------------------------------------------------------------\n\n//Guardar los datos (los que vienen en msg.payload) y la marca en tiempo actual\nflow.set(CACHE_KEY_F2H1, msg.payload);\nflow.set(TIMESTAMP_KEY_F2H1, Date.now());\n\nnode.log(\"Datos nuevos guardados en cache\");\n\n//pasamos los datos al siguiente nodo\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 740,
        "wires": [
            [
                "2217c9e7e4d6dd53",
                "69065652734f4e3f"
            ]
        ]
    },
    {
        "id": "69065652734f4e3f",
        "type": "debug",
        "z": "ec5a549616ef2efd",
        "name": "Datos guardados en cache",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1380,
        "y": 800,
        "wires": []
    }
]